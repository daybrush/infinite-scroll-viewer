{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/index.umd.ts","../src/InfiniteViewer.tsx","../src/InfiniteViewerManager.tsx"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: 100%;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: 100%;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n    border-radius: 5px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n    border-radius: 5px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    rangeOffsetX: [0, 0],\n    rangeOffsetY: [0, 0],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    useAutoZoom: false,\n    useMouseDrag: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: Infinity,\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useTransform: true,\n    useWheelPinch: true,\n    zoomRange: [0.001, Infinity],\n    wheelPinchKey: \"ctrl\" as const,\n    useWheelScroll: IS_SAFARI,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: true,\n    useResizeObserver: false,\n};\n\nexport const DEFAULT_EASING = (x: number) => 1 - Math.pow(1 - x, 3);\nexport const NAMES = {\n    horizontal: {\n        pos: \"Left\",\n        coord: \"X\",\n        size: \"Width\",\n    },\n    vertical: {\n        pos: \"Top\",\n        coord: \"Y\",\n        size: \"Height\",\n    },\n} as const;\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"useWheelScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"useWheel\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"zoomBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\nimport { AnimationOptions } from \"./types\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        -speed[0] / 2 * duration,\n        -speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n\n\nexport function checkDefault<T>(value: T | undefined | null, defaultValue: T): T {\n    return value != null ? value : defaultValue;\n}\n\n\n\nexport function startAnimation(\n    callback: (ratioDist: number) => void,\n    timerCallback: (next: () => void) => void,\n    options: AnimationOptions,\n) {\n    const duration = options.duration;\n    const easing = options.easing || ((x: number) => 1 - Math.pow(1 - x, 3));\n    const startTime = Date.now();\n    let prevTime = startTime;\n\n    const next = () => {\n        const now = Date.now();\n        let t = now - startTime;\n\n        if (duration < t) {\n            t = duration;\n        }\n        const ratio = easing(t / duration);\n        const prevRatio = easing((prevTime - startTime) / duration);\n\n        prevTime = now;\n\n        callback(ratio - prevRatio);\n\n        if (t >= duration) {\n            return;\n        }\n        timerCallback(next);\n    };\n    timerCallback(next);\n}\n","import Gesto from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\n\nexport default class ScrollBar extends EventEmitter {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    public barElement!: HTMLElement;\n    private gesto!: Gesto;\n    private pos: number = 0;\n    private size: number = 0;\n    private scrollSize: number = 0;\n    private isHorizontal = false;\n\n    constructor(\n        private type: \"horizontal\" | \"vertical\",\n        container?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n        let thumbElement: HTMLElement;\n        let barElement: HTMLElement = container;\n\n        if (!container) {\n            barElement = document.createElement(\"div\");\n            thumbElement = document.createElement(\"div\");\n\n            barElement.insertBefore(thumbElement, null);\n            this.isAppend = true;\n        } else {\n            thumbElement = container.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        addClass(\n            barElement,\n            isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                : VERTICAL_SCROLL_BAR_CLASS_NAME,\n        );\n        addClass(barElement, SCROLL_BAR_CLASS_NAME);\n        addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n        this.thumbElement = thumbElement;\n        this.barElement = barElement;\n        this.isHorizontal = isHorizontal;\n        this.gesto = new Gesto(barElement, {\n            container: window,\n        }).on(\"dragStart\", e => {\n            const target = e.inputEvent.target;\n            const datas = e.datas;\n            const isThumb = this.thumbElement === target;\n\n            if (!isThumb) {\n                setTimeout(() => {\n                    requestAnimationFrame(() => {\n                        const thumbRect = this.thumbElement.getBoundingClientRect();\n                        const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                        const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                        const pos2 = pos1 + thumbSize;\n                        const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                        if (pos1 <= clientPos && clientPos <= pos2) {\n                            return;\n                        }\n                        const size = this.size;\n                        const delta = size * size / this.scrollSize;\n\n                        this.scrollBy(pos1 < clientPos ? delta : -delta);\n                    });\n                }, 100);\n\n            }\n            datas.isThumb = isThumb;\n            e.inputEvent.stopPropagation();\n            e.inputEvent.preventDefault();\n        }).on(\"drag\", e => {\n            if (!e.datas.isThumb) {\n                return;\n            }\n            this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY);\n        });\n        addEvent(this.barElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: this.scrollSize * ratio,\n        });\n    }\n    public render(isDisplay: boolean, pos: number, size: number, scrollSize: number) {\n        this.pos = pos;\n        this.size = size;\n        this.scrollSize = scrollSize;\n\n        const display = isDisplay && (scrollSize > size) ? \"block\" : \"none\";\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n\n        this.barElement.style.cssText = `display: ${display};`;\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${size * size / scrollSize}px;`\n            + `transform: translate${dirName1}(${pos / scrollSize * size}px)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this.onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    private onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewerManager from \"./InfiniteViewerManager\";\n\nexport default class InfiniteViewer extends InfiniteViewerManager {}\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass, convertUnitSize, between } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, OnPinch, AnimationOptions, ScrollOptions, ZoomOptions } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME, NAMES, DEFAULT_EASING\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange, checkDefault, startAnimation } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private containerWidth: number = 0;\n    private containerHeight: number = 0;\n    private viewportWidth: number = 0;\n    private viewportHeight: number = 0;\n    private scrollLeft: number = 0;\n    private scrollTop: number = 0;\n    private _scrollTimer = 0;\n    private _zoomTimer = 0;\n\n    private dragFlag: boolean = false;\n    private isLoop: boolean = false;\n    private _tempScale: number = 1;\n    private _tempRect: { top: number, left: number, width: number, height: number } | null = null;\n    private _tempRectTimer: number | null = null;\n    private _onDestroys: Array<() => void> = [];\n    private _asLeft = 0;\n    private _asTop = 0;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private containerElement: HTMLElement,\n        private viewportElement: HTMLElement,\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...options,\n        };\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this.containerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this.viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Get Scroll Area Element\n     */\n    public geScrollArea(): HTMLElement {\n        return this.scrollAreaElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this.containerElement;\n\n        this._onDestroys.forEach(callback => {\n            callback();\n        });\n        removeEvent(this.wrapperElement, \"scroll\", this._onScroll);\n        removeEvent(containerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"gesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n        removeEvent(containerElement, \"gesturesend\", this.onGestureEnd);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this.containerElement = null;\n        this.viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute top position\n     */\n    public getScrollTop(isAbsolute?: boolean) {\n        return this.scrollTop / this.zoom + this.offsetY\n            + (isAbsolute ? abs(this.getRangeY()[0]) : 0);\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute left position\n     */\n    public getScrollLeft(isAbsolute?: boolean) {\n        return this.scrollLeft / this.zoom + this.offsetX\n            + (isAbsolute ? abs(this.getRangeX()[0]) : 0);\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this.getRangeX(isZoom);\n\n        return this.containerWidth + abs(range[0]) + abs(range[1]);\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this.getRangeY(isZoom);\n\n        return this.containerHeight + abs(range[0]) + abs(range[1]);\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter(options?: ScrollOptions) {\n        this.resize();\n\n        const zoom = this.zoom;\n\n        let left = -(this.containerWidth / zoom - this.viewportWidth) / 2;\n        let top = -(this.containerHeight / zoom - this.viewportHeight) / 2;\n\n        if (options?.absolute) {\n            left *= zoom;\n            top *= zoom;\n        }\n\n\n        return this.scrollTo(left, top, options);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this.containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n        } = this.viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n\n        this.render();\n        this._scrollBy(0, 0);\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoom;\n                scrollTop *= this.zoom;\n            }\n            return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n        } else {\n            this._startScrollAnimation([deltaX, deltaY], options);\n            return true;\n        }\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            return this._scrollTo(x, y, options);\n        } else {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoom;\n                scrollTop *= this.zoom;\n            }\n            return this.scrollBy(x - scrollLeft, y - scrollTop, options);\n        }\n    }\n    /**\n     * Set viewer zoom by the given amount\n     */\n    public zoomBy(deltaZoom: number, options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n\n        if (!options || !options.duration) {\n            this._setZoom(this.zoom + deltaZoom);\n        } else {\n            this._startZoomAnimation(deltaZoom, options);\n        }\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number, options?: AnimationOptions) {\n        this._pauseZoomAnimation();\n\n        if (!options || !options.duration) {\n            this._setZoom(zoom);\n        } else {\n            this._startZoomAnimation(zoom - this.zoom, options);\n        }\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"horizontal\", isZoom, isReal);\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"vertical\", isZoom, isReal);\n    }\n\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const containerElement = this.containerElement;\n        const options = this.options;\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (wrapperElement) {\n            this.wrapperElement = wrapperElement;\n        } else {\n            wrapperElement = document.createElement(\"div\");\n            wrapperElement.insertBefore(this.viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n\n            this.wrapperElement = wrapperElement;\n        }\n\n        if (scrollAreaElement) {\n            this.scrollAreaElement = scrollAreaElement;\n        } else {\n            scrollAreaElement = document.createElement(\"div\");\n\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n\n            this.scrollAreaElement = scrollAreaElement;\n        }\n        addClass(containerElement, CLASS_NAME);\n        addClass(wrapperElement, WRAPPER_CLASS_NAME);\n        addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n\n        this.horizontalScrollbar = new ScrollBar(\"horizontal\", horizontalScrollElement);\n        this.verticalScrollbar = new ScrollBar(\"vertical\", verticalScrollElement);\n\n        this.horizontalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoom, 0);\n        });\n\n        this.verticalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoom);\n        });\n\n        if (this.horizontalScrollbar.isAppend) {\n            containerElement.insertBefore(this.horizontalScrollbar.barElement, null);\n        }\n        if (this.verticalScrollbar.isAppend) {\n            containerElement.insertBefore(this.verticalScrollbar.barElement, null);\n        }\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * The pinchStart and abortPinch events do not occur when pinching through the wheel.\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: document.body,\n            events: [\"touch\", \"mouse\"],\n        }).on(\"dragStart\", ({ inputEvent, datas, stop, isMouseEvent }) => {\n            if (!this.useMouseDrag && isMouseEvent) {\n                stop();\n                return;\n            }\n            this._pauseScrollAnimation();\n            this.dragFlag = false;\n            const result = this.trigger(\"dragStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n                return;\n            }\n\n            inputEvent.preventDefault();\n\n            datas.startEvent = inputEvent;\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch || (this.useMouseDrag && e.isMouseEvent)) {\n                this.trigger(\"drag\", {\n                    ...e,\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                const zoom = this.zoom;\n                this.scrollBy(-e.deltaX / zoom, -e.deltaY / zoom);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this._startScrollAnimationBySpeed(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this._pauseScrollAnimation();\n            datas.startZoom = this.zoom;\n\n            const result = this.trigger(\"pinchStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n            this._setClientRect();\n        }).on(\"pinch\", e => {\n            this._triggerPinch({\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                inputEvent: e.inputEvent,\n                isWheel: false,\n                zoom: e.datas.startZoom * e.scale,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        }).on(\"pinchEnd\", () => {\n            this._tempRect = null;\n        });\n\n        addEvent(wrapperElement, \"scroll\", this._onScroll);\n\n        if (options.useResizeObserver) {\n            const observer = new ResizeObserver(() => {\n                this.resize();\n            });\n\n            observer.observe(this.viewportElement);\n            observer.observe(this.containerElement);\n\n\n            this._onDestroys.push(() => {\n                observer.disconnect();\n            });\n        } else {\n            addEvent(window, \"resize\", this.resize);\n\n            this._onDestroys.push(() => {\n                removeEvent(window, \"resize\", this.resize);\n            })\n        }\n\n        if (options.useWheelPinch || options.useWheelScroll) {\n            addEvent(containerElement, \"wheel\", this.onWheel, {\n                passive: false,\n            });\n        }\n        if (options.useGesture) {\n            addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n                passive: false,\n            });\n            addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n                passive: false,\n            });\n        }\n        this.resize();\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoom = DEFAULT_OPTIONS.zoom,\n            translateZ = 0,\n        } = this;\n        const {\n            useTransform = DEFAULT_OPTIONS.useTransform,\n        } = this.options;\n        const nextOffsetX = -offsetX * zoom;\n        const nextOffsetY = -offsetY * zoom;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n\n        const viewportStyle = this.viewportElement.style;\n\n        if (useTransform === false) {\n            viewportStyle.cssText += `position: relative; top: ${nextOffsetY}px; left: ${nextOffsetX}px;`;\n        } else {\n            viewportStyle.cssText += `transform-origin: 0 0;transform:translate3d(${nextOffsetX}px, ${nextOffsetY}px, ${translateZ}px) scale(${zoom});`;\n        }\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            containerWidth,\n            containerHeight,\n            zoom,\n        } = this;\n        const scrollLeft = this.getScrollLeft(true) * zoom;\n        const scrollTop = this.getScrollTop(true) * zoom;\n        const scrollWidth = this.getScrollWidth(true);\n        const scrollHeight = this.getScrollHeight(true);\n\n        this.horizontalScrollbar.render(\n            this.displayHorizontalScroll,\n            scrollLeft,\n            containerWidth,\n            scrollWidth,\n        );\n        this.verticalScrollbar.render(\n            this.displayVerticalScroll,\n            scrollTop,\n            containerHeight,\n            scrollHeight,\n        );\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private _onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const options = this.options;\n        const maxPinchWheel = options.maxPinchWheel || Infinity;\n\n        const isKeydown = e[`${this.wheelPinchKey}Key`] || e.ctrlKey;\n\n        if (options.useWheelPinch && isKeydown) {\n            let deltaY = e.deltaY;\n            const sign = deltaY >= 0 ? 1 : -1;\n            const distance = Math.min(maxPinchWheel, Math.abs(deltaY));\n\n\n            deltaY = sign * distance;\n            const delta = -deltaY;\n            const scale = Math.max(1 + delta * (options.wheelScale || 0.01), TINY_NUM);\n\n            clearTimeout(this._tempRectTimer);\n            this._tempRectTimer = window.setTimeout(() => {\n                this._tempRect = null;\n            }, 100);\n            this._triggerPinch({\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                inputEvent: e,\n                isWheel: true,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        } else if (options.useWheelScroll) {\n            const zoom = this.zoom;\n\n            let deltaX = e.deltaX;\n            let deltaY = e.deltaY;\n\n            if (e.shiftKey && !deltaX) {\n                deltaX = deltaY;\n                deltaY = 0;\n            }\n            this.scrollBy(deltaX / zoom, deltaY / zoom);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this._tempScale = this.zoom;\n        this._setClientRect();\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this._tempScale) {\n            this._tempScale = 0;\n            return;\n        }\n        const scale = e.scale;\n\n        this._triggerPinch({\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            inputEvent: e,\n            isWheel: true,\n            zoom: this._tempScale * scale,\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ratioX: 0,\n            ratioY: 0,\n        });\n    }\n    private onGestureEnd = () => {\n\n    }\n    private _startZoomAnimation(dest: number, options: ZoomOptions) {\n        if (!dest) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._setZoom(\n                this.zoom + dest * distRatio,\n                options.zoomBase,\n            ),\n            next => {\n                this._zoomTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimation(dest: number[], options: AnimationOptions) {\n        if (!dest[0] && !dest[1]) {\n            return;\n        }\n        console.log(\"SC A\", dest, options);\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._scrollBy(\n                dest[0] * distRatio,\n                dest[1] * distRatio,\n                options,\n            ),\n            next => {\n                this._scrollTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimationBySpeed(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n\n        return this._startScrollAnimation(destPos, {\n            duration,\n        })\n\n    }\n    private _pauseScrollAnimation() {\n        cancelAnimationFrame(this._scrollTimer);\n        this._scrollTimer = 0;\n    }\n    private _pauseZoomAnimation() {\n        cancelAnimationFrame(this._zoomTimer);\n        this._zoomTimer = 0;\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private _triggerPinch(event: OnPinch) {\n        const {\n            clientX,\n            clientY,\n            zoom,\n        } = event;\n        if (this.useAutoZoom) {\n            this._zoomByClient(event.zoom, clientX, clientY);\n        }\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const zoomRange = this.zoomRange;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const ratioX = (clientX - left) / width * 100;\n        const ratioY = (clientY - top) / height * 100;\n\n        this.trigger(\"pinch\", {\n            ...event,\n            zoom: between(zoom, zoomRange[0], zoomRange[1]),\n            ratioX,\n            ratioY,\n        });\n    }\n    private _setClientRect() {\n        const rect = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: rect.left,\n            top: rect.top,\n            width: rect.width,\n            height: rect.height,\n        };\n    }\n    private _zoomByClient(zoom: number, clientX: number, clientY: number) {\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const options = this.options;;\n\n        const originalZoomOffsetX = options.zoomOffsetX;\n        const originalZoomOffsetY = options.zoomOffsetY;\n\n        options.zoomOffsetX = `${(clientX - left) / width * 100}%`;\n        options.zoomOffsetY = `${(clientY - top) / height * 100}%`;\n\n        this._setZoom(zoom, \"screen\");\n\n        options.zoomOffsetX = originalZoomOffsetX;\n        options.zoomOffsetY = originalZoomOffsetY;\n    }\n    private _setZoom(\n        zoom: number,\n        zoomBase?: \"screen\" | \"viewport\",\n    ) {\n        const {\n            containerWidth,\n            containerHeight,\n            zoom: prevZoom,\n            zoomRange\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n        const nextZoom = between(zoom, zoomRange[0], zoomRange[1]);\n\n        this.options.zoom = nextZoom;\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n        let zoomX = 0;\n        let zoomY = 0;\n\n        if (zoomBase === \"viewport\") {\n            zoomX = (-scrollLeft + convertUnitSize(`${zoomOffsetX}`, this.viewportWidth)) * prevZoom;\n            zoomY = (-scrollTop + convertUnitSize(`${zoomOffsetY}`, this.viewportHeight)) * prevZoom;\n        } else {\n            zoomX = convertUnitSize(`${zoomOffsetX}`, containerWidth);\n            zoomY = convertUnitSize(`${zoomOffsetY}`, containerHeight);\n        }\n\n        const centerX = scrollLeft + zoomX / prevZoom;\n        const centerY = scrollTop + zoomY / prevZoom;\n\n        const nextCenterX = nextScrollLeft + zoomX / nextZoom;\n        const nextCenterY = nextScrollTop + zoomY / nextZoom;\n\n        this._scrollBy(centerX - nextCenterX, centerY - nextCenterY);\n        this.render();\n    }\n    private _scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        let scrollLeft = this.getScrollLeft();\n        let scrollTop = this.getScrollTop();\n\n        if (options?.absolute) {\n            scrollLeft *= this.zoom;\n            scrollTop *= this.zoom;\n        }\n        return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n    }\n    private _scrollTo(x: number, y: number, options?: ScrollOptions) {\n        const {\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n\n        const isAbsolute = options?.absolute;\n        this._scrollToType(\"horizontal\", x, isAbsolute);\n        this._scrollToType(\"vertical\", y, isAbsolute);\n\n        const scrollLeft = this.scrollLeft;\n        const scrollTop = this.scrollTop;\n        this.render();\n        const nextScrollAbsoluteLeft = this.getScrollLeft();\n        const nextScrollAbsoluteTop = this.getScrollTop();\n\n        this._emitScrollEvent(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n\n        if (Math.round(prevScrollLeft) !== scrollLeft || Math.round(prevScrollTop) !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (\n                    scrollLeft !== Math.round(requestScrollLeft)\n                    || scrollTop !== Math.round(requestScrollTop)\n                ) {\n                    this._scrollTo(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    private _scrollToType(type: \"horizontal\" | \"vertical\", coord: number, isAbsolute?: boolean) {\n        const names = NAMES[type];\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n        } = this;\n        const prevScrollPos = this[`scroll${names.pos}`];\n        const [minCoord, maxCoord] = this[`getRange${names.coord}`](true, true);\n\n        let scrollPos = Math.round(prevScrollPos);\n\n        const scrollAreaSize = this[`getScrollArea${names.size}`]();\n\n        if (isAbsolute) {\n            coord = coord / zoom;\n        }\n        const zoomCoord = coord * zoom;\n\n        if (minCoord === maxCoord) {\n            scrollPos = minCoord;\n            coord = minCoord / zoom;\n        } else if (zoomCoord - threshold <= minCoord) {\n            const minThreshold = Math.max(0, zoomCoord - minCoord);\n\n            scrollPos = minThreshold;\n            coord = (minCoord + minThreshold) / zoom;\n        } else if (zoomCoord + threshold >= maxCoord) {\n            const maxThreshold = Math.max(0, maxCoord - zoomCoord);\n\n            scrollPos = scrollAreaSize - maxThreshold;\n            coord = (maxCoord - maxThreshold) / zoom;\n        } else if (scrollPos < threshold) {\n            scrollPos += margin;\n        } else if (scrollPos > scrollAreaSize - threshold) {\n            scrollPos -= margin;\n        }\n\n        scrollPos = Math.round(scrollPos);\n\n        this[`scroll${names.pos}`] = scrollPos;\n        this[`offset${names.coord}`] = coord - scrollPos / zoom;\n    }\n    private _getRangeCoord(type: \"vertical\" | \"horizontal\", isZoom?: boolean, isReal?: boolean) {\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            zoom = DEFAULT_OPTIONS.zoom,\n            threshold,\n        } = this;\n        const names = NAMES[type];\n        const rangeCoord = checkDefault(this[`range${names.coord}`], DEFAULT_OPTIONS[`range${names.coord}`]);\n        const rangeOffsetCoord = checkDefault(this[`rangeOffset${names.coord}`], DEFAULT_OPTIONS[`rangeOffset${names.coord}`]);\n        const range = getRange(\n            this[`getScroll${names.pos}`](),\n            margin,\n            rangeCoord,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return [range[0] + rangeOffsetCoord[0], range[1] + rangeOffsetCoord[1]];\n        }\n        return [\n            range[0] * zoom + rangeOffsetCoord[0],\n            Math.max(this[`viewport${names.size}`] * zoom - this[`container${names.size}`], range[1] * zoom + rangeOffsetCoord[1]),\n        ];\n    }\n    private _emitScrollEvent(scrollLeft: number, scrollTop: number) {\n        const prevScrollLeft = this._asLeft;\n        const prevScrollTop = this._asTop;\n\n        if (prevScrollLeft === scrollLeft && prevScrollTop === scrollTop) {\n            return;\n        }\n        this._asLeft = scrollLeft;\n        this._asTop = scrollTop;\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft,\n            scrollTop,\n        });\n    }\n}\n\ninterface InfiniteViewer extends InfiniteViewerProperties { }\n\nexport default InfiniteViewer;\n"],"names":["DEFAULT_EASING","x","Math","pow","IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","SCROLL_BAR_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","rangeX","Infinity","rangeY","rangeOffsetX","rangeOffsetY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","useAutoZoom","useMouseDrag","pinchThreshold","cspNonce","maxPinchWheel","wheelScale","displayHorizontalScroll","displayVerticalScroll","useTransform","useWheelPinch","zoomRange","wheelPinchKey","useWheelScroll","zoomOffsetX","zoomOffsetY","translateZ","useGesture","useResizeObserver","NAMES","horizontal","pos","coord","size","vertical","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArray","getDuration","speed","a","normalSpeed","sqrt","abs","v","checkDefault","value","defaultValue","startAnimation","callback","timerCallback","options","next","now","Date","t","startTime","ratio","easing","duration","prevRatio","prevTime","type","container","thumbElement","_super","isHorizontal","_this","e","delta","deltaX","deltaY","preventDefault","trigger","barElement","querySelector","document","createElement","insertBefore","isAppend","addClass","gesto","Gesto","window","on","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","thumbRect","getBoundingClientRect","pos1","pos2","clientPos","scrollSize","scrollBy","stopPropagation","addEvent","onWheel","passive","__extends","__proto","this","isDisplay","_a","dirName1","sizeName","style","cssText","removeEvent","off","EventEmitter","containerElement","viewportElement","containerWidth","containerHeight","_b","viewportWidth","viewportHeight","render","_scrollBy","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","isKeydown","ctrlKey","sign","distance","min","scale","max","clearTimeout","_tempRectTimer","_tempRect","_triggerPinch","rotation","isWheel","clientX","clientY","ratioX","ratioY","shiftKey","_tempScale","_setClientRect","isFlag","init","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","_onDestroys","forEach","_onScroll","onGestureStart","onGestureChange","onGestureEnd","isAbsolute","offsetY","getRangeY","offsetX","getRangeX","isZoom","range","resize","left","top","absolute","_pauseScrollAnimation","_startScrollAnimation","_scrollTo","y","deltaZoom","_pauseZoomAnimation","_startZoomAnimation","_setZoom","isReal","_getRangeCoord","observer_1","firstChild","ScrollBar","inject","nonce","body","events","stop","isMouseEvent","dragFlag","startEvent","dt","time","prevSpeed","isPinch","movement","isDrag","isDouble","_startScrollAnimationBySpeed","startZoom","ResizeObserver","observe","push","disconnect","_c","_d","nextOffsetX","nextOffsetY","viewportStyle","getScrollAreaWidth","getScrollAreaHeight","renderScroll","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","dest","distRatio","zoomBase","_zoomTimer","console","log","_scrollTimer","destPos","cancelAnimationFrame","event","_zoomByClient","between","rect","getContainer","width","height","originalZoomOffsetX","originalZoomOffsetY","prevZoom","nextZoom","nextScrollLeft","nextScrollTop","zoomX","zoomY","convertUnitSize","prevScrollLeft","prevScrollTop","_scrollToType","nextScrollAbsoluteLeft","nextScrollAbsoluteTop","_emitScrollEvent","round","move","requestScrollLeft","requestScrollTop","names","prevScrollPos","_e","minCoord","maxCoord","scrollPos","scrollAreaSize","zoomCoord","maxThreshold","rangeCoord","rangeOffsetCoord","isFinite","floor","ceil","_asLeft","_asTop","prototype","property","attributes","enumerable","configurable","get","setter","set","Object","defineProperty","InfiniteViewer","modules"],"mappings":";;;;;;;;kimBA2H8B,SAAjBA,GAAkBC,GAAc,OAAA,EAAIC,KAAKC,IAAI,EAAIF,EAAG,CAAhB,CAAkB,CAtH5D,oCACMG,GAAmC,k0DAAjBC,QAAQC,KAE1BC,EAAS,mBAETC,GAAqB,UAAGD,WAAH,EACrBE,GAAyB,UAAGF,eAAH,EAEzBG,GAAwB,UAAGH,cAAH,EACxBI,GAAmC,UAAGJ,yBAAH,EACnCK,GAAiC,UAAGL,uBAAH,EACjCM,GAA0B,UAAGN,gBAAH,EAE1BO,OAA4BP,KAAQ,s+DAwEpCQ,EAAkB,CAC3BC,OAAQ,IACRC,UAAW,IACXC,KAAM,EACNC,OAAQ,CAAEC,CAAAA,QAAUA,EAAAA,GACpBC,OAAQ,CAAED,CAAAA,EAAAA,EAAUA,EAAAA,GACpBE,aAAc,CAAC,EAAG,GAClBC,aAAc,CAAC,EAAG,GAClBC,eAAgB,KAChBC,kBAAmB,KACnBC,wBAAyB,KACzBC,sBAAuB,KACvBC,SAAU,CAAA,EACVC,YAAa,CAAA,EACbC,aAAc,CAAA,EACdC,eAAgB,GAChBC,SAAU,GACVC,cAAeb,EAAAA,EACfc,WAAY,IACZC,wBAAyB,CAAA,EACzBC,sBAAuB,CAAA,EACvBC,aAAc,CAAA,EACdC,cAAe,CAAA,EACfC,UAAW,CAAC,KAAOnB,EAAAA,GACnBoB,cAAe,OACfC,eAAgBrC,GAChBsC,YAAa,MACbC,YAAa,MACbC,WAAY,EACZC,WAAY,CAAA,EACZC,kBAAmB,CAAA,CA9BQ,EAkClBC,GAAQ,CACjBC,WAAY,CACRC,IAAK,OACLC,MAAO,IACPC,KAAM,SAEVC,SAAU,CACNH,IAAK,MACLC,MAAO,IACPC,KAAM,SATO,EAeRE,GAAavC,GAASwC,UAKtBC,GAAa,CACtB,SACA,YACA,cACA,cACA,OACA,SACA,SACA,eACA,eACA,WACA,eACA,iBACA,gBACA,aACA,wBACA,0BACA,iBACA,aACA,cACA,gBACA,aAMSC,EAAUC,OAEhBF,QACH,WACA,aACA,WACA,iBACA,oBACA,wBACA,0BACA,kCCnKYG,GAAYC,EAAiBC,GACnCC,EAAc3D,KAAK4D,KAAKH,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,EAAjD,EAEpB,OAAOzD,KAAK6D,IAAIF,EAAcD,CAAvB,CACV,UAaeG,EAAIC,GAChB,OAAO9D,KAAK6D,IAAIC,CAAT,CACV,UAwBeC,GAAgBC,EAA6BC,GACzD,OAAgB,MAATD,EAAgBA,EAAQC,CAClC,UAIeC,GACZC,EACAC,EACAC,GAOa,SAAPC,IACF,IAAMC,EAAMC,KAAKD,MACbE,EAAIF,EAAMG,EAKRC,EAAQC,GAFVH,EADAI,EAAWJ,EACPI,EAEaJ,GAAII,CAAL,EACdC,EAAYF,GAAQG,EAAWL,GAAaG,CAA1B,EAExBE,EAAWR,EAEXJ,EAASQ,EAAQG,CAAT,EAECD,GAALJ,GAGJL,EAAcE,CAAD,EAtBjB,IAAMO,EAAWR,EAAQQ,SACnBD,EAASP,EAAQO,QAAW,SAAC7E,GAAc,OAAA,EAAIC,KAAKC,IAAI,EAAIF,EAAG,CAAhB,GAC/C2E,EAAYF,KAAKD,MACnBQ,EAAWL,EAqBfN,EAAcE,CAAD,CAChB,CCzFD,ICNWlE,kBDgBP,WACY4E,EACRC,GAFJ,IAMQC,IAFJC,WAAA,QACMC,GAJEC,OAAAL,EAVLK,WAAoB,CAAA,EAInBA,MAAc,EACdA,OAAe,EACfA,aAAqB,EACrBA,eAAe,CAAA,EAgGfA,UAAU,SAACC,GACf,IAAMC,EAAQF,EAAKD,aAAeE,EAAEE,OAASF,EAAEG,OAE3CF,GACAD,EAAEI,iBAENL,EAAKM,QAAQ,SAAU,CACnBJ,QADJ,GA/F8B,eAATP,GAEjBY,EAA0BX,SAEzBA,EAODC,EAAeD,EAAUY,cAAc,WAAIlF,EAAJ,CAAxB,GANfiF,EAAaE,SAASC,cAAc,KAAvB,EACbb,EAAeY,SAASC,cAAc,KAAvB,EAEfH,EAAWI,aAAad,EAAc,IAAtC,EACAG,EAAKY,SAAW,CAAA,GAIpBC,EACIN,EACAR,EAAe3E,GACTC,EAHF,EAKRwF,EAASN,EAAYpF,EAAb,EACR0F,EAAShB,EAAcvE,EAAf,EAER0E,EAAKH,aAAeA,EACpBG,EAAKO,WAAaA,EAClBP,EAAKD,aAAeA,EACpBC,EAAKc,MAAQ,IAAIC,EAAMR,EAAY,CAC/BX,UAAWoB,OADF,EAEVC,GAAG,YAAa,SAAAhB,GACf,IAAMiB,EAASjB,EAAEkB,WAAWD,OACtBE,EAAQnB,EAAEmB,MACVC,EAAUrB,EAAKH,eAAiBqB,EAEjCG,GACDC,WAAW,WACPC,sBAAsB,WAClB,IAAMC,EAAYxB,EAAKH,aAAa4B,wBAC9BC,EAAOF,EAAUzB,EAAe,OAAS,OAEzC4B,EAAOD,EADKF,EAAUzB,EAAe,QAAU,UAE/C6B,EAAY3B,EAAEF,EAAe,UAAY,WAE3C2B,GAAQE,GAAaA,GAAaD,IAIhCzB,GADAtC,EAAOoC,EAAKpC,MACGA,EAAOoC,EAAK6B,WAEjC7B,EAAK8B,SAASJ,EAAOE,EAAY1B,EAAQ,CAACA,CAA1C,GAbiB,GAetB,GAhBO,EAmBdkB,EAAMC,QAAUA,EAChBpB,EAAEkB,WAAWY,kBACb9B,EAAEkB,WAAWd,iBA7BJ,EA8BVY,GAAG,OAAQ,SAAAhB,GACLA,EAAEmB,MAAMC,SAGbrB,EAAK8B,SAAS9B,EAAKD,aAAeE,EAAEE,OAASF,EAAEG,MAA/C,EAlCS,EAoCb4B,EAAShC,EAAKO,WAAY,QAASP,EAAKiC,QAAS,CAC7CC,QAAS,CAAA,EADL,IA3EuBC,yBAkHvC,OAnCWC,WAAP,SAAgBlC,GACNZ,GAAgB+C,KAAKzE,KAE3ByE,KAAK/B,QAAQ,SAAU,CACnBJ,MAAOmC,KAAKR,WAAavC,EAD7B,GAIG8C,SAAP,SAAcE,EAAoB5E,EAAaE,EAAciE,GACzDQ,KAAK3E,IAAMA,EACX2E,KAAKzE,KAAOA,EACZyE,KAAKR,WAAaA,EAElB,IACMU,EAAuBF,KAAKtC,aAAe,CAAC,IAAK,SAAW,CAAC,IAAK,UAAjEyC,OAAUC,OAEjBJ,KAAK9B,WAAWmC,MAAMC,QAAU,mBAHhBL,GAA2B1E,EAAbiE,EAAqB,QAAU,UAG7B,EAChCQ,KAAKxC,aAAa6C,MAAMC,SACjB,UAAGF,MAAH,SAAgB7E,EAAOA,EAAOiE,OAA9B,EACD,8BAAuBW,KAAvB,SAAmC9E,EAAMmE,EAAajE,OAAtD,GAEHwE,UAAP,WACIQ,EAAYP,KAAK9B,WAAY,QAAS8B,KAAKJ,OAAhC,EACXI,KAAKvB,MAAM+B,MACXR,KAAKQ,QAtGb,EAAuCC,kBENvC,4DAAmE,OAAvBX,QAA5C,cCkEI,WACYY,EACAC,EACRhE,gBAAAA,MAHJ,MAKIc,WAAA,eAJQE,mBAAA+C,EACA/C,kBAAAgD,EAxBJhD,UAAkB,EAClBA,UAAkB,EAClBA,iBAAyB,EACzBA,kBAA0B,EAC1BA,gBAAwB,EACxBA,iBAAyB,EACzBA,aAAqB,EACrBA,YAAoB,EACpBA,eAAe,EACfA,aAAa,EAEbA,WAAoB,CAAA,EACpBA,SAAkB,CAAA,EAClBA,aAAqB,EACrBA,YAAiF,KACjFA,iBAAgC,KAChCA,cAAiC,GACjCA,UAAU,EACVA,SAAS,EA0HVA,SAAS,WACN,IAAAuC,EAGFvC,EAAK+C,iBAFQE,gBACCC,iBAEZC,EAGFnD,EAAKgD,gBAFQI,gBACCC,iBAGlBrD,EAAKiD,eAAiBA,EACtBjD,EAAKkD,gBAAkBA,EACvBlD,EAAKoD,cAAgBA,EACrBpD,EAAKqD,eAAiBA,EAEtBrD,EAAKsD,SACLtD,EAAKuD,UAAU,EAAG,CAAlB,GAkYIvD,YAAY,WACV,IAAAuC,EAA4BvC,EAAK/D,eAA/BuH,eAAYC,cAEhBN,EACAnD,OADArE,aAAOH,EAAgBG,OAErBwE,EAASqD,EAAaxD,EAAKwD,WAC3BpD,EAASqD,EAAYzD,EAAKyD,UAC1BC,EAAmB1D,EAAK2D,gBACxBC,EAAkB5D,EAAK6D,eAEzB7D,EAAK8D,SACL9D,EAAK8D,OAAS,CAAA,GAElB9D,EAAKwD,WAAaA,EAClBxD,EAAKyD,UAAYA,EACjBzD,EAAK+D,SACDL,EAAmBvD,EAASxE,EAC5BiI,EAAkBxD,EAASzE,CAF/B,GAKIqE,UAAU,SAACC,GACf,IAAMjB,EAAUgB,EAAKhB,QACftC,EAAgBsC,EAAQtC,eAAiBb,EAAAA,EAEzCmI,EAAY/D,EAAE,UAAGD,EAAK/C,mBAAR,IAA+BgD,EAAEgE,QAErD,GAAIjF,EAAQjC,eAAiBiH,EAAW,CAE9BE,EAAiB,IAAV9D,EADAH,EAAEG,QACY,EAAI,CAAC,EAC1B+D,EAAWxJ,KAAKyJ,IAAI1H,EAAe/B,KAAK6D,IAAI4B,CAAT,CAAxB,EAIXF,EAAQ,EADdE,EAAS8D,EAAOC,GAEVE,EAAQ1J,KAAK2J,IAAI,EAAIpE,GAASlB,EAAQrC,YAAc,KLrZ9C,IKqZE,EAEd4H,aAAavE,EAAKwE,cAAN,EACZxE,EAAKwE,eAAiBxD,OAAOM,WAAW,WACpCtB,EAAKyE,UAAY,MAClB,GAFmB,EAGtBzE,EAAK0E,cAAc,CACfP,WACAE,QACAM,SAAU,EACVhJ,KAAMqE,EAAKrE,KAAO0I,EAClBlD,WAAYlB,EACZ2E,QAAS,CAAA,EACTC,QAAS5E,EAAE4E,QACXC,QAAS7E,EAAE6E,QACXC,OAAQ,EACRC,OAAQ,EAVZ,MAYG,CAAA,GAAIhG,CAAAA,EAAQ9B,eAYf,OAXA,IAAMvB,EAAOqE,EAAKrE,KAEdwE,EAASF,EAAEE,OACXC,EAASH,EAAEG,OAEXH,EAAEgF,UAAY,CAAC9E,IACfA,EAASC,EACTA,EAAS,GAEbJ,EAAK8B,SAAS3B,EAASxE,EAAMyE,EAASzE,CAAtC,EAIJsE,EAAEI,kBAEEL,iBAAiB,SAACC,GACtBD,EAAKkF,WAAalF,EAAKrE,KACvBqE,EAAKmF,iBACLlF,EAAEI,kBAEEL,kBAAkB,SAACC,GAEvB,IAIMoE,EALNpE,EAAEI,iBACEL,EAAKc,MAAMsE,UAAY,CAACpF,EAAKkF,WAC7BlF,EAAKkF,WAAa,GAGhBb,EAAQpE,EAAEoE,MAEhBrE,EAAK0E,cAAc,CACfP,SAAU,EACVE,QACAM,SAAU1E,EAAE0E,SACZxD,WAAYlB,EACZ2E,QAAS,CAAA,EACTjJ,KAAMqE,EAAKkF,WAAab,EACxBQ,QAAS5E,EAAE4E,QACXC,QAAS7E,EAAE6E,QACXC,OAAQ,EACRC,OAAQ,EAVZ,IAaIhF,eAAe,aAhmBnBA,EAAKhB,eACExD,GACAwD,GAEPgB,EAAKqF,SAxCgBlD,6BAm9B7B,OAt6BWC,eAAP,WACI,OAAOC,KAAKU,kBAKTX,cAAP,WACI,OAAOC,KAAKW,iBAKTZ,aAAP,WACI,OAAOC,KAAKpG,gBAKTmG,eAAP,WACI,OAAOC,KAAKnG,mBAKTkG,UAAP,WACIC,KAAKQ,MACLR,KAAKvB,MAAMwE,QACXjD,KAAKkD,kBAAkBC,UACvBnD,KAAKoD,oBAAoBD,UACzBnD,KAAKqD,aAAaF,UAClB,IAAMzC,EAAmBV,KAAKU,iBAE9BV,KAAKsD,YAAYC,QAAQ,SAAA9G,GACrBA,IADJ,EAGA8D,EAAYP,KAAKpG,eAAgB,SAAUoG,KAAKwD,SAArC,EACXjD,EAAYG,EAAkB,QAASV,KAAKJ,OAAjC,EACXW,EAAYG,EAAkB,eAAgBV,KAAKyD,cAAxC,EACXlD,EAAYG,EAAkB,gBAAiBV,KAAK0D,eAAzC,EACXnD,EAAYG,EAAkB,cAAeV,KAAK2D,YAAvC,EAEX3D,KAAKvB,MAAQ,KACbuB,KAAKqD,aAAe,KACpBrD,KAAKU,iBAAmB,KACxBV,KAAKW,gBAAkB,KACvBX,KAAKrD,QAAU,MAMZoD,eAAP,SAAoB6D,GAChB,OAAO5D,KAAKoB,UAAYpB,KAAK1G,KAAO0G,KAAK6D,SAClCD,EAAazH,EAAI6D,KAAK8D,YAAY,EAAlB,EAAwB,IAM5C/D,gBAAP,SAAqB6D,GACjB,OAAO5D,KAAKmB,WAAanB,KAAK1G,KAAO0G,KAAK+D,SACnCH,EAAazH,EAAI6D,KAAKgE,YAAY,EAAlB,EAAwB,IAK5CjE,iBAAP,SAAsBkE,GACZC,EAAQlE,KAAKgE,UAAUC,CAAf,EAEd,OAAOjE,KAAKY,eAAiBzE,EAAI+H,EAAM,EAAP,EAAa/H,EAAI+H,EAAM,EAAP,GAK7CnE,kBAAP,SAAuBkE,GACbC,EAAQlE,KAAK8D,UAAUG,CAAf,EAEd,OAAOjE,KAAKa,gBAAkB1E,EAAI+H,EAAM,EAAP,EAAa/H,EAAI+H,EAAM,EAAP,GAM9CnE,eAAP,SAAoBpD,GAChBqD,KAAKmE,SAEL,IAAM7K,EAAO0G,KAAK1G,KAEd8K,EAAO,EAAEpE,KAAKY,eAAiBtH,EAAO0G,KAAKe,eAAiB,EAC5DsD,EAAM,EAAErE,KAAKa,gBAAkBvH,EAAO0G,KAAKgB,gBAAkB,EAQjE,OANIrE,MAAAA,GAAAA,EAAS2H,WACTF,GAAQ9K,EACR+K,GAAO/K,GAIJ0G,KAAK0B,SAAS0C,EAAMC,EAAK1H,CAAzB,GA2BJoD,WAAP,SAAgBjC,EAAgBC,EAAgBpB,GAE5C,IACQwE,EACAC,EAFR,OADApB,KAAKuE,wBACA5H,GAAYA,EAAQQ,UAUrB6C,KAAKwE,sBAAsB,CAAC1G,EAAQC,GAASpB,CAA7C,EACO,CAAA,IAVHwE,EAAanB,KAAKsB,gBAClBF,EAAYpB,KAAKwB,eAEjB7E,MAAAA,GAAAA,EAAS2H,WACTnD,GAAcnB,KAAK1G,KACnB8H,GAAapB,KAAK1G,MAEf0G,KAAKyE,UAAUtD,EAAarD,EAAQsD,EAAYrD,EAAQpB,CAAxD,IAWRoD,WAAP,SAAgB1H,EAAWqM,EAAW/H,GAElC,IAGQwE,EACAC,EAJR,OADApB,KAAKuE,wBACA5H,GAAYA,EAAQQ,UAGjBgE,EAAanB,KAAKsB,gBAClBF,EAAYpB,KAAKwB,eAEjB7E,MAAAA,GAAAA,EAAS2H,WACTnD,GAAcnB,KAAK1G,KACnB8H,GAAapB,KAAK1G,MAEf0G,KAAKP,SAASpH,EAAI8I,EAAYuD,EAAItD,EAAWzE,CAA7C,GATAqD,KAAKyE,UAAUpM,EAAGqM,EAAG/H,CAArB,GAeRoD,SAAP,SAAc4E,EAAmBhI,GAC7BqD,KAAK4E,sBAEAjI,GAAYA,EAAQQ,SAGrB6C,KAAK6E,oBAAoBF,EAAWhI,CAApC,EAFAqD,KAAK8E,SAAS9E,KAAK1G,KAAOqL,CAA1B,GAQD5E,UAAP,SAAezG,EAAcqD,GACzBqD,KAAK4E,sBAEAjI,GAAYA,EAAQQ,SAGrB6C,KAAK6E,oBAAoBvL,EAAO0G,KAAK1G,KAAMqD,CAA3C,EAFAqD,KAAK8E,SAASxL,CAAd,GAQDyG,YAAP,SAAiBkE,EAAkBc,GAC/B,OAAO/E,KAAKgF,eAAe,aAAcf,EAAQc,CAA1C,GAKJhF,YAAP,SAAiBkE,EAAkBc,GAC/B,OAAO/E,KAAKgF,eAAe,WAAYf,EAAQc,CAAxC,GAGHhF,OAAR,WAAA,IA0NckF,SAtNJvE,EAAmBV,KAAKU,iBACxB/D,EAAUqD,KAAKrD,QAGjB/C,EAAiB+C,EAAQ/C,gBACtB8G,EAAiBvC,cAAc,WAAIvF,EAAJ,CAA/B,EACHiB,EAAoB8C,EAAQ9C,mBACzB6G,EAAiBvC,cAAc,WAAItF,EAAJ,CAA/B,EACDiB,EAA0B6C,EAAQ7C,yBACjC4G,EAAiBvC,cAAc,WAAIpF,EAAJ,CAA/B,EACDgB,EAAwB4C,EAAQ5C,uBAC/B2G,EAAiBvC,cAAc,WAAInF,EAAJ,CAA/B,EAEHY,KAGAA,EAAiBwE,SAASC,cAAc,KAAvB,GACFC,aAAa0B,KAAKW,gBAAiB,IAAlD,EACAD,EAAiBpC,aAAa1E,EAAgB,IAA9C,GAEAoG,KAAKpG,eAAiBA,EAGtBC,IAGAA,EAAoBuE,SAASC,cAAc,KAAvB,EAEpBzE,EAAe0E,aAAazE,EAAmBD,EAAesL,UAA9D,GAEAlF,KAAKnG,kBAAoBA,EAE7B2E,EAASkC,EAAkBjF,EAAnB,EACR+C,EAAS5E,EAAgBhB,EAAjB,EACR4F,EAAS3E,EAAmBhB,EAApB,EAERmH,KAAKoD,oBAAsB,IAAI+B,GAAU,aAAcrL,CAA5B,EAC3BkG,KAAKkD,kBAAoB,IAAIiC,GAAU,WAAYpL,CAA1B,EAEzBiG,KAAKoD,oBAAoBxE,GAAG,SAAU,SAAAhB,GAClCD,EAAK8B,SAAS7B,EAAEC,MAAQF,EAAKrE,KAAM,CAAnC,EADJ,EAIA0G,KAAKkD,kBAAkBtE,GAAG,SAAU,SAAAhB,GAChCD,EAAK8B,SAAS,EAAG7B,EAAEC,MAAQF,EAAKrE,IAAhC,EADJ,EAII0G,KAAKoD,oBAAoB7E,UACzBmC,EAAiBpC,aAAa0B,KAAKoD,oBAAoBlF,WAAY,IAAnE,EAEA8B,KAAKkD,kBAAkB3E,UACvBmC,EAAiBpC,aAAa0B,KAAKkD,kBAAkBhF,WAAY,IAAjE,EAEJ8B,KAAKqD,aAAenK,GAASkM,OAAO1E,EAAkB,CAClD2E,MAAOrF,KAAKrD,QAAQvC,SADJ,EAqFpB4F,KAAKvB,MAAQ,IAAIC,EAAMgC,EAAkB,CACrCnD,UAAWa,SAASkH,KACpBC,OAAQ,CAAC,QAAS,SAFT,EAGV3G,GAAG,YAAa,SAACsB,OAAEpB,eAAYC,UAAOyG,SAAMC,iBACvC,CAAC9H,EAAKzD,cAAgBuL,IAI1B9H,EAAK4G,yBACL5G,EAAK+H,SAAW,CAAA,KACD/H,EAAKM,QAAQ,YAAa,CACrCa,aADW,GAIX0G,KAIJ1G,EAAWd,iBAEXe,EAAM4G,WAAa7G,GApBV,EAqBVF,GAAG,OAAQ,SAAAhB,GACV,IJxbiBA,EAUnBgI,EATE9H,EAAQC,EACV8H,EACAC,EIqbM,CAACnI,EAAKhB,QAAQ3C,UAAY4D,EAAEmI,SAAYpI,EAAKzD,cAAgB0D,EAAE6H,cAC/D9H,EAAKM,QAAQ,cACNL,IACHkB,WAAYlB,EAAEkB,YAFlB,EJxbJhB,GADiBF,EI6bAA,UJ5bTG,EAAkBH,SAAVmB,EAAUnB,QAC5BiI,EAAO/I,KAAKD,OACZiJ,EAAY/G,EAAMhD,QAOlB6J,EAAKC,EAAO9G,EAAM8G,KACxB9G,EAAMhD,MAAQ,CAAC+J,EAAU,GAAK,EAAIhI,EAAS8H,EAAIE,EAAU,GAAK,EAAI/H,EAAS6H,KALvE7G,EAAMhD,MAAQ,CAAC,EAAG,GAClBgD,EAAM8G,KAAOA,GIubCvM,EAAOqE,EAAKrE,KAClBqE,EAAK8B,SAAS,CAAC7B,EAAEE,OAASxE,EAAM,CAACsE,EAAEG,OAASzE,CAA5C,GACO,CAACqE,EAAK+H,UAAY9H,EAAEoI,SAAWrJ,EAAQxC,iBAC9CwD,EAAK+H,SAAW,CAAA,EAEhB/H,EAAKM,QAAQ,aAAc,CACvBa,WAAYlB,EAAEmB,MAAM4G,YAAc/H,EAAEkB,WADxC,GAjCK,EAqCVF,GAAG,UAAW,SAAAhB,GACbD,EAAKM,QAAQ,UAAW,CACpBgI,OAAQrI,EAAEqI,OACVC,SAAUtI,EAAEsI,SACZpH,WAAYlB,EAAEkB,WAHlB,EAKAnB,EAAKwI,6BAA6BvI,EAAEmB,MAAMhD,KAA1C,EA3CS,EA4CV6C,GAAG,aAAc,SAACsB,OAAEpB,eAAYC,UAAOyG,SACtC1G,EAAWd,iBACXL,EAAK4G,wBACLxF,EAAMqH,UAAYzI,EAAKrE,KAKR,CAAA,IAHAqE,EAAKM,QAAQ,aAAc,CACtCa,aADW,GAIX0G,IAEJ7H,EAAKmF,iBAvDI,EAwDVlE,GAAG,QAAS,SAAAhB,GACXD,EAAK0E,cAAc,CACfC,SAAU1E,EAAE0E,SACZR,SAAUlE,EAAEkE,SACZE,MAAOpE,EAAEoE,MACTlD,WAAYlB,EAAEkB,WACdyD,QAAS,CAAA,EACTjJ,KAAMsE,EAAEmB,MAAMqH,UAAYxI,EAAEoE,MAC5BQ,QAAS5E,EAAE4E,QACXC,QAAS7E,EAAE6E,QACXC,OAAQ,EACRC,OAAQ,EAVZ,EAzDS,EAqEV/D,GAAG,WAAY,WACdjB,EAAKyE,UAAY,KAtER,EAyEbzC,EAAS/F,EAAgB,SAAUoG,KAAKwD,SAAhC,EAEJ7G,EAAQzB,oBACF+J,EAAW,IAAIoB,eAAe,WAChC1I,EAAKwG,SADQ,GAIRmC,QAAQtG,KAAKW,eAAtB,EACAsE,EAASqB,QAAQtG,KAAKU,gBAAtB,EAGAV,KAAKsD,YAAYiD,KAAK,WAClBtB,EAASuB,aADb,IAIA7G,EAAShB,OAAQ,SAAUqB,KAAKmE,MAAxB,EAERnE,KAAKsD,YAAYiD,KAAK,WAClBhG,EAAY5B,OAAQ,SAAUhB,EAAKwG,MAAxB,EADf,IAKAxH,EAAQjC,eAAiBiC,EAAQ9B,iBACjC8E,EAASe,EAAkB,QAASV,KAAKJ,QAAS,CAC9CC,QAAS,CAAA,EADL,EAIRlD,EAAQ1B,aACR0E,EAASe,EAAkB,eAAgBV,KAAKyD,eAAgB,CAC5D5D,QAAS,CAAA,EADL,EAGRF,EAASe,EAAkB,gBAAiBV,KAAK0D,gBAAiB,CAC9D7D,QAAS,CAAA,EADL,GAIZG,KAAKmE,UAEDpE,SAAR,WACU,IACFgE,EAIA/D,aAHA6D,EAGA7D,aAFAc,EAEAd,UAFA1G,aAAOH,EAAgBG,OACvBmN,EACAzG,gBADAhF,aAAa,IAGb0L,EACA1G,KAAKrD,qBADLlC,aAAetB,EAAgBsB,eAE7BkM,EAAc,CAAC5C,EAAUzK,EACzBsN,EAAc,CAAC/C,EAAUvK,EAMzBuN,GAJN7G,KAAKnG,kBAAkBwG,MAAMC,QACvB,4BAAqBN,KAAK8G,2BAA1B,EACA,6BAAsB9G,KAAK+G,4BAA3B,EAEgB/G,KAAKW,gBAAgBN,OAGvCwG,EAAcvG,SADG,CAAA,IAAjB7F,EACyB,mCAA4BmM,cAA5B,SAAoDD,OAApD,EAEA,sDAA+CA,QAA/C,SAAiEC,QAAjE,SAAmF5L,cAAnF,SAA0G1B,MAA1G,EAE7B0G,KAAKgH,gBAEDjH,eAAR,WACU,IACFa,EAGAZ,oBAFAa,EAEAb,qBADA1G,EACA0G,UACEmB,EAAanB,KAAKsB,cAAc,CAAA,CAAnB,EAA2BhI,EACxC8H,EAAYpB,KAAKwB,aAAa,CAAA,CAAlB,EAA0BlI,EACtC2N,EAAcjH,KAAKkH,eAAe,CAAA,CAApB,EACdC,EAAenH,KAAKoH,gBAAgB,CAAA,CAArB,EAErBpH,KAAKoD,oBAAoBnC,OACrBjB,KAAKzF,wBACL4G,EACAP,EACAqG,CAJJ,EAMAjH,KAAKkD,kBAAkBjC,OACnBjB,KAAKxF,sBACL4G,EACAP,EACAsG,CAJJ,GAOIpH,OAAR,SAAaoB,EAAoBC,GAC7B,IAAMxH,EAAiBoG,KAAKpG,eAE5BA,EAAeuH,WAAaA,EAC5BvH,EAAewH,UAAYA,GAmGvBrB,sBAAR,SAA4BsH,EAAc1K,GAA1C,IAIUQ,SAHDkK,IAGClK,EAAWR,EAAQQ,SAGzBX,GACI,SAAA8K,GAAa3J,EAAKmH,SACdnH,EAAKrE,KAAO+N,EAAOC,EACnB3K,EAAQ4K,QAFC,GAIb,SAAA3K,GACIe,EAAK6J,WAAatI,sBAAsBtC,CAAD,GAE3C,CACIM,OAXOP,EAAQO,QAAU9E,GAYzB+E,WAVM,IAcV4C,wBAAR,SAA8BsH,EAAgB1K,GAA9C,IAKUQ,UAJDkK,EAAK,IAAOA,EAAK,MAGtBI,QAAQC,IAAI,OAAQL,EAAM1K,CAA1B,EACMQ,EAAWR,EAAQQ,SAGzBX,GACI,SAAA8K,GAAa3J,EAAKuD,UACdmG,EAAK,GAAKC,EACVD,EAAK,GAAKC,EACV3K,CAHS,GAKb,SAAAC,GACIe,EAAKgK,aAAezI,sBAAsBtC,CAAD,GAE7C,CACIM,OAZOP,EAAQO,QAAU9E,GAazB+E,WAXM,IAeV4C,+BAAR,SAAqChE,GACjC,IAIMoB,EJvsB8BnB,EImsBpC,GAAKD,IAAWA,EAAM,IAAOA,EAAM,IAOnC,OAHMoB,EAAWrB,GAAYC,EADnB,CAAC,IACiB,EJtsB1BoB,EAAWrB,GADMC,EIwsBQA,EJxsBSC,EIssB1B,CAAA,IJrsBc,EIusBlB4L,EJrsBH,CACH,CAAC7L,EAAM,GAAK,EAAIoB,EAChB,CAACpB,EAAM,GAAK,EAAIoB,GIqsBT6C,KAAKwE,sBAAsBoD,EAAS,CACvCzK,WADG,GAKH4C,wBAAR,WACI8H,qBAAqB7H,KAAK2H,YAAN,EACpB3H,KAAK2H,aAAe,GAEhB5H,sBAAR,WACI8H,qBAAqB7H,KAAKwH,UAAN,EACpBxH,KAAKwH,WAAa,GAEdzH,qBAAR,WACU,IAAAG,EAAaF,KAAKgE,UAAU,CAAA,CAAf,EAAZjC,OAAKE,OACZ,OAAOF,GAAOE,EAAoB,EAAdjC,KAAK5G,OAAa,GAElC2G,sBAAR,WACU,IAAAG,EAAaF,KAAK8D,UAAU,CAAA,CAAf,EAAZ/B,OAAKE,OACZ,OAAOF,GAAOE,EAAoB,EAAdjC,KAAK5G,OAAa,GAElC2G,gBAAR,SAAsB+H,GAEd,IAAAtF,EAGAsF,UAFArF,EAEAqF,UADAxO,EACAwO,OAOEnN,GANFqF,KAAK/F,aACL+F,KAAK+H,cAAcD,EAAMxO,KAAMkJ,EAASC,CAAxC,EAECzC,KAAKoC,WACNpC,KAAK8C,iBAES9C,KAAKrF,WACjBuF,EAKFF,KAAKoC,UAJLgC,SACAC,QAIE3B,GAAUF,EAAU4B,WAAgB,IACpCzB,GAAUF,EAAU4B,YAAgB,IAE1CrE,KAAK/B,QAAQ,eACN6J,IACHxO,KAAM0O,EAAQ1O,EAAMqB,EAAU,GAAIA,EAAU,EAA/B,EACb+H,SACAC,UAJJ,GAOI5C,iBAAR,WACI,IAAMkI,EAAOjI,KAAKkI,eAAe9I,wBACjCY,KAAKoC,UAAY,CACbgC,KAAM6D,EAAK7D,KACXC,IAAK4D,EAAK5D,IACV8D,MAAOF,EAAKE,MACZC,OAAQH,EAAKG,SAGbrI,gBAAR,SAAsBzG,EAAckJ,EAAiBC,GAC5CzC,KAAKoC,WACNpC,KAAK8C,iBAEH,IAAA5C,EAKFF,KAAKoC,UAJLgC,SACAC,QACA8D,UACAC,WAEEzL,EAAUqD,KAAKrD,QAEf0L,EAAsB1L,EAAQ7B,YAC9BwN,EAAsB3L,EAAQ5B,YAEpC4B,EAAQ7B,YAAc,WAAI0H,EAAU4B,GAAQ+D,EAAQ,OAA9B,EACtBxL,EAAQ5B,YAAc,WAAI0H,EAAU4B,GAAO+D,EAAS,OAA9B,EAEtBpI,KAAK8E,SAASxL,EAAM,QAApB,EAEAqD,EAAQ7B,YAAcuN,EACtB1L,EAAQ5B,YAAcuN,GAElBvI,WAAR,SACIzG,EACAiO,GAEM,IACF3G,EAIAZ,oBAHAa,EAGAb,qBAFMuI,EAENvI,UADArF,EACAqF,eAEAyG,EAEAzG,iBAFAlF,aAAc3B,EAAgB2B,cAC9B4L,EACA1G,iBADAjF,aAAc5B,EAAgB4B,cAI5BoG,EAAanB,KAAKsB,gBAClBF,EAAYpB,KAAKwB,eACjBgH,EAAWR,EAAQ1O,EAAMqB,EAAU,GAAIA,EAAU,EAA/B,EAIlB8N,GAFNzI,KAAKrD,QAAQrD,KAAOkP,EAEGxI,KAAKsB,iBACtBoH,EAAgB1I,KAAKwB,eAEvBmH,EAAQ,EACRC,EAAQ,EAIRA,EAFa,aAAbrB,GACAoB,GAAS,CAACxH,EAAa0H,EAAgB,UAAG/N,CAAH,EAAkBkF,KAAKe,aAAxB,GAA0CwH,GACvE,CAACnH,EAAYyH,EAAgB,UAAG9N,CAAH,EAAkBiF,KAAKgB,cAAxB,GAA2CuH,IAEhFI,EAAQE,EAAgB,UAAG/N,CAAH,EAAkB8F,CAAnB,EACfiI,EAAgB,UAAG9N,CAAH,EAAkB8F,CAAnB,GAS3Bb,KAAKkB,UANWC,EAAawH,EAAQJ,GAGjBE,EAAiBE,EAAQH,GAF7BpH,EAAYwH,EAAQL,GAGhBG,EAAgBE,EAAQJ,EAE5C,EACAxI,KAAKiB,UAEDlB,YAAR,SAAkBjC,EAAgBC,EAAgBpB,GAC9C,IAAIwE,EAAanB,KAAKsB,gBAClBF,EAAYpB,KAAKwB,eAMrB,OAJI7E,MAAAA,GAAAA,EAAS2H,WACTnD,GAAcnB,KAAK1G,KACnB8H,GAAapB,KAAK1G,MAEf0G,KAAKyE,UAAUtD,EAAarD,EAAQsD,EAAYrD,EAAQpB,CAAxD,GAEHoD,YAAR,SAAkB1H,EAAWqM,EAAW/H,GAAxC,WAEoBmM,EAEZ9I,gBADW+I,EACX/I,eAEE4D,EAAajH,MAAAA,SAAAA,EAAS2H,SAItBnD,GAHNnB,KAAKgJ,cAAc,aAAc3Q,EAAGuL,CAApC,EACA5D,KAAKgJ,cAAc,WAAYtE,EAAGd,CAAlC,EAEmB5D,KAAKmB,YAClBC,EAAYpB,KAAKoB,UAEjB6H,GADNjJ,KAAKiB,SAC0BjB,KAAKsB,iBAC9B4H,EAAwBlJ,KAAKwB,eAInC,OAFAxB,KAAKmJ,iBAAiBF,EAAwBC,CAA9C,EAEI5Q,KAAK8Q,MAAMN,CAAX,IAA+B3H,GAAc7I,KAAK8Q,MAAML,CAAX,IAA8B3H,IAC3EpB,KAAKyB,OAAS,CAAA,EACdzB,KAAKqJ,KAAKlI,EAAYC,CAAtB,EACAlC,sBAAsB,WAClB,IAKgBoK,EACDC,EANV5L,EAAK8D,SAGV9D,EAAK8D,OAAS,CAAA,EAEE6H,GADVpJ,EAGFvC,EAAK/D,2BADM2P,cAGf5L,EAAKwD,WAAamI,EAClB3L,EAAKyD,UAAYmI,EAGbpI,IAAe7I,KAAK8Q,MAAME,CAAX,GACZlI,IAAc9I,KAAK8Q,MAAMG,CAAX,GAEjB5L,EAAK8G,UAAUwE,EAAwBC,CAAvC,GAjBa,EAoBd,CAAA,IAIPnJ,gBAAR,SAAsBzC,EAAiChC,EAAesI,GAClE,IAAM4F,EAAQrO,GAAMmC,GAEhBwD,EAGAd,UAHA1G,aAAOH,EAAgBG,OACvBmN,EAEAzG,YAFA5G,aAASD,EAAgBC,SACzBsN,EACA1G,eADA3G,aAAYF,EAAgBE,YAE1BoQ,EAAgBzJ,KAAK,gBAASwJ,EAAMnO,GAAf,GACrBqO,EAAuB1J,KAAK,kBAAWwJ,EAAMlO,KAAjB,GAA0B,CAAA,EAAM,CAAA,CAArC,EAAtBqO,OAAUC,OAEbC,EAAYvR,KAAK8Q,MAAMK,CAAX,EAEVK,EAAiB9J,KAAK,uBAAgBwJ,EAAMjO,IAAtB,KAKtBwO,GAHFnG,IACAtI,GAAgBhC,GAEFgC,EAAQhC,GAEtBqQ,IAAaC,EAEbtO,GADAuO,EAAYF,GACOrQ,EACZyQ,EAAY1Q,GAAasQ,EAIhCrO,GAASqO,GADTE,EAFqBvR,KAAK2J,IAAI,EAAG8H,EAAYJ,CAAxB,IAGerQ,EACJsQ,GAAzBG,EAAY1Q,GAGnBwQ,EAAYC,GAFNE,EAAe1R,KAAK2J,IAAI,EAAG2H,EAAWG,CAAvB,GAGrBzO,GAASsO,EAAWI,GAAgB1Q,GAC7BuQ,EAAYxQ,EACnBwQ,GAAazQ,EACM0Q,EAAiBzQ,EAA7BwQ,IACPA,GAAazQ,GAGjByQ,EAAYvR,KAAK8Q,MAAMS,CAAX,EAEZ7J,KAAK,gBAASwJ,EAAMnO,GAAf,GAAwBwO,EAC7B7J,KAAK,gBAASwJ,EAAMlO,KAAf,GAA0BA,EAAQuO,EAAYvQ,GAE/CyG,iBAAR,SAAuBzC,EAAiC2G,EAAkBc,GAChE,IJ35BV1J,EI45BQyF,EAGAd,YAHA5G,aAASD,EAAgBC,SACzBqN,EAEAzG,UAFA1G,aAAOH,EAAgBG,OACvBD,EACA2G,eACEwJ,EAAQrO,GAAMmC,GACd2M,EAAa5N,GAAa2D,KAAK,eAAQwJ,EAAMlO,KAAd,GAAwBnC,EAAgB,eAAQqQ,EAAMlO,KAAd,EAA9C,EACzB4O,EAAmB7N,GAAa2D,KAAK,qBAAcwJ,EAAMlO,KAApB,GAA8BnC,EAAgB,qBAAcqQ,EAAMlO,KAApB,EAApD,EAC/B4I,GJn6BV7I,EIo6BQ2E,KAAK,mBAAYwJ,EAAMnO,GAAlB,KJn6BbjC,EIo6BQA,EJn6BR8K,EIo6BQ+F,EJn6BR5Q,EIo6BQA,EJ15BD,EATP0L,EIo6BQA,IJl6BcoF,SAASjG,EAAM,EAAP,EACxBA,EAAM,GACN5L,KAAKyJ,IAAI,CAAC,EAAGzJ,KAAK8R,MAAM/O,EAAMjC,CAAjB,CAAb,EAAyCA,EAASC,EAC5C0L,GAAUoF,SAASjG,EAAM,EAAP,EACxBA,EAAM,GACN5L,KAAK2J,IAAI,EAAG3J,KAAK+R,KAAKhP,EAAMjC,CAAhB,CAAZ,EAAuCA,EAASC,IIg6BlD,OAAK4K,EAGE,CACHC,EAAM,GAAK5K,EAAO4Q,EAAiB,GACnC5R,KAAK2J,IAAIjC,KAAK,kBAAWwJ,EAAMjO,IAAjB,GAA2BjC,EAAO0G,KAAK,mBAAYwJ,EAAMjO,IAAlB,GAA2B2I,EAAM,GAAK5K,EAAO4Q,EAAiB,EAAnH,GAJO,CAAChG,EAAM,GAAKgG,EAAiB,GAAIhG,EAAM,GAAKgG,EAAiB,KAOpEnK,mBAAR,SAAyBoB,EAAoBC,GACzC,IAAM0H,EAAiB9I,KAAKsK,QACtBvB,EAAgB/I,KAAKuK,OAEvBzB,IAAmB3H,GAAc4H,IAAkB3H,IAGvDpB,KAAKsK,QAAUnJ,EACfnB,KAAKuK,OAASnJ,EAiBdpB,KAAK/B,QAAQ,SAAU,CACnBkD,aACAC,YAFJ,4UAr+BIzF,KAAmB,SAAC6O,EAAWC,GACvC,IAAMC,EAA2B,CAC7BC,WAAY,CAAA,EACZC,aAAc,CAAA,EACdC,eACI,OAAO7K,KAAKrD,QAAQ8N,KAGtBK,EAAkB,cAAOL,CAAP,kEACpBD,EAAUM,GACVJ,EAAWK,IAAM,SAAUzO,GACvB0D,KAAK8K,GAAQxO,CAAb,GAGJoO,EAAWK,IAAM,SAAUzO,GACvB0D,KAAKrD,QAAQ8N,GAAYnO,GAGjC0O,OAAOC,eAAeT,EAAWC,EAAUC,CAA3C,mEAKEQ,EAm9BL,EAn9B4BzK,iELqJP,CAClB,SACA,aACA,YACA,UACA,aACA,iBAMmB,CACnB,gBACA,eACA,iBACA,kBACA,WACA,WACA,SACA,eACA,eACA,cACA,aACA,UACA,YACA,YACA,yBGpNJ,IAAW/H,MAAQyS,GACdD,GAAuBxS,IAAQyS,GAAQzS"}