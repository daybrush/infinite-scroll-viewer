{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/InfiniteViewer.tsx","../src/InfiniteViewerManager.tsx","../src/index.umd.ts"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: 100%;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: 100%;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n    border-radius: 5px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n    border-radius: 5px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    rangeOffsetX: [0, 0],\n    rangeOffsetY: [0, 0],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    useAutoZoom: false,\n    useMouseDrag: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: Infinity,\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useTransform: true,\n    useWheelPinch: true,\n    zoomRange: [0.001, Infinity],\n    wheelPinchKey: \"ctrl\" as const,\n    useWheelScroll: IS_SAFARI,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: true,\n    useResizeObserver: false,\n};\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"useWheelScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"useWheel\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        speed[0] / 2 * duration,\n        speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n","import Gesto from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\n\nexport default class ScrollBar extends EventEmitter {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    public barElement!: HTMLElement;\n    private gesto!: Gesto;\n    private pos: number = 0;\n    private size: number = 0;\n    private scrollSize: number = 0;\n    private isHorizontal = false;\n\n    constructor(\n        private type: \"horizontal\" | \"vertical\",\n        container?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n        let thumbElement: HTMLElement;\n        let barElement: HTMLElement = container;\n\n        if (!container) {\n            barElement = document.createElement(\"div\");\n            thumbElement = document.createElement(\"div\");\n\n            barElement.insertBefore(thumbElement, null);\n            this.isAppend = true;\n        } else {\n            thumbElement = container.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        addClass(\n            barElement,\n            isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                : VERTICAL_SCROLL_BAR_CLASS_NAME,\n        );\n        addClass(barElement, SCROLL_BAR_CLASS_NAME);\n        addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n        this.thumbElement = thumbElement;\n        this.barElement = barElement;\n        this.isHorizontal = isHorizontal;\n        this.gesto = new Gesto(barElement, {\n            container: window,\n        }).on(\"dragStart\", e => {\n            const target = e.inputEvent.target;\n            const datas = e.datas;\n            const isThumb = this.thumbElement === target;\n\n            if (!isThumb) {\n                setTimeout(() => {\n                    requestAnimationFrame(() => {\n                        const thumbRect = this.thumbElement.getBoundingClientRect();\n                        const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                        const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                        const pos2 = pos1 + thumbSize;\n                        const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                        if (pos1 <= clientPos && clientPos <= pos2) {\n                            return;\n                        }\n                        const size = this.size;\n                        const delta = size * size / this.scrollSize;\n\n                        this.scrollBy(pos1 < clientPos ? delta : -delta);\n                    });\n                }, 100);\n\n            }\n            datas.isThumb = isThumb;\n            e.inputEvent.stopPropagation();\n            e.inputEvent.preventDefault();\n        }).on(\"drag\", e => {\n            if (!e.datas.isThumb) {\n                return;\n            }\n            this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY);\n        });\n        addEvent(this.barElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: this.scrollSize * ratio,\n        });\n    }\n    public render(isDisplay: boolean, pos: number, size: number, scrollSize: number) {\n        this.pos = pos;\n        this.size = size;\n        this.scrollSize = scrollSize;\n\n        const display = isDisplay && (scrollSize > size) ? \"block\" : \"none\";\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n\n        this.barElement.style.cssText = `display: ${display};`;\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${size * size / scrollSize}px;`\n            + `transform: translate${dirName1}(${pos / scrollSize * size}px)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this.onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    private onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import InfiniteViewerManager from \"./InfiniteViewerManager\";\n\nexport default class InfiniteViewer extends InfiniteViewerManager {}\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass, convertUnitSize, between } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, OnPinch } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    IS_SAFARI, DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value, true);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private containerWidth: number = 0;\n    private containerHeight: number = 0;\n    private viewportWidth: number = 0;\n    private viewportHeight: number = 0;\n    private scrollLeft: number = 0;\n    private scrollTop: number = 0;\n    private timer: number = 0;\n    private dragFlag: boolean = false;\n    private isLoop: boolean = false;\n    private _tempScale: number = 1;\n    private _tempRect: { top: number, left: number, width: number, height: number } | null = null;\n    private _tempRectTimer: number | null = null;\n    private _onDestroys: Array<() => void> = [];\n    /**\n     * @sort 1\n     */\n    constructor(\n        private containerElement: HTMLElement,\n        private viewportElement: HTMLElement,\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...options,\n        };\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this.containerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this.viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Get Scroll Area Element\n     */\n    public geScrollArea(): HTMLElement {\n        return this.scrollAreaElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this.containerElement;\n\n        this._onDestroys.forEach(callback => {\n            callback();\n        });\n        removeEvent(this.wrapperElement, \"scroll\", this.onScroll);\n        removeEvent(containerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"gesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n        removeEvent(containerElement, \"gesturesend\", this.onGestureEnd);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this.containerElement = null;\n        this.viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute top position\n     */\n    public getScrollTop(isAbsolute?: boolean) {\n        return this.scrollTop / this.zoom + this.offsetY\n            + (isAbsolute ? abs(this.getRangeY()[0]) : 0);\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute left position\n     */\n    public getScrollLeft(isAbsolute?: boolean) {\n        return this.scrollLeft / this.zoom + this.offsetX\n            + (isAbsolute ? abs(this.getRangeX()[0]) : 0);\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this.getRangeX(isZoom);\n\n        return this.containerWidth + abs(range[0]) + abs(range[1]);\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this.getRangeY(isZoom);\n\n        return this.containerHeight + abs(range[0]) + abs(range[1]);\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter() {\n        this.resize();\n\n        const zoom = this.zoom;\n        const left = -(this.containerWidth / zoom - this.viewportWidth) / 2;\n        const top = -(this.containerHeight / zoom - this.viewportHeight) / 2;\n\n        return this.scrollTo(left, top);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this.containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n        } = this.viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n\n        this.render();\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number) {\n        return this.scrollTo(this.getScrollLeft() + deltaX, this.getScrollTop() + deltaY);\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number) {\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n\n        const [minX, maxX] = this.getRangeX(true, true);\n        const [minY, maxY] = this.getRangeY(true, true);\n\n        let scrollLeft = Math.round(prevScrollLeft);\n        let scrollTop = Math.round(prevScrollTop);\n\n        const scrollAreaWidth = this.getScrollAreaWidth();\n        const scrollAreaHeight = this.getScrollAreaHeight();\n        const zoomX = x * zoom;\n        const zoomY = y * zoom;\n\n        if (zoomX - threshold <= minX) {\n            const minThreshold = Math.max(0, zoomX - minX);\n\n            scrollLeft = minThreshold;\n            x = (minX + minThreshold) / zoom;\n        } else if (zoomX + threshold >= maxX) {\n            const maxThreshold = Math.max(0, maxX - zoomX);\n\n            scrollLeft = scrollAreaWidth - maxThreshold;\n            x = (maxX - maxThreshold) / zoom;\n        } else if (scrollLeft < threshold) {\n            scrollLeft += margin;\n        } else if (scrollLeft > scrollAreaWidth - threshold) {\n            scrollLeft -= margin;\n        }\n\n        if (zoomY - threshold <= minY) {\n            const minThreshold = Math.max(0, zoomY - minY);\n\n            scrollTop = minThreshold;\n            y = (minY + minThreshold) / zoom;\n        } else if (zoomY + threshold >= maxY) {\n            const maxThreshold = Math.max(0, maxY - zoomY);\n\n            scrollTop = scrollAreaHeight - maxThreshold;\n            y = (maxY - maxThreshold) / zoom;\n        } else if (scrollTop < threshold) {\n            scrollTop += margin;\n        } else if (scrollTop > scrollAreaHeight - threshold) {\n            scrollTop -= margin;\n        }\n        scrollLeft = Math.round(scrollLeft);\n        scrollTop = Math.round(scrollTop);\n\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n\n        this.offsetX = Math.round(x - scrollLeft / zoom);\n        this.offsetY = Math.round(y - scrollTop / zoom);\n\n        this.render();\n        const nextX = this.getScrollLeft();\n        const nextY = this.getScrollTop();\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft: nextX,\n            scrollTop: nextY,\n        });\n\n        if (Math.round(prevScrollLeft) !== scrollLeft || Math.round(prevScrollTop) !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (scrollLeft !== Math.round(requestScrollLeft) || scrollTop !== Math.round(requestScrollTop)) {\n                    this.scrollTo(nextX, nextY);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number, isSetter?: boolean) {\n        if (isSetter && this.useAutoZoom) {\n            return;\n        }\n        const {\n            containerWidth,\n            containerHeight,\n            zoom: prevZoom,\n            zoomRange\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n        const nextZoom = between(zoom, zoomRange[0], zoomRange[1]);\n\n        this.options.zoom = nextZoom;\n\n\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n        const zoomX = convertUnitSize(`${zoomOffsetX}`, containerWidth);\n        const zoomY = convertUnitSize(`${zoomOffsetY}`, containerHeight);\n\n        const centerX = scrollLeft + zoomX / prevZoom;\n        const centerY = scrollTop + zoomY / prevZoom;\n\n        const nextCenterX = nextScrollLeft + zoomX / nextZoom;\n        const nextCenterY = nextScrollTop + zoomY / nextZoom;\n\n        this.scrollBy(centerX - nextCenterX, centerY - nextCenterY);\n        this.render();\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        const {\n            rangeX = DEFAULT_OPTIONS.rangeX,\n            rangeOffsetX = DEFAULT_OPTIONS.rangeOffsetX,\n            margin = DEFAULT_OPTIONS.margin,\n            zoom = DEFAULT_OPTIONS.zoom,\n            threshold,\n        } = this;\n\n        const range = getRange(\n            this.getScrollLeft(),\n            margin,\n            rangeX,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return [range[0] + rangeOffsetX[0], range[1] + rangeOffsetX[1]];\n        }\n        return [\n            range[0] * zoom + rangeOffsetX[0],\n            Math.max(this.viewportWidth * zoom - this.containerWidth, range[1] * zoom + rangeOffsetX[1]),\n        ];\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        const {\n            rangeY = DEFAULT_OPTIONS.rangeY,\n            margin = DEFAULT_OPTIONS.margin,\n            zoom = DEFAULT_OPTIONS.zoom,\n            threshold,\n        } = this;\n\n        const range = getRange(\n            this.getScrollTop(),\n            margin,\n            rangeY,\n            threshold,\n            isReal,\n        );\n        if (!isZoom) {\n            return range;\n        }\n        return [\n            range[0] * zoom,\n            Math.max(this.viewportHeight * zoom - this.containerHeight, range[1] * zoom),\n        ];\n    }\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const containerElement = this.containerElement;\n        const options = this.options;\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (wrapperElement) {\n            this.wrapperElement = wrapperElement;\n        } else {\n            wrapperElement = document.createElement(\"div\");\n            wrapperElement.insertBefore(this.viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n\n            this.wrapperElement = wrapperElement;\n        }\n\n        if (scrollAreaElement) {\n            this.scrollAreaElement = scrollAreaElement;\n        } else {\n            scrollAreaElement = document.createElement(\"div\");\n\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n\n            this.scrollAreaElement = scrollAreaElement;\n        }\n        addClass(containerElement, CLASS_NAME);\n        addClass(wrapperElement, WRAPPER_CLASS_NAME);\n        addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n\n        this.horizontalScrollbar = new ScrollBar(\"horizontal\", horizontalScrollElement);\n        this.verticalScrollbar = new ScrollBar(\"vertical\", verticalScrollElement);\n\n        this.horizontalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoom, 0);\n        });\n\n        this.verticalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoom);\n        });\n\n        if (this.horizontalScrollbar.isAppend) {\n            containerElement.insertBefore(this.horizontalScrollbar.barElement, null);\n        }\n        if (this.verticalScrollbar.isAppend) {\n            containerElement.insertBefore(this.verticalScrollbar.barElement, null);\n        }\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * The pinchStart and abortPinch events do not occur when pinching through the wheel.\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: document.body,\n            events: [\"touch\", \"mouse\"],\n        }).on(\"dragStart\", ({ inputEvent, datas, stop, isMouseEvent }) => {\n            if (!this.useMouseDrag && isMouseEvent) {\n                stop();\n                return;\n            }\n            this.pauseAnimation();\n            this.dragFlag = false;\n            const result = this.trigger(\"dragStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n                return;\n            }\n\n            inputEvent.preventDefault();\n\n            datas.startEvent = inputEvent;\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch) {\n                this.trigger(\"drag\", {\n                    ...e,\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                const zoom = this.zoom;\n                this.scrollBy(-e.deltaX / zoom, -e.deltaY / zoom);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this.startAnimation(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this.pauseAnimation();\n            datas.startZoom = this.zoom;\n\n            const result = this.trigger(\"pinchStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n            this._setClientRect();\n        }).on(\"pinch\", e => {\n            this._triggerPinch({\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                inputEvent: e.inputEvent,\n                isWheel: false,\n                zoom: e.datas.startZoom * e.scale,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        }).on(\"pinchEnd\", () => {\n            this._tempRect = null;\n        });\n\n        addEvent(wrapperElement, \"scroll\", this.onScroll);\n\n        if (options.useResizeObserver) {\n            const observer = new ResizeObserver(() => {\n                this.resize();\n            });\n\n            observer.observe(this.viewportElement);\n            observer.observe(this.containerElement);\n\n\n            this._onDestroys.push(() => {\n                observer.disconnect();\n            });\n        } else {\n            addEvent(window, \"resize\", this.resize);\n\n            this._onDestroys.push(() => {\n                removeEvent(window, \"resize\", this.resize);\n            })\n        }\n\n        if (options.useWheelPinch || options.useWheelScroll) {\n            addEvent(containerElement, \"wheel\", this.onWheel, {\n                passive: false,\n            });\n        }\n        if (options.useGesture) {\n            addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n                passive: false,\n            });\n            addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n                passive: false,\n            });\n        }\n        this.resize();\n        this.scrollTo(0, 0);\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoom = DEFAULT_OPTIONS.zoom,\n            translateZ = 0,\n        } = this;\n        const {\n            useTransform = DEFAULT_OPTIONS.useTransform,\n        } = this.options;\n        const nextOffsetX = -offsetX * zoom;\n        const nextOffsetY = -offsetY * zoom;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n\n        const viewportStyle = this.viewportElement.style;\n\n        if (useTransform === false) {\n            viewportStyle.cssText += `position: relative; top: ${nextOffsetY}px; left: ${nextOffsetX}px;`;\n        } else {\n            viewportStyle.cssText += `transform-origin: 0 0;transform:translate3d(${nextOffsetX}px, ${nextOffsetY}px, ${translateZ}px) scale(${zoom});`;\n        }\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            containerWidth,\n            containerHeight,\n            zoom,\n        } = this;\n        const scrollLeft = this.getScrollLeft(true) * zoom;\n        const scrollTop = this.getScrollTop(true) * zoom;\n        const scrollWidth = this.getScrollWidth(true);\n        const scrollHeight = this.getScrollHeight(true);\n\n        this.horizontalScrollbar.render(\n            this.displayHorizontalScroll,\n            scrollLeft,\n            containerWidth,\n            scrollWidth,\n        );\n        this.verticalScrollbar.render(\n            this.displayVerticalScroll,\n            scrollTop,\n            containerHeight,\n            scrollHeight,\n        );\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const options = this.options;\n        const maxPinchWheel = options.maxPinchWheel || Infinity;\n\n        const isKeydown = e[`${this.wheelPinchKey}Key`];\n\n        if (options.useWheelPinch && isKeydown) {\n            let deltaY = e.deltaY;\n            const sign = deltaY >= 0 ? 1 : -1;\n            const distance = Math.min(maxPinchWheel, Math.abs(deltaY));\n\n\n            deltaY = sign * distance;\n            const delta = -deltaY;\n            const scale = Math.max(1 + delta * (options.wheelScale || 0.01), TINY_NUM);\n\n            clearTimeout(this._tempRectTimer);\n            this._tempRectTimer = window.setTimeout(() => {\n                this._tempRect = null;\n            }, 100);\n            this._triggerPinch({\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                inputEvent: e,\n                isWheel: true,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        } else if (options.useWheelScroll) {\n            const zoom = this.zoom;\n\n            let deltaX = e.deltaX;\n            let deltaY = e.deltaY;\n\n            if (e.shiftKey && !deltaX) {\n                deltaX = deltaY;\n                deltaY = 0;\n            }\n            this.scrollBy(deltaX / zoom, deltaY / zoom);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this._tempScale = this.zoom;\n        this._setClientRect();\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this._tempScale) {\n            this._tempScale = 0;\n            return;\n        }\n        const scale = e.scale;\n\n        this._triggerPinch({\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            inputEvent: e,\n            isWheel: true,\n            zoom: this._tempScale * scale,\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ratioX: 0,\n            ratioY: 0,\n        });\n    }\n    private onGestureEnd = () => {\n\n    }\n    private startAnimation(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const easing = x => 1 - Math.pow(1 - x, 3);\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n        const startTime = Date.now();\n        let prevTime = startTime;\n\n        const next = () => {\n            const now = Date.now();\n            let t = now - startTime;\n\n            if (duration < t) {\n                t = duration;\n            }\n            const ratio = easing(t / duration);\n            const prevRatio = easing((prevTime - startTime) / duration);\n\n            prevTime = now;\n\n            this.scrollBy(\n                -destPos[0] * (ratio - prevRatio),\n                -destPos[1] * (ratio - prevRatio),\n            );\n\n            if (t >= duration) {\n                return;\n            }\n            this.timer = requestAnimationFrame(next);\n        };\n        this.timer = requestAnimationFrame(next);\n    }\n    private pauseAnimation() {\n        cancelAnimationFrame(this.timer);\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private _triggerPinch(event: OnPinch) {\n        const {\n            clientX,\n            clientY,\n            zoom,\n        } = event;\n        if (this.useAutoZoom) {\n            this._zoomByClient(event.zoom, clientX, clientY);\n        }\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const zoomRange = this.zoomRange;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const ratioX = (clientX - left) / width * 100;\n        const ratioY = (clientY - top) / height * 100;\n\n        this.trigger(\"pinch\", {\n            ...event,\n            zoom: between(zoom, zoomRange[0], zoomRange[1]),\n            ratioX,\n            ratioY,\n        });\n    }\n    private _setClientRect() {\n        const rect = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: rect.left,\n            top: rect.top,\n            width: rect.width,\n            height: rect.height,\n        };\n    }\n    private _zoomByClient(zoom: number, clientX: number, clientY: number) {\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const options = this.options;;\n\n        const originalZoomOffsetX = options.zoomOffsetX;\n        const originalZoomOffsetY = options.zoomOffsetY;\n\n        options.zoomOffsetX = `${(clientX - left) / width * 100}%`;\n        options.zoomOffsetY = `${(clientY - top) / height * 100}%`;\n\n        this.setZoom(zoom);\n\n        options.zoomOffsetX = originalZoomOffsetX;\n        options.zoomOffsetY = originalZoomOffsetY;\n    }\n\n}\n\ninterface InfiniteViewer extends InfiniteViewerProperties { }\n\nexport default InfiniteViewer;\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n"],"names":["IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","SCROLL_BAR_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","rangeX","Infinity","rangeY","rangeOffsetX","rangeOffsetY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","useAutoZoom","useMouseDrag","pinchThreshold","cspNonce","maxPinchWheel","wheelScale","displayHorizontalScroll","displayVerticalScroll","useTransform","useWheelPinch","zoomRange","wheelPinchKey","useWheelScroll","zoomOffsetX","zoomOffsetY","translateZ","useGesture","useResizeObserver","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArray","getDuration","speed","a","normalSpeed","Math","sqrt","abs","v","getRange","pos","range","isReal","isFinite","min","floor","max","ceil","type","container","_super","_this","e","delta","isHorizontal","deltaX","deltaY","preventDefault","trigger","thumbElement","barElement","querySelector","document","createElement","insertBefore","isAppend","addClass","gesto","Gesto","window","on","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","size","thumbRect","getBoundingClientRect","pos1","pos2","clientPos","scrollSize","scrollBy","stopPropagation","addEvent","onWheel","passive","__extends","ratio","this","isDisplay","display","_a","dirName1","sizeName","style","cssText","removeEvent","off","EventEmitter","containerElement","viewportElement","options","containerWidth","containerHeight","_b","viewportWidth","viewportHeight","render","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","isKeydown","sign","distance","scale","clearTimeout","_tempRectTimer","_tempRect","_triggerPinch","rotation","isWheel","clientX","clientY","ratioX","ratioY","shiftKey","_tempScale","_setClientRect","isFlag","init","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","_onDestroys","forEach","callback","onScroll","onGestureStart","onGestureChange","onGestureEnd","isAbsolute","offsetY","getRangeY","offsetX","getRangeX","isZoom","resize","left","top","x","y","minThreshold","maxThreshold","_c","_d","prevScrollLeft","prevScrollTop","_e","minX","maxX","_f","minY","maxY","round","scrollAreaWidth","getScrollAreaWidth","scrollAreaHeight","getScrollAreaHeight","zoomX","zoomY","nextX","nextY","move","requestScrollLeft","requestScrollTop","isSetter","prevZoom","nextZoom","nextScrollLeft","nextScrollTop","centerX","centerY","nextCenterX","nextCenterY","between","convertUnitSize","observer_1","firstChild","ScrollBar","inject","nonce","body","events","stop","isMouseEvent","pauseAnimation","dragFlag","startEvent","isPinch","time","Date","now","prevSpeed","dt","measureSpeed","movement","isDrag","isDouble","startAnimation","startZoom","ResizeObserver","observe","push","disconnect","nextOffsetX","nextOffsetY","viewportStyle","renderScroll","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","easing","duration","destPos","startTime","prevTime","next","pow","t","prevRatio","timer","cancelAnimationFrame","event","_zoomByClient","rect","getContainer","width","height","originalZoomOffsetX","originalZoomOffsetY","setZoom","prototype","property","attributes","enumerable","configurable","get","setter","set","value","Object","defineProperty","InfiniteViewer","modules"],"mappings":"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"}