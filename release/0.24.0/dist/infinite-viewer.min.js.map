{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/index.umd.ts","../src/InfiniteViewer.tsx","../src/InfiniteViewerManager.tsx"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.restrict-wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: calc(100% - 20px);\n    right: 10px;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: calc(100% - 20px);\n    bottom: 10px;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n    border-radius: 5px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n    border-radius: 5px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    zoomX: 1,\n    zoomY: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    rangeOffsetX: [0, 0],\n    rangeOffsetY: [0, 0],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    useAutoZoom: false,\n    useMouseDrag: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: Infinity,\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useTransform: true,\n    useWheelPinch: true,\n    zoomRange: [0.001, Infinity],\n    wheelPinchKey: \"ctrl\" as const,\n    useWheelScroll: IS_SAFARI,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: true,\n    useResizeObserver: false,\n    pinchDirection: \"all\" as const,\n    preventWheelClick: true,\n};\n\nexport const DEFAULT_EASING = (x: number) => 1 - Math.pow(1 - x, 3);\nexport const NAMES = {\n    horizontal: {\n        pos: \"Left\",\n        coord: \"X\",\n        size: \"Width\",\n    },\n    vertical: {\n        pos: \"Top\",\n        coord: \"Y\",\n        size: \"Height\",\n    },\n} as const;\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"zoomX\",\n    \"zoomY\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"useWheelScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n    \"pinchDirection\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"preventWheelClick\",\n    \"useWheel\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n    \"wheelContainer\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"getContainerWidth\",\n    \"getContainerHeight\",\n    \"getViewportWidth\",\n    \"getViewportHeight\",\n    \"getViewportScrollWidth\",\n    \"getViewportScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"zoomBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n    \"getZoom\",\n    \"getZoomX\",\n    \"getZoomY\",\n    \"getWheelContainer\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\nimport { AnimationOptions } from \"./types\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        -speed[0] / 2 * duration,\n        -speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n\n\nexport function checkDefault<T>(value: T | undefined | null, defaultValue: T): T {\n    return value != null ? value : defaultValue;\n}\n\n\n\nexport function startAnimation(\n    callback: (ratioDist: number) => void,\n    timerCallback: (next: () => void) => void,\n    options: AnimationOptions,\n) {\n    const duration = options.duration;\n    const easing = options.easing || ((x: number) => 1 - Math.pow(1 - x, 3));\n    const startTime = Date.now();\n    let prevTime = startTime;\n\n    const next = () => {\n        const now = Date.now();\n        let t = now - startTime;\n\n        if (duration < t) {\n            t = duration;\n        }\n        const ratio = easing(t / duration);\n        const prevRatio = easing((prevTime - startTime) / duration);\n\n        prevTime = now;\n\n        callback(ratio - prevRatio);\n\n        if (t >= duration) {\n            return;\n        }\n        timerCallback(next);\n    };\n    timerCallback(next);\n}\n","import Gesto from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent, throttle } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\nimport { abs } from \"./utils\";\n\nexport default class ScrollBar extends EventEmitter {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    public barElement!: HTMLElement;\n    private gesto!: Gesto;\n    private size: number = 0;\n    private scrollSize: number = 0;\n    private isHorizontal = false;\n\n    constructor(\n        private type: \"horizontal\" | \"vertical\",\n        container?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n        let thumbElement: HTMLElement;\n        let barElement: HTMLElement = container;\n\n        if (!container) {\n            barElement = document.createElement(\"div\");\n            thumbElement = document.createElement(\"div\");\n\n            barElement.insertBefore(thumbElement, null);\n            this.isAppend = true;\n        } else {\n            thumbElement = container.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        addClass(\n            barElement,\n            isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                : VERTICAL_SCROLL_BAR_CLASS_NAME,\n        );\n        addClass(barElement, SCROLL_BAR_CLASS_NAME);\n        addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n        this.thumbElement = thumbElement;\n        this.barElement = barElement;\n        this.isHorizontal = isHorizontal;\n        this.gesto = new Gesto(barElement, {\n            container: window,\n        }).on(\"dragStart\", e => {\n            const target = e.inputEvent.target;\n            const datas = e.datas;\n            const isThumb = this.thumbElement === target;\n\n            if (!isThumb) {\n                setTimeout(() => {\n                    requestAnimationFrame(() => {\n                        const thumbRect = this.thumbElement.getBoundingClientRect();\n                        const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                        const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                        const pos2 = pos1 + thumbSize;\n                        const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                        const endPos = clientPos - pos2;\n                        const startPos = clientPos - pos1;\n\n                        if (0 <= startPos && endPos <= 0) {\n                            return;\n                        }\n                        // thumbSize === containerSize\n                        // scrollWidth =\n                        this.scrollSize\n                        const clientScrollWidth = thumbSize / this.size * this.scrollSize;\n                        const pos = (0 < endPos ? endPos : startPos) / clientScrollWidth;\n                        const delta = pos * this.size;\n\n                        console.log(this.scrollSize, pos, delta);\n\n                        this.scrollBy(delta);\n                    });\n                }, 100);\n\n            }\n            datas.isThumb = isThumb;\n            e.inputEvent.stopPropagation();\n            e.inputEvent.preventDefault();\n        }).on(\"drag\", e => {\n            if (!e.datas.isThumb) {\n                return;\n            }\n            this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY);\n        });\n        addEvent(this.barElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: this.scrollSize * ratio,\n        });\n    }\n    public render(\n        isDisplay: boolean,\n        containerSize: number,\n        scrollRange: number[],\n    ) {\n        const [startMargin, endMargin] = scrollRange;\n        const scrollSizeOffset = throttle(abs(startMargin) + endMargin, 0.001);\n        const scrollSize = containerSize + scrollSizeOffset;\n        const display = isDisplay && scrollSizeOffset ? \"block\" : \"none\";\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n        const thumbSize = containerSize / scrollSize;\n        const thumbPos = endMargin / scrollSize / thumbSize;\n\n        this.size = containerSize;\n        this.scrollSize = scrollSize;\n        this.barElement.style.cssText = `display: ${display};`;\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${thumbSize * 100}%;`\n            + `transform: translate${dirName1}(${thumbPos * 100}%)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this.onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    private onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewerManager from \"./InfiniteViewerManager\";\n\nexport default class InfiniteViewer extends InfiniteViewerManager {}\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass, convertUnitSize, between, isObject, isArray, isString } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, OnPinch, AnimationOptions, ScrollOptions, ZoomOptions, GetScollPosOptions, InnerScrollOptions, ScrollCenterOptions } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME, NAMES, DEFAULT_EASING,\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange, checkDefault, startAnimation } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private containerWidth: number = 0;\n    private containerHeight: number = 0;\n    private viewportWidth: number = 0;\n    private viewportHeight: number = 0;\n    private viewportScrollWidth: number = 0;\n    private viewportScrollHeight: number = 0;\n    private scrollLeft: number = 0;\n    private scrollTop: number = 0;\n    private _scrollTimer = 0;\n    private _zoomTimer = 0;\n\n    private _viewportElement: HTMLElement | null = null;\n    private _wheelContainerElement: HTMLElement | null = null;\n    private dragFlag: boolean = false;\n    private isLoop: boolean = false;\n    private _tempScale: number[] = [1, 1];\n    private _tempRect: { top: number, left: number, width: number, height: number } | null = null;\n    private _tempRectTimer: number | null = null;\n    private _onDestroys: Array<() => void> = [];\n    private _asLeft = 0;\n    private _asTop = 0;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private _containerElement: HTMLElement,\n        viewportElement: HTMLElement | Partial<InfiniteViewerOptions> = {},\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n\n\n        if (viewportElement instanceof Element) {\n            this._viewportElement = viewportElement;\n            this.options = {\n                ...DEFAULT_OPTIONS,\n                ...options,\n            };\n        } else {\n            this._viewportElement = _containerElement.children[0] as HTMLElement;\n            this.options = {\n                ...DEFAULT_OPTIONS,\n                ...viewportElement,\n            };\n        }\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this._containerElement;\n    }\n    /**\n     * Get Wheel Container Element\n     */\n    public getWheelContainer(): HTMLElement {\n        return this._wheelContainerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this._viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Get Scroll Area Element\n     */\n    public geScrollArea(): HTMLElement {\n        return this.scrollAreaElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this._containerElement;\n\n        this._onDestroys.forEach(callback => {\n            callback();\n        });\n        removeEvent(this.wrapperElement, \"scroll\", this._onScroll);\n        removeEvent(this._wheelContainerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"gesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n        removeEvent(containerElement, \"gesturesend\", this.onGestureEnd);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this._containerElement = null;\n        this._viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollTop(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomY;\n        const pos = this.scrollTop / zoom + this.offsetY\n            + (range ? abs(this.getRangeY()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollLeft(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomX;\n        const pos = this.scrollLeft / zoom + this.offsetX\n            + (range ? abs(this.getRangeX()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this._getScrollRangeX();\n        const zoom = this.zoomX;\n        const size = this.containerWidth / zoom + abs(range[0]) + range[1];\n\n        return isZoom ? size : size * zoom;\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this._getScrollRangeY();\n        const zoom = this.zoomY;\n        const size = this.containerHeight / zoom + abs(range[0]) + range[1];\n\n        return isZoom ? size : size * zoom;\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter(options: ScrollCenterOptions = {}) {\n        this.resize();\n\n        const zoomX = this.zoomX;\n        const zoomY = this.zoomY;\n\n        let left = -(this.containerWidth / zoomX - this.viewportWidth) / 2;\n        let top = -(this.containerHeight / zoomY - this.viewportHeight) / 2;\n\n        if (options.absolute) {\n            left *= zoomX;\n            top *= zoomY;\n        }\n        if (options.horizontal === false) {\n            left = this.getScrollLeft();\n        }\n        if (options.vertical === false) {\n            top = this.getScrollTop();\n        }\n\n        return this.scrollTo(left, top, options);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this._containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n            scrollWidth: viewportScrollWidth,\n            scrollHeight: viewportScrollHeight,\n        } = this._viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n        this.viewportScrollWidth = Math.max(viewportWidth, viewportScrollWidth);\n        this.viewportScrollHeight = Math.max(viewportWidth, viewportScrollHeight);\n\n        this.render();\n        this._scrollBy(0, 0);\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n        } else {\n            this._startScrollAnimation([deltaX, deltaY], options);\n            return true;\n        }\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            return this._scrollTo(x, y, options);\n        } else {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this.scrollBy(x - scrollLeft, y - scrollTop, options);\n        }\n    }\n    /**\n     * Set viewer zoom by the given amount\n     */\n    public zoomBy(deltaZoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n        const [deltaX, deltaY] = isArray(deltaZoom)\n        ? deltaZoom\n        : [deltaZoom, deltaZoom];\n\n        if (!options || !options.duration) {\n            this._setZoom([\n                this.zoomX + deltaX,\n                this.zoomY + deltaY,\n            ], options);\n        } else {\n            this._startZoomAnimation([deltaX, deltaY], options);\n        }\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n\n        if (!options || !options.duration) {\n            this._setZoom(zoom, options);\n        } else {\n            const [zoomX, zoomY] = isArray(zoom)\n            ? zoom\n            : [zoom, zoom];\n            this._startZoomAnimation([\n                zoomX - this.zoomX,\n                zoomY - this.zoomY,\n            ], options);\n        }\n    }\n    public getViewportWidth() {\n        return this.viewportWidth;\n    }\n    public getViewportHeight() {\n        return this.viewportWidth;\n    }\n    public getViewportScrollWidth() {\n        return this.viewportScrollWidth;\n    }\n    public getViewportScrollHeight() {\n        return this.viewportScrollHeight;\n    }\n    public getContainerWidth() {\n        return this.containerWidth;\n    }\n    public getContainerHeight() {\n        return this.containerHeight;\n    }\n    /**\n     * Get viewer zoom\n     */\n    public getZoom() {\n        return (this.zoomX + this.zoomY) / 2;\n    }\n    /**\n     * Get viewer zoomX\n     * @since 0.20.0\n     */\n    public getZoomX() {\n        return this.zoomX;\n    }\n    /**\n     * Get viewer zoom\n     * @since 0.20.0\n     */\n    public getZoomY() {\n        return this.zoomY;\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"horizontal\", isZoom, isReal);\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"vertical\", isZoom, isReal);\n    }\n\n    private init() {\n        // infinite-viewer(container)\n        // viewportㅌ\n        // children\n        const containerElement = this._containerElement;\n        const options = this.options;\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (!wrapperElement) {\n            wrapperElement = document.createElement(\"div\");\n            wrapperElement.insertBefore(this._viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n        }\n        this.wrapperElement = wrapperElement;\n\n        if (!scrollAreaElement) {\n            scrollAreaElement = document.createElement(\"div\");\n\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n        }\n        this.scrollAreaElement = scrollAreaElement;\n\n        addClass(containerElement, CLASS_NAME);\n        addClass(wrapperElement, WRAPPER_CLASS_NAME);\n        // addClass(restrictElement, RESTRICT_WRAPPER_CLASS_NAME);\n        addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n\n        this.horizontalScrollbar = new ScrollBar(\"horizontal\", horizontalScrollElement);\n        this.verticalScrollbar = new ScrollBar(\"vertical\", verticalScrollElement);\n\n        this.horizontalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoomX, 0);\n        });\n\n        this.verticalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoomY);\n        });\n\n        if (this.horizontalScrollbar.isAppend) {\n            containerElement.insertBefore(this.horizontalScrollbar.barElement, null);\n        }\n        if (this.verticalScrollbar.isAppend) {\n            containerElement.insertBefore(this.verticalScrollbar.barElement, null);\n        }\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n\n        const wheelContainerOption = options.wheelContainer;\n        let wheelContainerElement: HTMLElement | null = null;\n\n        if (wheelContainerOption) {\n            if (isString(wheelContainerOption)) {\n                wheelContainerElement = document.querySelector(wheelContainerOption);\n            } else if (wheelContainerOption instanceof Node) {\n                wheelContainerElement = wheelContainerOption;\n            } else if (\"value\" in wheelContainerOption || \"current\" in wheelContainerOption) {\n                wheelContainerElement = wheelContainerOption.current || wheelContainerOption.value;\n            }\n        }\n        wheelContainerElement ||= containerElement;\n        this._wheelContainerElement = wheelContainerElement;\n\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * The pinchStart and abortPinch events do not occur when pinching through the wheel.\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: window,\n            events: [\"touch\", \"mouse\"],\n            preventWheelClick: this.options.preventWheelClick ?? true,\n        }).on(\"dragStart\", e => {\n            const {\n                inputEvent,\n                stop,\n                datas,\n            } = e;\n            if (!this.useMouseDrag && e.isMouseEvent) {\n                stop();\n                return;\n            }\n            this._pauseScrollAnimation();\n            this.dragFlag = false;\n            const result = this.trigger(\"dragStart\", e);\n\n            if (result === false) {\n                stop();\n                return;\n            }\n            inputEvent.preventDefault();\n            datas.startEvent = inputEvent;\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch || (this.useMouseDrag && e.isMouseEvent)) {\n                this.trigger(\"drag\", {\n                    ...e,\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                this.scrollBy(-e.deltaX / this.zoomX, -e.deltaY / this.zoomY);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this._startScrollAnimationBySpeed(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this._pauseScrollAnimation();\n            datas.startZoom = [this.zoomX, this.zoomY];\n\n            const result = this.trigger(\"pinchStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n            this._setClientRect();\n        }).on(\"pinch\", e => {\n            const scale = e.scale;\n            const pinchDirection = this.options.pinchDirection;\n\n            this._triggerPinch({\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                inputEvent: e.inputEvent,\n                isWheel: false,\n                zoom: e.datas.startZoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        }).on(\"pinchEnd\", () => {\n            this._tempRect = null;\n        });\n\n        addEvent(wrapperElement, \"scroll\", this._onScroll);\n\n        if (options.useResizeObserver) {\n            const observer = new ResizeObserver(() => {\n                this.resize();\n            });\n\n            observer.observe(this._viewportElement);\n            observer.observe(this._containerElement);\n\n\n            this._onDestroys.push(() => {\n                observer.disconnect();\n            });\n        } else {\n            addEvent(window, \"resize\", this.resize);\n\n            this._onDestroys.push(() => {\n                removeEvent(window, \"resize\", this.resize);\n            })\n        }\n\n        if (options.useWheelPinch || options.useWheelScroll) {\n            addEvent(wheelContainerElement, \"wheel\", this.onWheel, {\n                passive: false,\n            });\n        }\n        if (options.useGesture) {\n            addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n                passive: false,\n            });\n            addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n                passive: false,\n            });\n        }\n        this.resize();\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoomX = DEFAULT_OPTIONS.zoomX,\n            zoomY = DEFAULT_OPTIONS.zoomY,\n            translateZ = 0,\n            rangeX,\n            rangeY,\n            containerWidth,\n            containerHeight,\n        } = this;\n        const {\n            useTransform = DEFAULT_OPTIONS.useTransform,\n        } = this.options;\n        let nextOffsetX = -offsetX * zoomX;\n        let nextOffsetY = -offsetY * zoomY;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n\n        const viewportStyle = this._viewportElement.style;\n\n        if (useTransform === false) {\n            viewportStyle.cssText += `position: relative; left: ${nextOffsetX}px; top: ${nextOffsetY}px; `;\n\n            // if (restrictOffsetX || restrictOffsetY) {\n            //     viewportStyle.cssText += `position: relative; left: ${restrictOffsetX}px; top: ${restrictOffsetY}px`;\n            // }\n        } else {\n            viewportStyle.cssText += `transform-origin: 0 0;`\n                + `transform:translate3d(${nextOffsetX}px, ${nextOffsetY}px, ${translateZ}px) scale(${zoomX}, ${zoomY});`;\n\n            // if (restrictOffsetX || restrictOffsetY) {\n            //     viewportStyle.cssText += `transform:translate3d(${restrictOffsetX}px, ${restrictOffsetY}px, 0px)`;\n            // }\n        }\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX,\n            zoomY,\n        } = this;\n\n        this.horizontalScrollbar.render(\n            this.displayHorizontalScroll,\n            containerWidth / zoomX,\n            this._getScrollRangeX(),\n        );\n        this.verticalScrollbar.render(\n            this.displayVerticalScroll,\n            containerHeight / zoomY,\n            this._getScrollRangeY(),\n        );\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private _onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const options = this.options;\n        const pinchDirection = options.pinchDirection;\n        const maxPinchWheel = options.maxPinchWheel || Infinity;\n\n        const isKeydown = e[`${this.wheelPinchKey}Key`] || e.ctrlKey;\n\n        if (options.useWheelPinch && isKeydown) {\n            let deltaY = e.deltaY;\n            const sign = deltaY >= 0 ? 1 : -1;\n            const distance = Math.min(maxPinchWheel, Math.abs(deltaY));\n\n\n            deltaY = sign * distance;\n            const delta = -deltaY;\n            const scale = Math.max(1 + delta * (options.wheelScale || 0.01), TINY_NUM);\n\n            clearTimeout(this._tempRectTimer);\n            this._tempRectTimer = window.setTimeout(() => {\n                this._tempRect = null;\n            }, 100);\n            this._triggerPinch({\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                inputEvent: e,\n                isWheel: true,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        } else if (options.useWheelScroll) {\n            let deltaX = e.deltaX;\n            let deltaY = e.deltaY;\n\n            if (e.shiftKey && !deltaX) {\n                deltaX = deltaY;\n                deltaY = 0;\n            }\n            this.scrollBy(deltaX / this.zoomX, deltaY / this.zoomY);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this._tempScale = [this.zoomX, this.zoomY];\n        this._setClientRect();\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this._tempScale) {\n            this._tempScale =  [1, 1];\n            return;\n        }\n        const scale = e.scale;\n        const zoomX = this._tempScale[0];\n        const zoomY = this._tempScale[1];\n        const pinchDirection = this.options.pinchDirection;\n\n        this._triggerPinch({\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            inputEvent: e,\n            isWheel: true,\n            zoom: (zoomX + zoomY) * scale / 2,\n            zoomX: zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n            zoomY: zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ratioX: 0,\n            ratioY: 0,\n        });\n    }\n    private onGestureEnd = () => {\n\n    }\n    private _startZoomAnimation(dest: number[], options: ZoomOptions) {\n        if (!dest) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._setZoom(\n                [\n                    this.zoomX + dest[0] * distRatio,\n                    this.zoomY + dest[1] * distRatio,\n                ],\n                options,\n            ),\n            next => {\n                this._zoomTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimation(dest: number[], options: AnimationOptions) {\n        if (!dest[0] && !dest[1]) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._scrollBy(\n                dest[0] * distRatio,\n                dest[1] * distRatio,\n                options,\n            ),\n            next => {\n                this._scrollTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimationBySpeed(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n\n        return this._startScrollAnimation(destPos, {\n            duration,\n        })\n\n    }\n    private _pauseScrollAnimation() {\n        cancelAnimationFrame(this._scrollTimer);\n        this._scrollTimer = 0;\n    }\n    private _pauseZoomAnimation() {\n        cancelAnimationFrame(this._zoomTimer);\n        this._zoomTimer = 0;\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private _triggerPinch(event: OnPinch) {\n        const {\n            clientX,\n            clientY,\n            zoomX,\n            zoomY,\n        } = event;\n        if (this.useAutoZoom) {\n            this._zoomByClient([zoomX, zoomY], clientX, clientY);\n        }\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const zoomRange = this.zoomRange;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const ratioX = (clientX - left) / width * 100;\n        const ratioY = (clientY - top) / height * 100;\n\n        this.trigger(\"pinch\", {\n            ...event,\n            zoom: between((zoomX + zoomY) / 2, zoomRange[0], zoomRange[1]),\n            zoomX: between(zoomX, zoomRange[0], zoomRange[1]),\n            zoomY: between(zoomY, zoomRange[0], zoomRange[1]),\n            ratioX,\n            ratioY,\n        });\n    }\n    private _setClientRect() {\n        const rect = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: rect.left,\n            top: rect.top,\n            width: rect.width,\n            height: rect.height,\n        };\n    }\n    private _zoomByClient(zoom: number[], clientX: number, clientY: number) {\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const options = this.options;;\n\n        const originalZoomOffsetX = options.zoomOffsetX;\n        const originalZoomOffsetY = options.zoomOffsetY;\n\n        options.zoomOffsetX = `${(clientX - left) / width * 100}%`;\n        options.zoomOffsetY = `${(clientY - top) / height * 100}%`;\n\n        this._setZoom(zoom, {\n            zoomBase: \"screen\",\n        });\n\n        options.zoomOffsetX = originalZoomOffsetX;\n        options.zoomOffsetY = originalZoomOffsetY;\n    }\n    private _setZoom(\n        zoom: number | number[],\n        zoomOptions: ZoomOptions = {},\n    ) {\n        const zoomBase = zoomOptions.zoomBase;\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX: prevZoomX,\n            zoomY: prevZoomY,\n            zoomRange\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n        if (\"zoomOffsetX\" in zoomOptions) {\n            zoomOffsetX = zoomOptions.zoomOffsetX;\n        }\n        if (\"zoomOffsetY\" in zoomOptions) {\n            zoomOffsetY = zoomOptions.zoomOffsetY;\n        }\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n        const nextZoomX = between(zoomX, zoomRange[0], zoomRange[1]);\n        const nextZoomY = between(zoomY, zoomRange[0], zoomRange[1]);\n        const options = this.options;\n\n        options.zoomX = nextZoomX;\n        options.zoomY = nextZoomY;\n        options.zoom = (nextZoomX + nextZoomY) / 2;\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n\n        let zoomXPos = 0;\n        let zoomYPos = 0;\n\n        if (zoomBase === \"viewport\") {\n            zoomXPos = (-scrollLeft + convertUnitSize(`${zoomOffsetX}`, this.viewportWidth)) * prevZoomX;\n            zoomYPos = (-scrollTop + convertUnitSize(`${zoomOffsetY}`, this.viewportHeight)) * prevZoomY;\n        } else {\n            zoomXPos = convertUnitSize(`${zoomOffsetX}`, containerWidth);\n            zoomYPos = convertUnitSize(`${zoomOffsetY}`, containerHeight);\n        }\n\n        const centerX = scrollLeft + zoomXPos / prevZoomX;\n        const centerY = scrollTop + zoomYPos / prevZoomY;\n\n        const nextCenterX = nextScrollLeft + zoomXPos / nextZoomX;\n        const nextCenterY = nextScrollTop + zoomYPos / nextZoomY;\n\n        this._scrollBy(centerX - nextCenterX, centerY - nextCenterY, {\n            zoom: !!(nextZoomX - prevZoomX || nextZoomY - prevZoomY),\n        });\n        this.render();\n    }\n    private _scrollBy(deltaX: number, deltaY: number, options?: InnerScrollOptions) {\n        let scrollLeft = this.getScrollLeft();\n        let scrollTop = this.getScrollTop();\n\n        if (options?.absolute) {\n            scrollLeft *= this.zoomX;\n            scrollTop *= this.zoomY;\n        }\n        return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n    }\n    private _scrollTo(x: number, y: number, options?: InnerScrollOptions) {\n        const {\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n\n        const isAbsolute = options?.absolute;\n        this._scrollToType(\"horizontal\", x, isAbsolute);\n        this._scrollToType(\"vertical\", y, isAbsolute);\n\n        const scrollLeft = this.scrollLeft;\n        const scrollTop = this.scrollTop;\n        this.render();\n        const nextScrollAbsoluteLeft = this.getScrollLeft();\n        const nextScrollAbsoluteTop = this.getScrollTop();\n\n        this._emitScrollEvent(nextScrollAbsoluteLeft, nextScrollAbsoluteTop, options?.zoom);\n\n        if (Math.round(prevScrollLeft) !== scrollLeft || Math.round(prevScrollTop) !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (\n                    scrollLeft !== Math.round(requestScrollLeft)\n                    || scrollTop !== Math.round(requestScrollTop)\n                ) {\n                    this._scrollTo(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    private _scrollToType(type: \"horizontal\" | \"vertical\", coord: number, isAbsolute?: boolean) {\n        const names = NAMES[type];\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n        } = this;\n        const prevScrollPos = this[`scroll${names.pos}`];\n        const [minCoord, maxCoord] = this[`getRange${names.coord}`](true, true);\n\n        let scrollPos = Math.round(prevScrollPos);\n\n        const scrollAreaSize = this[`getScrollArea${names.size}`]();\n        const zoom = this[`zoom${names.coord}`];\n\n        if (isAbsolute) {\n            coord = coord / zoom;\n        }\n        const zoomCoord = coord * zoom;\n\n        if (minCoord === maxCoord) {\n            scrollPos = minCoord;\n            coord = minCoord / zoom;\n        } else if (zoomCoord - threshold <= minCoord) {\n            const minThreshold = Math.max(0, zoomCoord - minCoord);\n\n            scrollPos = minThreshold;\n            coord = (minCoord + minThreshold) / zoom;\n        } else if (zoomCoord + threshold >= maxCoord) {\n            const maxThreshold = Math.max(0, maxCoord - zoomCoord);\n\n            scrollPos = scrollAreaSize - maxThreshold;\n            coord = (maxCoord - maxThreshold) / zoom;\n        } else if (scrollPos < threshold) {\n            scrollPos += margin;\n        } else if (scrollPos > scrollAreaSize - threshold) {\n            scrollPos -= margin;\n        }\n\n        scrollPos = Math.round(scrollPos);\n\n        this[`scroll${names.pos}`] = scrollPos;\n        this[`offset${names.coord}`] = coord - scrollPos / zoom;\n    }\n    private _getRangeCoord(type: \"vertical\" | \"horizontal\", isZoom?: boolean, isReal?: boolean) {\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold,\n        } = this;\n\n        const names = NAMES[type];\n        const rangeCoord = checkDefault(\n            this[`range${names.coord}`],\n            DEFAULT_OPTIONS[`range${names.coord}`],\n        );\n        const rangeOffsetCoord = checkDefault(\n            this[`rangeOffset${names.coord}`],\n            DEFAULT_OPTIONS[`rangeOffset${names.coord}`],\n        );\n        const zoom = this[`zoom${names.coord}`];\n        const range = getRange(\n            this[`getScroll${names.pos}`](),\n            margin,\n            rangeCoord,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return [\n                range[0] + rangeOffsetCoord[0],\n                range[1] + rangeOffsetCoord[1],\n            ];\n        }\n        return [\n            range[0] * zoom + rangeOffsetCoord[0],\n            range[1] * zoom + rangeOffsetCoord[1],\n            // Math.max(this[`viewport${names.size}`] * zoom - this[`container${names.size}`], range[1] * zoom + rangeOffsetCoord[1]),\n        ];\n    }\n    private _emitScrollEvent(scrollLeft: number, scrollTop: number, zoom?: boolean) {\n        const prevScrollLeft = this._asLeft;\n        const prevScrollTop = this._asTop;\n\n        if (!zoom && prevScrollLeft === scrollLeft && prevScrollTop === scrollTop) {\n            return;\n        }\n        this._asLeft = scrollLeft;\n        this._asTop = scrollTop;\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft,\n            scrollTop,\n            zoomX: this.zoomX,\n            zoomY: this.zoomY,\n        });\n    }\n    private _getScrollRangeX() {\n        const pos = this.getScrollLeft();\n        const startMargin =  Math.min(0, pos);\n        const endMargin = Math.max(0, pos);\n        const viewportSize = this.viewportScrollWidth;\n        const margin = Math.max(this.containerWidth / this.zoomX, viewportSize) - viewportSize;\n        const startSizeOffset = Math.min(0, margin + startMargin);\n\n        return [\n            startSizeOffset,\n            endMargin,\n        ];\n    }\n    private _getScrollRangeY() {\n        const pos = this.getScrollTop();\n        const startMargin =  Math.min(0, pos);\n        const endMargin = Math.max(0, pos);\n        const viewportSize = this.viewportScrollHeight;\n        const margin = Math.max(this.containerHeight / this.zoomY, viewportSize) - viewportSize;\n        const startSizeOffset = Math.min(0, margin + startMargin);\n\n        return [\n            startSizeOffset,\n            endMargin,\n        ];\n    }\n}\n\ninterface InfiniteViewer extends InfiniteViewerProperties { }\n\nexport default InfiniteViewer;\n"],"names":["DEFAULT_EASING","x","Math","pow","IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","SCROLL_BAR_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","zoomX","zoomY","rangeX","Infinity","rangeY","rangeOffsetX","rangeOffsetY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","useAutoZoom","useMouseDrag","pinchThreshold","cspNonce","maxPinchWheel","wheelScale","displayHorizontalScroll","displayVerticalScroll","useTransform","useWheelPinch","zoomRange","wheelPinchKey","useWheelScroll","zoomOffsetX","zoomOffsetY","translateZ","useGesture","useResizeObserver","pinchDirection","preventWheelClick","NAMES","horizontal","pos","coord","size","vertical","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArray","getDuration","speed","a","normalSpeed","sqrt","abs","v","checkDefault","value","defaultValue","startAnimation","callback","timerCallback","options","next","now","Date","t","startTime","ratio","easing","duration","prevRatio","prevTime","type","container","thumbElement","_super","isHorizontal","_this","e","delta","deltaX","deltaY","preventDefault","trigger","barElement","querySelector","document","createElement","insertBefore","isAppend","addClass","gesto","Gesto","window","on","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","thumbRect","getBoundingClientRect","pos1","thumbSize","clientPos","endPos","startPos","scrollSize","console","log","scrollBy","stopPropagation","addEvent","onWheel","passive","__extends","__proto","this","isDisplay","containerSize","scrollRange","startMargin","endMargin","scrollSizeOffset","display","_a","dirName1","sizeName","thumbPos","style","cssText","removeEvent","off","EventEmitter","_containerElement","viewportElement","containerWidth","containerHeight","_b","_viewportElement","viewportWidth","viewportHeight","viewportScrollWidth","viewportScrollHeight","max","render","_scrollBy","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","isKeydown","ctrlKey","sign","distance","min","scale","clearTimeout","_tempRectTimer","_tempRect","_triggerPinch","rotation","isWheel","clientX","clientY","ratioX","ratioY","shiftKey","_tempScale","_setClientRect","isFlag","Element","children","init","_wheelContainerElement","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","containerElement","_onDestroys","forEach","_onScroll","onGestureStart","onGestureChange","onGestureEnd","range","absolute","isObject","offsetY","getRangeY","offsetX","getRangeX","isZoom","_getScrollRangeX","_getScrollRangeY","resize","left","top","_pauseScrollAnimation","_startScrollAnimation","_scrollTo","y","deltaZoom","_pauseZoomAnimation","isArray","_startZoomAnimation","_setZoom","isReal","_getRangeCoord","observer_1","wheelContainerOption","firstChild","ScrollBar","inject","nonce","wheelContainer","wheelContainerElement","isString","Node","current","events","stop","isMouseEvent","dragFlag","startEvent","dt","time","prevSpeed","isPinch","movement","isDrag","isDouble","_startScrollAnimationBySpeed","startZoom","ResizeObserver","observe","push","disconnect","_c","_d","_e","nextOffsetX","nextOffsetY","viewportStyle","getScrollAreaWidth","getScrollAreaHeight","renderScroll","dest","distRatio","_zoomTimer","_scrollTimer","destPos","cancelAnimationFrame","event","_zoomByClient","between","rect","getContainer","width","height","originalZoomOffsetX","originalZoomOffsetY","zoomBase","zoomOptions","prevZoomX","prevZoomY","nextZoomX","nextZoomY","nextScrollLeft","nextScrollTop","zoomXPos","zoomYPos","convertUnitSize","prevScrollLeft","prevScrollTop","isAbsolute","_scrollToType","nextScrollAbsoluteLeft","nextScrollAbsoluteTop","_emitScrollEvent","round","move","requestScrollLeft","requestScrollTop","names","prevScrollPos","minCoord","maxCoord","scrollPos","scrollAreaSize","zoomCoord","maxThreshold","rangeCoord","rangeOffsetCoord","isFinite","floor","ceil","_asLeft","_asTop","viewportSize","prototype","property","attributes","enumerable","configurable","get","setter","set","Object","defineProperty","InfiniteViewer","modules"],"mappings":"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"}