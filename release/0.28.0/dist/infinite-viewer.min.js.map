{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/index.umd.ts","../src/InfiniteViewer.tsx","../src/InfiniteViewerManager.tsx"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    scrollbar-width: none;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.restrict-wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: calc(100% - 20px);\n    right: 10px;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: calc(100% - 20px);\n    bottom: 10px;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n    opacity: 0;\n}\n.scroll-bar:hover .scroll-thumb {\n    border-radius: 5px;\n    opacity: 1;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: opacity, margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: opacity, margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    zoomX: 1,\n    zoomY: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    rangeOffsetX: [0, 0],\n    rangeOffsetY: [0, 0],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    useAutoZoom: false,\n    useMouseDrag: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: Infinity,\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useTransform: true,\n    useWheelPinch: true,\n    zoomRange: [0.001, Infinity],\n    wheelPinchKey: \"ctrl\" as const,\n    useWheelScroll: IS_SAFARI,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: true,\n    useResizeObserver: false,\n    pinchDirection: \"all\" as const,\n    preventWheelClick: true,\n    useBounceScrollBar: false,\n    useOverflowScroll: false,\n};\n\nexport const DEFAULT_EASING = (x: number) => 1 - Math.pow(1 - x, 3);\nexport const NAMES = {\n    horizontal: {\n        pos: \"Left\",\n        coord: \"X\",\n        size: \"Width\",\n    },\n    vertical: {\n        pos: \"Top\",\n        coord: \"Y\",\n        size: \"Height\",\n    },\n} as const;\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"zoomX\",\n    \"zoomY\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n    \"pinchDirection\",\n    \"useOverflowScroll\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"preventWheelClick\",\n    \"useWheelPinch\",\n    \"useWheelScroll\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n    \"wheelContainer\",\n    \"useBounceScrollBar\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"getContainerWidth\",\n    \"getContainerHeight\",\n    \"getViewportWidth\",\n    \"getViewportHeight\",\n    \"getViewportScrollWidth\",\n    \"getViewportScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"zoomBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n    \"getZoom\",\n    \"getZoomX\",\n    \"getZoomY\",\n    \"getWheelContainer\",\n    \"setTo\",\n    \"setBy\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\nimport { AnimationOptions } from \"./types\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        -speed[0] / 2 * duration,\n        -speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n\n\nexport function checkDefault<T>(value: T | undefined | null, defaultValue: T): T {\n    return value != null ? value : defaultValue;\n}\n\n\n\nexport function startAnimation(\n    callback: (ratioDist: number) => void,\n    timerCallback: (next: () => void) => void,\n    options: AnimationOptions,\n) {\n    const duration = options.duration;\n    const easing = options.easing || ((x: number) => 1 - Math.pow(1 - x, 3));\n    const startTime = Date.now();\n    let prevTime = startTime;\n\n    const next = () => {\n        const now = Date.now();\n        let t = now - startTime;\n\n        if (duration < t) {\n            t = duration;\n        }\n        const ratio = easing(t / duration);\n        const prevRatio = easing((prevTime - startTime) / duration);\n\n        prevTime = now;\n\n        callback(ratio - prevRatio);\n\n        if (t >= duration) {\n            return;\n        }\n        timerCallback(next);\n    };\n    timerCallback(next);\n}\n","import Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent, throttle } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\nimport { abs } from \"./utils\";\n\nexport default class ScrollBar extends EventEmitter {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    public barElement!: HTMLElement;\n    protected gesto!: Gesto;\n    protected size: number = 0;\n    protected scrollSize: number = 0;\n    protected isHorizontal = false;\n\n    constructor(\n        public type: \"horizontal\" | \"vertical\",\n        container?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n        let thumbElement: HTMLElement;\n        let barElement: HTMLElement = container;\n\n        if (!container) {\n            barElement = document.createElement(\"div\");\n            thumbElement = document.createElement(\"div\");\n\n            barElement.insertBefore(thumbElement, null);\n            this.isAppend = true;\n        } else {\n            thumbElement = container.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        addClass(\n            barElement,\n            isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                : VERTICAL_SCROLL_BAR_CLASS_NAME,\n        );\n        addClass(barElement, SCROLL_BAR_CLASS_NAME);\n        addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n        this.thumbElement = thumbElement;\n        this.barElement = barElement;\n        this.isHorizontal = isHorizontal;\n        this.gesto = new Gesto(barElement, {\n            container: window,\n        }).on(\n            \"dragStart\",\n            e => this._onDragStart(e),\n        ).on(\n            \"drag\",\n            e => this._onDrag(e),\n        );\n        addEvent(this.barElement, \"wheel\", this._onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number, isAbsolute?: boolean) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: isAbsolute ? delta : this.scrollSize * ratio,\n        });\n    }\n    public render(\n        isDisplay: boolean,\n        pos: number,\n        size: number,\n        scrollSize: number,\n    ) {\n        this.size = size;\n        this.scrollSize = scrollSize;\n\n        const opacity = isDisplay && (throttle(scrollSize - size, 0.001) > 0) ? 1 : 0;\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n        const sizeP = size / scrollSize * 100;\n        const posP = Math.max(0, pos) / scrollSize * 100;\n\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${sizeP}%;opacity: ${opacity};`\n            + `transform: translate${dirName1}(${100 / sizeP * posP}%)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this._onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    protected _onDragStart = (e: OnDragStart<Gesto>) => {\n        const isHorizontal = this.isHorizontal;\n        const target = e.inputEvent.target;\n        const datas = e.datas;\n        const isThumb = this.thumbElement === target;\n\n        if (!isThumb) {\n            setTimeout(() => {\n                requestAnimationFrame(() => {\n                    const thumbRect = this.thumbElement.getBoundingClientRect();\n                    const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                    const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                    const pos2 = pos1 + thumbSize;\n                    const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                    if (pos1 <= clientPos && clientPos <= pos2) {\n                        return;\n                    }\n                    const size = this.size;\n                    const delta = size * size / this.scrollSize;\n\n                    this.scrollBy(pos1 < clientPos ? delta : -delta);\n                });\n            }, 100);\n        }\n        datas.isThumb = isThumb;\n        e.inputEvent.stopPropagation();\n        e.inputEvent.preventDefault();\n    }\n    protected _onDrag = (e: OnDrag) => {\n        if (!e.datas.isThumb) {\n            return;\n        }\n        this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY);\n    };\n    protected _onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewerManager from \"./InfiniteViewerManager\";\n\nexport default class InfiniteViewer extends InfiniteViewerManager {}\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass, convertUnitSize, between, isObject, isArray, isString } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, OnPinch, AnimationOptions, ScrollOptions, ZoomOptions, GetScollPosOptions, InnerScrollOptions, ScrollCenterOptions, SetOptions } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME, NAMES, DEFAULT_EASING,\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange, checkDefault, startAnimation } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private containerWidth: number = 0;\n    private containerHeight: number = 0;\n    private viewportWidth: number = 0;\n    private viewportHeight: number = 0;\n    private viewportScrollWidth: number = 0;\n    private viewportScrollHeight: number = 0;\n    private scrollLeft: number = 0;\n    private scrollTop: number = 0;\n    private _scrollTimer = 0;\n    private _zoomTimer = 0;\n\n    private _viewportElement: HTMLElement | null = null;\n    private _wheelContainerElement: HTMLElement | null = null;\n    private dragFlag: boolean = false;\n    private isLoop: boolean = false;\n    private _tempScale: number[] = [1, 1];\n    private _tempRect: { top: number, left: number, width: number, height: number } | null = null;\n    private _tempRectTimer: number | null = null;\n    private _onDestroys: Array<() => void> = [];\n    private _asLeft = 0;\n    private _asTop = 0;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private _containerElement: HTMLElement,\n        viewportElement: HTMLElement | Partial<InfiniteViewerOptions> = {},\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n\n\n        if (viewportElement instanceof Element) {\n            this._viewportElement = viewportElement;\n            this.options = {\n                ...DEFAULT_OPTIONS,\n                ...options,\n            };\n        } else {\n            this._viewportElement = _containerElement.children[0] as HTMLElement;\n            this.options = {\n                ...DEFAULT_OPTIONS,\n                ...viewportElement,\n            };\n        }\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this._containerElement;\n    }\n    /**\n     * Get Wheel Container Element\n     */\n    public getWheelContainer(): HTMLElement {\n        return this._wheelContainerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this._viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Get Scroll Area Element\n     */\n    public geScrollArea(): HTMLElement {\n        return this.scrollAreaElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this._containerElement;\n\n        this._onDestroys.forEach(callback => {\n            callback();\n        });\n        removeEvent(this.wrapperElement, \"scroll\", this._onScroll);\n        removeEvent(this._wheelContainerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"gesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n        removeEvent(containerElement, \"gesturesend\", this.onGestureEnd);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this._containerElement = null;\n        this._viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollTop(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomY;\n        const pos = this.scrollTop / zoom + this.offsetY\n            + (range ? abs(this.getRangeY()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollLeft(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomX;\n        const pos = this.scrollLeft / zoom + this.offsetX\n            + (range ? abs(this.getRangeX()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this._getScrollRangeX();\n        const zoom = this.zoomX;\n        const size = this.containerWidth / zoom + abs(range[0]) + range[1];\n\n        return isZoom ? size : size * zoom;\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this._getScrollRangeY();\n        const zoom = this.zoomY;\n        const size = this.containerHeight / zoom + abs(range[0]) + range[1];\n\n        return isZoom ? size : size * zoom;\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter(options: ScrollCenterOptions = {}) {\n        this.resize();\n\n        const zoomX = this.zoomX;\n        const zoomY = this.zoomY;\n\n        let left = -(this.containerWidth / zoomX - this.viewportWidth) / 2;\n        let top = -(this.containerHeight / zoomY - this.viewportHeight) / 2;\n\n        if (options.absolute) {\n            left *= zoomX;\n            top *= zoomY;\n        }\n        if (options.horizontal === false) {\n            left = this.getScrollLeft();\n        }\n        if (options.vertical === false) {\n            top = this.getScrollTop();\n        }\n\n        return this.scrollTo(left, top, options);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this._containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n            scrollWidth: viewportScrollWidth,\n            scrollHeight: viewportScrollHeight,\n        } = this._viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n        this.viewportScrollWidth = Math.max(viewportWidth, viewportScrollWidth);\n        this.viewportScrollHeight = Math.max(viewportHeight, viewportScrollHeight);\n\n        this.render();\n        this._scrollBy(0, 0);\n    }\n    /**\n     * Move to that position or zoom.\n     * @since 0.25.0\n     */\n    public setTo(options: SetOptions) {\n        const {\n            x = this.getScrollLeft(),\n            y = this.getScrollTop(),\n            zoom = [this.getZoomX(), this.getZoomY()],\n            duration,\n        } = options;\n        const {\n            zoomX: prevZoomX,\n            zoomY: prevZoomY,\n            zoomRange,\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n        if (\"zoomOffsetX\" in options) {\n            zoomOffsetX = options.zoomOffsetX;\n        }\n        if (\"zoomOffsetY\" in options) {\n            zoomOffsetY = options.zoomOffsetY;\n        }\n\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n        const nextZoomX = between(zoomX, zoomRange[0], zoomRange[1]);\n        const nextZoomY = between(zoomY, zoomRange[0], zoomRange[1]);\n        const zoomXPos = convertUnitSize(`${zoomOffsetX}`, this.viewportWidth) * (1 / prevZoomX - 1 / nextZoomX);\n        const zoomYPos = convertUnitSize(`${zoomOffsetY}`, this.viewportHeight) * (1 / prevZoomY - 1 / nextZoomY);\n\n        this.scrollTo(x - zoomXPos, y - zoomYPos, {\n            duration,\n        });\n        this.setZoom(zoom, {\n            zoomOffsetX,\n            zoomOffsetY,\n            duration,\n            zoomBase: \"fixed\",\n        });\n    }\n    /**\n     * Move by the position or zoom delta value.\n     * @since 0.25.0\n     */\n    public setBy(options: SetOptions) {\n        const {\n            x = 0,\n            y = 0,\n            zoom = [0, 0],\n        } = options;\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n\n        this.setTo({\n            ...options,\n            x: this.getScrollLeft() + x,\n            y: this.getScrollTop() + y,\n            zoom: [this.zoomX + zoomX, this.zoomY + zoomY],\n        });\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n        } else {\n            this._startScrollAnimation([deltaX, deltaY], options);\n            return true;\n        }\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            return this._scrollTo(x, y, options);\n        } else {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this.scrollBy(x - scrollLeft, y - scrollTop, options);\n        }\n    }\n    /**\n     * Set viewer zoom by the given amount\n     */\n    public zoomBy(deltaZoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n        const [deltaX, deltaY] = isArray(deltaZoom)\n        ? deltaZoom\n        : [deltaZoom, deltaZoom];\n\n        if (!options || !options.duration) {\n            this._setZoom([\n                this.zoomX + deltaX,\n                this.zoomY + deltaY,\n            ], options);\n        } else {\n            this._startZoomAnimation([deltaX, deltaY], options);\n        }\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n\n        if (!options || !options.duration) {\n            this._setZoom(zoom, options);\n        } else {\n            const [zoomX, zoomY] = isArray(zoom)\n            ? zoom\n            : [zoom, zoom];\n            this._startZoomAnimation([\n                zoomX - this.zoomX,\n                zoomY - this.zoomY,\n            ], options);\n        }\n    }\n    public getViewportWidth() {\n        return this.viewportWidth;\n    }\n    public getViewportHeight() {\n        return this.viewportWidth;\n    }\n    public getViewportScrollWidth() {\n        return this.viewportScrollWidth;\n    }\n    public getViewportScrollHeight() {\n        return this.viewportScrollHeight;\n    }\n    public getContainerWidth() {\n        return this.containerWidth;\n    }\n    public getContainerHeight() {\n        return this.containerHeight;\n    }\n    /**\n     * Get viewer zoom\n     */\n    public getZoom() {\n        return (this.zoomX + this.zoomY) / 2;\n    }\n    /**\n     * Get viewer zoomX\n     * @since 0.20.0\n     */\n    public getZoomX() {\n        return this.zoomX;\n    }\n    /**\n     * Get viewer zoom\n     * @since 0.20.0\n     */\n    public getZoomY() {\n        return this.zoomY;\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"horizontal\", isZoom, isReal);\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"vertical\", isZoom, isReal);\n    }\n\n    private init() {\n        // infinite-viewer(container)\n        // viewportㅌ\n        // children\n        const containerElement = this._containerElement;\n        const options = this.options;\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (!wrapperElement) {\n            wrapperElement = document.createElement(\"div\");\n            wrapperElement.insertBefore(this._viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n        }\n        this.wrapperElement = wrapperElement;\n\n        if (!scrollAreaElement) {\n            scrollAreaElement = document.createElement(\"div\");\n\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n        }\n        this.scrollAreaElement = scrollAreaElement;\n\n        addClass(containerElement, CLASS_NAME);\n        addClass(wrapperElement, WRAPPER_CLASS_NAME);\n        // addClass(restrictElement, RESTRICT_WRAPPER_CLASS_NAME);\n        addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n\n        const horizontalBar = new ScrollBar(\n            \"horizontal\",\n            horizontalScrollElement,\n        );\n        const verticalBar = new ScrollBar(\n            \"vertical\",\n            verticalScrollElement,\n        );\n\n\n        this.horizontalScrollbar = horizontalBar;\n        this.verticalScrollbar = verticalBar;\n        horizontalBar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoomX, 0);\n        });\n        verticalBar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoomY);\n        });\n\n        if (horizontalBar.isAppend) {\n            containerElement.insertBefore(horizontalBar.barElement, null);\n        }\n        if (verticalBar.isAppend) {\n            containerElement.insertBefore(verticalBar.barElement, null);\n        }\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n\n        const wheelContainerOption = options.wheelContainer;\n        let wheelContainerElement: HTMLElement | null = null;\n\n        if (wheelContainerOption) {\n            if (isString(wheelContainerOption)) {\n                wheelContainerElement = document.querySelector(wheelContainerOption);\n            } else if (wheelContainerOption instanceof Node) {\n                wheelContainerElement = wheelContainerOption;\n            } else if (\"value\" in wheelContainerOption || \"current\" in wheelContainerOption) {\n                wheelContainerElement = wheelContainerOption.current || wheelContainerOption.value;\n            }\n        }\n        wheelContainerElement ||= containerElement;\n        this._wheelContainerElement = wheelContainerElement;\n\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * The pinchStart and abortPinch events do not occur when pinching through the wheel.\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: window,\n            events: [\"touch\", \"mouse\"],\n            preventWheelClick: this.options.preventWheelClick ?? true,\n        }).on(\"dragStart\", e => {\n            const {\n                inputEvent,\n                stop,\n                datas,\n            } = e;\n            if (!this.useMouseDrag && e.isMouseEvent) {\n                stop();\n                return;\n            }\n            this._pauseScrollAnimation();\n            this.dragFlag = false;\n            const result = this.trigger(\"dragStart\", e);\n\n            if (result === false) {\n                stop();\n                return;\n            }\n            inputEvent.preventDefault();\n            datas.startEvent = inputEvent;\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch || (this.useMouseDrag && e.isMouseEvent)) {\n                this.trigger(\"drag\", {\n                    ...e,\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                this.scrollBy(-e.deltaX / this.zoomX, -e.deltaY / this.zoomY);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this._startScrollAnimationBySpeed(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this._pauseScrollAnimation();\n            datas.startZoom = [this.zoomX, this.zoomY];\n\n            const result = this.trigger(\"pinchStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n            this._setClientRect();\n        }).on(\"pinch\", e => {\n            const scale = e.scale;\n            const pinchDirection = this.options.pinchDirection;\n\n            this._triggerPinch({\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                inputEvent: e.inputEvent,\n                isWheel: false,\n                zoom: e.datas.startZoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        }).on(\"pinchEnd\", () => {\n            this._tempRect = null;\n        });\n\n        addEvent(wrapperElement, \"scroll\", this._onScroll);\n\n        if (options.useResizeObserver) {\n            const observer = new ResizeObserver(() => {\n                this.resize();\n            });\n\n            observer.observe(this._viewportElement);\n            observer.observe(this._containerElement);\n\n\n            this._onDestroys.push(() => {\n                observer.disconnect();\n            });\n        } else {\n            addEvent(window, \"resize\", this.resize);\n\n            this._onDestroys.push(() => {\n                removeEvent(window, \"resize\", this.resize);\n            })\n        }\n\n        if (options.useWheelPinch || options.useWheelScroll) {\n            addEvent(wheelContainerElement, \"wheel\", this.onWheel, {\n                passive: false,\n            });\n        }\n        if (options.useGesture) {\n            addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n                passive: false,\n            });\n            addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n                passive: false,\n            });\n        }\n        this.resize();\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoomX = DEFAULT_OPTIONS.zoomX,\n            zoomY = DEFAULT_OPTIONS.zoomY,\n            translateZ = 0,\n            rangeX,\n            rangeY,\n            containerWidth,\n            containerHeight,\n        } = this;\n        const {\n            useTransform = DEFAULT_OPTIONS.useTransform,\n        } = this.options;\n        let nextOffsetX = -offsetX * zoomX;\n        let nextOffsetY = -offsetY * zoomY;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n\n        const viewportStyle = this._viewportElement.style;\n\n        if (useTransform === false) {\n            viewportStyle.cssText += `position: relative; left: ${nextOffsetX}px; top: ${nextOffsetY}px; `;\n\n            // if (restrictOffsetX || restrictOffsetY) {\n            //     viewportStyle.cssText += `position: relative; left: ${restrictOffsetX}px; top: ${restrictOffsetY}px`;\n            // }\n        } else {\n            viewportStyle.cssText += `transform-origin: 0 0;`\n                + `transform:translate3d(${nextOffsetX}px, ${nextOffsetY}px, ${translateZ}px) scale(${zoomX}, ${zoomY});`;\n\n            // if (restrictOffsetX || restrictOffsetY) {\n            //     viewportStyle.cssText += `transform:translate3d(${restrictOffsetX}px, ${restrictOffsetY}px, 0px)`;\n            // }\n        }\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            zoomX,\n            zoomY,\n            containerWidth,\n            containerHeight,\n        } = this;\n        const horizontalBar = this.horizontalScrollbar;\n        const verticalBar = this.verticalScrollbar;\n\n        if (this.options.useBounceScrollBar) {\n            const scrollLeft = this.getScrollLeft(true) * zoomX;\n            const rangeX = this.getRangeX(true);\n            const scrollWidth =  containerWidth + abs(rangeX[0]) + abs(rangeX[1]);\n            const scrollTop = this.getScrollTop(true) * zoomY;\n            const rangeY = this.getRangeY(true);\n            const scrollHeight =  containerHeight + abs(rangeY[0]) + abs(rangeY[1]);\n\n            horizontalBar.render(\n                this.displayHorizontalScroll,\n                scrollLeft,\n                containerWidth,\n                scrollWidth,\n            );\n            verticalBar.render(\n                this.displayVerticalScroll,\n                scrollTop,\n                containerHeight,\n                scrollHeight,\n            );\n        } else {\n            const scrollRangeX = this._getScrollRangeX();\n            const scrollRangeY = this._getScrollRangeY();\n            const scrollLeft = this.getScrollLeft();\n            const scrollTop = this.getScrollTop();\n            const scrollWidth = this.containerWidth + abs(scrollRangeX[0]) + scrollRangeX[1];\n            const scrollHeight = this.containerHeight + abs(scrollRangeY[0]) + scrollRangeY[1];\n\n            horizontalBar.render(\n                this.displayHorizontalScroll,\n                scrollLeft - scrollRangeX[0],\n                containerWidth,\n                scrollWidth,\n            );\n            verticalBar.render(\n                this.displayVerticalScroll,\n                scrollTop - scrollRangeY[0],\n                containerHeight,\n                scrollHeight,\n            );\n        }\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private _onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const options = this.options;\n        const pinchDirection = options.pinchDirection;\n        const maxPinchWheel = options.maxPinchWheel || Infinity;\n\n        const isKeydown = e[`${this.wheelPinchKey}Key`] || e.ctrlKey;\n\n        if (options.useWheelPinch && isKeydown) {\n            let deltaY = e.deltaY;\n            const sign = deltaY >= 0 ? 1 : -1;\n            const distance = Math.min(maxPinchWheel, Math.abs(deltaY));\n\n\n            deltaY = sign * distance;\n            const delta = -deltaY;\n            const scale = Math.max(1 + delta * (options.wheelScale || 0.01), TINY_NUM);\n\n            clearTimeout(this._tempRectTimer);\n            this._tempRectTimer = window.setTimeout(() => {\n                this._tempRect = null;\n            }, 100);\n            this._triggerPinch({\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                inputEvent: e,\n                isWheel: true,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        } else if (options.useWheelScroll) {\n            let deltaX = e.deltaX;\n            let deltaY = e.deltaY;\n\n            if (e.shiftKey && !deltaX) {\n                deltaX = deltaY;\n                deltaY = 0;\n            }\n            this.scrollBy(deltaX / this.zoomX, deltaY / this.zoomY);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this._tempScale = [this.zoomX, this.zoomY];\n        this._setClientRect();\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this._tempScale) {\n            this._tempScale =  [1, 1];\n            return;\n        }\n        const scale = e.scale;\n        const zoomX = this._tempScale[0];\n        const zoomY = this._tempScale[1];\n        const pinchDirection = this.options.pinchDirection;\n\n        this._triggerPinch({\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            inputEvent: e,\n            isWheel: true,\n            zoom: (zoomX + zoomY) * scale / 2,\n            zoomX: zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n            zoomY: zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ratioX: 0,\n            ratioY: 0,\n        });\n    }\n    private onGestureEnd = () => {\n\n    }\n    private _startZoomAnimation(dest: number[], options: ZoomOptions) {\n        if (!dest) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._setZoom(\n                [\n                    this.zoomX + dest[0] * distRatio,\n                    this.zoomY + dest[1] * distRatio,\n                ],\n                options,\n            ),\n            next => {\n                this._zoomTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimation(dest: number[], options: AnimationOptions) {\n        if (!dest[0] && !dest[1]) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._scrollBy(\n                dest[0] * distRatio,\n                dest[1] * distRatio,\n                options,\n            ),\n            next => {\n                this._scrollTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimationBySpeed(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n\n        return this._startScrollAnimation(destPos, {\n            duration,\n        })\n\n    }\n    private _pauseScrollAnimation() {\n        cancelAnimationFrame(this._scrollTimer);\n        this._scrollTimer = 0;\n    }\n    private _pauseZoomAnimation() {\n        cancelAnimationFrame(this._zoomTimer);\n        this._zoomTimer = 0;\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private _triggerPinch(event: OnPinch) {\n        const {\n            clientX,\n            clientY,\n            zoomX,\n            zoomY,\n        } = event;\n        if (this.useAutoZoom) {\n            this._zoomByClient([zoomX, zoomY], clientX, clientY);\n        }\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const zoomRange = this.zoomRange;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const ratioX = (clientX - left) / width * 100;\n        const ratioY = (clientY - top) / height * 100;\n\n        this.trigger(\"pinch\", {\n            ...event,\n            zoom: between((zoomX + zoomY) / 2, zoomRange[0], zoomRange[1]),\n            zoomX: between(zoomX, zoomRange[0], zoomRange[1]),\n            zoomY: between(zoomY, zoomRange[0], zoomRange[1]),\n            ratioX,\n            ratioY,\n        });\n    }\n    private _setClientRect() {\n        const rect = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: rect.left,\n            top: rect.top,\n            width: rect.width,\n            height: rect.height,\n        };\n    }\n    private _zoomByClient(zoom: number[], clientX: number, clientY: number) {\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const options = this.options;;\n\n        const originalZoomOffsetX = options.zoomOffsetX;\n        const originalZoomOffsetY = options.zoomOffsetY;\n\n        options.zoomOffsetX = `${(clientX - left) / width * 100}%`;\n        options.zoomOffsetY = `${(clientY - top) / height * 100}%`;\n\n        this._setZoom(zoom, {\n            zoomBase: \"screen\",\n        });\n\n        options.zoomOffsetX = originalZoomOffsetX;\n        options.zoomOffsetY = originalZoomOffsetY;\n    }\n    private _setZoom(\n        zoom: number | number[],\n        zoomOptions: ZoomOptions = {},\n    ) {\n        const zoomBase = zoomOptions.zoomBase;\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX: prevZoomX,\n            zoomY: prevZoomY,\n            zoomRange\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n        if (\"zoomOffsetX\" in zoomOptions) {\n            zoomOffsetX = zoomOptions.zoomOffsetX;\n        }\n        if (\"zoomOffsetY\" in zoomOptions) {\n            zoomOffsetY = zoomOptions.zoomOffsetY;\n        }\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n        const nextZoomX = between(zoomX, zoomRange[0], zoomRange[1]);\n        const nextZoomY = between(zoomY, zoomRange[0], zoomRange[1]);\n        const options = this.options;\n\n        options.zoomX = nextZoomX;\n        options.zoomY = nextZoomY;\n        options.zoom = (nextZoomX + nextZoomY) / 2;\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n\n        let zoomXPos = 0;\n        let zoomYPos = 0;\n\n        if (zoomBase === \"fixed\") {\n            zoomXPos = convertUnitSize(`${zoomOffsetX}`, this.viewportWidth);\n            zoomYPos = convertUnitSize(`${zoomOffsetY}`, this.viewportHeight);\n        } else if (zoomBase === \"viewport\") {\n            zoomXPos = (-scrollLeft + convertUnitSize(`${zoomOffsetX}`, this.viewportWidth)) * prevZoomX;\n            zoomYPos = (-scrollTop + convertUnitSize(`${zoomOffsetY}`, this.viewportHeight)) * prevZoomY;\n        } else {\n            zoomXPos = convertUnitSize(`${zoomOffsetX}`, containerWidth);\n            zoomYPos = convertUnitSize(`${zoomOffsetY}`, containerHeight);\n        }\n\n        const centerX = scrollLeft + zoomXPos / prevZoomX;\n        const centerY = scrollTop + zoomYPos / prevZoomY;\n\n        const nextCenterX = nextScrollLeft + zoomXPos / nextZoomX;\n        const nextCenterY = nextScrollTop + zoomYPos / nextZoomY;\n\n        this._scrollBy(\n            centerX - nextCenterX,\n            centerY - nextCenterY,\n            {\n                zoom: !!(nextZoomX - prevZoomX || nextZoomY - prevZoomY),\n            },\n        );\n        this.render();\n    }\n    private _scrollBy(deltaX: number, deltaY: number, options?: InnerScrollOptions) {\n        let scrollLeft = this.getScrollLeft();\n        let scrollTop = this.getScrollTop();\n\n        if (options?.absolute) {\n            scrollLeft *= this.zoomX;\n            scrollTop *= this.zoomY;\n        }\n        return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n    }\n    private _scrollTo(x: number, y: number, options?: InnerScrollOptions) {\n        const {\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n\n        const isAbsolute = options?.absolute;\n        this._scrollToType(\"horizontal\", x, isAbsolute);\n        this._scrollToType(\"vertical\", y, isAbsolute);\n\n        const scrollLeft = this.scrollLeft;\n        const scrollTop = this.scrollTop;\n        this.render();\n        const nextScrollAbsoluteLeft = this.getScrollLeft();\n        const nextScrollAbsoluteTop = this.getScrollTop();\n\n        this._emitScrollEvent(nextScrollAbsoluteLeft, nextScrollAbsoluteTop, options?.zoom);\n\n        if (Math.round(prevScrollLeft) !== scrollLeft || Math.round(prevScrollTop) !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (\n                    scrollLeft !== Math.round(requestScrollLeft)\n                    || scrollTop !== Math.round(requestScrollTop)\n                ) {\n                    this._scrollTo(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    private _scrollToType(type: \"horizontal\" | \"vertical\", coord: number, isAbsolute?: boolean) {\n        const names = NAMES[type];\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n        } = this;\n        const prevScrollPos = this[`scroll${names.pos}`];\n        const [minCoord, maxCoord] = this[`getRange${names.coord}`](true, true);\n\n        let scrollPos = Math.round(prevScrollPos);\n\n        const scrollAreaSize = this[`getScrollArea${names.size}`]();\n        const zoom = this[`zoom${names.coord}`];\n\n        if (isAbsolute) {\n            coord = coord / zoom;\n        }\n        const zoomCoord = coord * zoom;\n\n        if (minCoord === maxCoord) {\n            scrollPos = minCoord;\n            coord = minCoord / zoom;\n        } else if (zoomCoord - threshold <= minCoord) {\n            const minThreshold = Math.max(0, zoomCoord - minCoord);\n\n            scrollPos = minThreshold;\n            coord = (minCoord + minThreshold) / zoom;\n        } else if (zoomCoord + threshold >= maxCoord) {\n            const maxThreshold = Math.max(0, maxCoord - zoomCoord);\n\n            scrollPos = scrollAreaSize - maxThreshold;\n            coord = (maxCoord - maxThreshold) / zoom;\n        } else if (scrollPos < threshold) {\n            scrollPos += margin;\n        } else if (scrollPos > scrollAreaSize - threshold) {\n            scrollPos -= margin;\n        }\n\n        scrollPos = Math.round(scrollPos);\n\n        this[`scroll${names.pos}`] = scrollPos;\n        this[`offset${names.coord}`] = coord - scrollPos / zoom;\n    }\n    private _getRangeCoord(type: \"vertical\" | \"horizontal\", isZoom?: boolean, isReal?: boolean) {\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold,\n        } = this;\n\n        const names = NAMES[type];\n        const rangeCoord = checkDefault(\n            this[`range${names.coord}`],\n            DEFAULT_OPTIONS[`range${names.coord}`],\n        );\n        const rangeOffsetCoord = checkDefault(\n            this[`rangeOffset${names.coord}`],\n            DEFAULT_OPTIONS[`rangeOffset${names.coord}`],\n        );\n        const zoom = this[`zoom${names.coord}`];\n        const range = getRange(\n            this[`getScroll${names.pos}`](),\n            margin,\n            rangeCoord,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return [\n                range[0] + rangeOffsetCoord[0],\n                range[1] + rangeOffsetCoord[1],\n            ];\n        }\n        return [\n            range[0] * zoom + rangeOffsetCoord[0],\n            this.options.useOverflowScroll\n                ? Math.max(this[`viewport${names.size}`] * zoom - this[`container${names.size}`], range[1] * zoom + rangeOffsetCoord[1])\n                : range[1] * zoom + rangeOffsetCoord[1],\n        ];\n    }\n    private _emitScrollEvent(scrollLeft: number, scrollTop: number, zoom?: boolean) {\n        const prevScrollLeft = this._asLeft;\n        const prevScrollTop = this._asTop;\n\n        if (!zoom && prevScrollLeft === scrollLeft && prevScrollTop === scrollTop) {\n            return;\n        }\n        this._asLeft = scrollLeft;\n        this._asTop = scrollTop;\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft,\n            scrollTop,\n            zoomX: this.zoomX,\n            zoomY: this.zoomY,\n        });\n    }\n    private _getScrollRangeX() {\n        const pos = this.getScrollLeft();\n        const rangeX = this.rangeX;\n        const startRange = rangeX[0];\n        let endRange = rangeX[1];\n\n        if (this.useOverflowScroll && isFinite(endRange)) {\n            endRange = Math.max(endRange, this.viewportWidth - this.containerWidth / this.zoomX);\n        }\n\n        const startMargin = Math.min(0, isFinite(startRange) ? Math.min(startRange, pos) : pos);\n        const endMargin = Math.max(0, isFinite(endRange) ? Math.max(endRange, pos) : pos);\n        const viewportSize = this.viewportScrollWidth;\n        const margin = Math.max(this.containerWidth / this.zoomX, viewportSize) - viewportSize;\n        const startSizeOffset = Math.min(0, margin + startMargin);\n\n        return [\n            startSizeOffset,\n            endMargin,\n        ];\n    }\n    private _getScrollRangeY() {\n        const pos = this.getScrollTop();\n        const rangeY = this.rangeY;\n        const startRange = rangeY[0];\n        let endRange = rangeY[1];\n\n        if (this.useOverflowScroll && isFinite(endRange)) {\n            endRange = Math.max(endRange, this.viewportHeight - this.containerHeight / this.zoomY);\n        }\n\n        const startMargin = Math.min(0, isFinite(startRange) ? Math.min(startRange, pos) : pos);\n        const endMargin = Math.max(0, isFinite(endRange) ? Math.max(endRange, pos) : pos);\n        const viewportSize = this.viewportScrollHeight;\n        const margin = Math.max(this.containerHeight / this.zoomY, viewportSize) - viewportSize;\n        const startSizeOffset = Math.min(0, margin + startMargin);\n\n        return [\n            startSizeOffset,\n            endMargin,\n        ];\n    }\n}\n\ninterface InfiniteViewer extends InfiniteViewerProperties { }\n\nexport default InfiniteViewer;\n"],"names":["DEFAULT_EASING","x","Math","pow","IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","SCROLL_BAR_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","zoomX","zoomY","rangeX","Infinity","rangeY","rangeOffsetX","rangeOffsetY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","useAutoZoom","useMouseDrag","pinchThreshold","cspNonce","maxPinchWheel","wheelScale","displayHorizontalScroll","displayVerticalScroll","useTransform","useWheelPinch","zoomRange","wheelPinchKey","useWheelScroll","zoomOffsetX","zoomOffsetY","translateZ","useGesture","useResizeObserver","pinchDirection","preventWheelClick","useBounceScrollBar","useOverflowScroll","NAMES","horizontal","pos","coord","size","vertical","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArray","getDuration","speed","a","normalSpeed","sqrt","abs","v","checkDefault","value","defaultValue","startAnimation","callback","timerCallback","options","next","now","Date","t","startTime","ratio","easing","duration","prevRatio","prevTime","type","container","thumbElement","_super","isHorizontal","_this","e","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","thumbRect","getBoundingClientRect","pos1","pos2","clientPos","delta","scrollSize","scrollBy","stopPropagation","preventDefault","deltaX","deltaY","trigger","barElement","querySelector","document","createElement","insertBefore","isAppend","addClass","gesto","Gesto","window","on","_onDragStart","_onDrag","addEvent","_onWheel","passive","__extends","__proto","isAbsolute","this","isDisplay","opacity","_a","dirName1","sizeName","sizeP","posP","max","style","cssText","removeEvent","off","EventEmitter","_containerElement","viewportElement","containerWidth","containerHeight","_b","_viewportElement","viewportWidth","viewportHeight","viewportScrollWidth","viewportScrollHeight","render","_scrollBy","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","isKeydown","ctrlKey","sign","distance","min","scale","clearTimeout","_tempRectTimer","_tempRect","_triggerPinch","rotation","isWheel","clientX","clientY","ratioX","ratioY","shiftKey","_tempScale","_setClientRect","isFlag","Element","children","init","_wheelContainerElement","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","containerElement","_onDestroys","forEach","_onScroll","onWheel","onGestureStart","onGestureChange","onGestureEnd","range","absolute","isObject","offsetY","getRangeY","offsetX","getRangeX","isZoom","_getScrollRangeX","_getScrollRangeY","resize","left","top","y","_c","getZoomX","getZoomY","prevZoomX","prevZoomY","_f","_g","_h","isArray","nextZoomX","between","nextZoomY","zoomXPos","convertUnitSize","zoomYPos","setZoom","zoomBase","_d","setTo","_pauseScrollAnimation","_startScrollAnimation","_scrollTo","deltaZoom","_pauseZoomAnimation","_startZoomAnimation","_setZoom","isReal","_getRangeCoord","observer_1","horizontalBar","firstChild","ScrollBar","verticalBar","wheelContainerOption","inject","nonce","wheelContainer","wheelContainerElement","isString","Node","current","events","stop","isMouseEvent","dragFlag","startEvent","dt","time","prevSpeed","isPinch","movement","isDrag","isDouble","_startScrollAnimationBySpeed","startZoom","ResizeObserver","observe","push","disconnect","_e","nextOffsetX","nextOffsetY","viewportStyle","getScrollAreaWidth","getScrollAreaHeight","renderScroll","scrollWidth","scrollHeight","scrollRangeX","scrollRangeY","dest","distRatio","_zoomTimer","_scrollTimer","destPos","cancelAnimationFrame","event","_zoomByClient","rect","getContainer","width","height","originalZoomOffsetX","originalZoomOffsetY","zoomOptions","nextScrollLeft","nextScrollTop","prevScrollLeft","prevScrollTop","_scrollToType","nextScrollAbsoluteLeft","nextScrollAbsoluteTop","_emitScrollEvent","round","move","requestScrollLeft","requestScrollTop","names","prevScrollPos","minCoord","maxCoord","scrollPos","scrollAreaSize","zoomCoord","maxThreshold","rangeCoord","rangeOffsetCoord","isFinite","floor","ceil","_asLeft","_asTop","startRange","endRange","startMargin","endMargin","viewportSize","prototype","property","attributes","enumerable","configurable","get","setter","set","Object","defineProperty","InfiniteViewer","modules"],"mappings":"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"}