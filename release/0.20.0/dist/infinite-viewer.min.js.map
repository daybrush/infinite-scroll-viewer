{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/index.umd.ts","../src/InfiniteViewer.tsx","../src/InfiniteViewerManager.tsx"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: 100%;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: 100%;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n    border-radius: 5px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n    border-radius: 5px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    zoomX: 1,\n    zoomY: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    rangeOffsetX: [0, 0],\n    rangeOffsetY: [0, 0],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    useAutoZoom: false,\n    useMouseDrag: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: Infinity,\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useTransform: true,\n    useWheelPinch: true,\n    zoomRange: [0.001, Infinity],\n    wheelPinchKey: \"ctrl\" as const,\n    useWheelScroll: IS_SAFARI,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: true,\n    useResizeObserver: false,\n    pinchDirection: \"all\" as const,\n};\n\nexport const DEFAULT_EASING = (x: number) => 1 - Math.pow(1 - x, 3);\nexport const NAMES = {\n    horizontal: {\n        pos: \"Left\",\n        coord: \"X\",\n        size: \"Width\",\n    },\n    vertical: {\n        pos: \"Top\",\n        coord: \"Y\",\n        size: \"Height\",\n    },\n} as const;\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"zoomX\",\n    \"zoomY\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"useWheelScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n    \"pinchDirection\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"useWheel\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"zoomBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n    \"getZoom\",\n    \"getZoomX\",\n    \"getZoomY\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\nimport { AnimationOptions } from \"./types\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        -speed[0] / 2 * duration,\n        -speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n\n\nexport function checkDefault<T>(value: T | undefined | null, defaultValue: T): T {\n    return value != null ? value : defaultValue;\n}\n\n\n\nexport function startAnimation(\n    callback: (ratioDist: number) => void,\n    timerCallback: (next: () => void) => void,\n    options: AnimationOptions,\n) {\n    const duration = options.duration;\n    const easing = options.easing || ((x: number) => 1 - Math.pow(1 - x, 3));\n    const startTime = Date.now();\n    let prevTime = startTime;\n\n    const next = () => {\n        const now = Date.now();\n        let t = now - startTime;\n\n        if (duration < t) {\n            t = duration;\n        }\n        const ratio = easing(t / duration);\n        const prevRatio = easing((prevTime - startTime) / duration);\n\n        prevTime = now;\n\n        callback(ratio - prevRatio);\n\n        if (t >= duration) {\n            return;\n        }\n        timerCallback(next);\n    };\n    timerCallback(next);\n}\n","import Gesto from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\n\nexport default class ScrollBar extends EventEmitter {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    public barElement!: HTMLElement;\n    private gesto!: Gesto;\n    private pos: number = 0;\n    private size: number = 0;\n    private scrollSize: number = 0;\n    private isHorizontal = false;\n\n    constructor(\n        private type: \"horizontal\" | \"vertical\",\n        container?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n        let thumbElement: HTMLElement;\n        let barElement: HTMLElement = container;\n\n        if (!container) {\n            barElement = document.createElement(\"div\");\n            thumbElement = document.createElement(\"div\");\n\n            barElement.insertBefore(thumbElement, null);\n            this.isAppend = true;\n        } else {\n            thumbElement = container.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        addClass(\n            barElement,\n            isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                : VERTICAL_SCROLL_BAR_CLASS_NAME,\n        );\n        addClass(barElement, SCROLL_BAR_CLASS_NAME);\n        addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n        this.thumbElement = thumbElement;\n        this.barElement = barElement;\n        this.isHorizontal = isHorizontal;\n        this.gesto = new Gesto(barElement, {\n            container: window,\n        }).on(\"dragStart\", e => {\n            const target = e.inputEvent.target;\n            const datas = e.datas;\n            const isThumb = this.thumbElement === target;\n\n            if (!isThumb) {\n                setTimeout(() => {\n                    requestAnimationFrame(() => {\n                        const thumbRect = this.thumbElement.getBoundingClientRect();\n                        const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                        const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                        const pos2 = pos1 + thumbSize;\n                        const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                        if (pos1 <= clientPos && clientPos <= pos2) {\n                            return;\n                        }\n                        const size = this.size;\n                        const delta = size * size / this.scrollSize;\n\n                        this.scrollBy(pos1 < clientPos ? delta : -delta);\n                    });\n                }, 100);\n\n            }\n            datas.isThumb = isThumb;\n            e.inputEvent.stopPropagation();\n            e.inputEvent.preventDefault();\n        }).on(\"drag\", e => {\n            if (!e.datas.isThumb) {\n                return;\n            }\n            this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY);\n        });\n        addEvent(this.barElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: this.scrollSize * ratio,\n        });\n    }\n    public render(isDisplay: boolean, pos: number, size: number, scrollSize: number) {\n        this.pos = pos;\n        this.size = size;\n        this.scrollSize = scrollSize;\n\n        const display = isDisplay && (scrollSize > size) ? \"block\" : \"none\";\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n\n        this.barElement.style.cssText = `display: ${display};`;\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${size * size / scrollSize}px;`\n            + `transform: translate${dirName1}(${pos / scrollSize * size}px)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this.onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    private onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewerManager from \"./InfiniteViewerManager\";\n\nexport default class InfiniteViewer extends InfiniteViewerManager {}\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass, convertUnitSize, between, isObject, isArray } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, OnPinch, AnimationOptions, ScrollOptions, ZoomOptions, GetScollPosOptions } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME, NAMES, DEFAULT_EASING\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange, checkDefault, startAnimation } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private containerWidth: number = 0;\n    private containerHeight: number = 0;\n    private viewportWidth: number = 0;\n    private viewportHeight: number = 0;\n    private scrollLeft: number = 0;\n    private scrollTop: number = 0;\n    private _scrollTimer = 0;\n    private _zoomTimer = 0;\n\n    private dragFlag: boolean = false;\n    private isLoop: boolean = false;\n    private _tempScale: number[] = [1, 1];\n    private _tempRect: { top: number, left: number, width: number, height: number } | null = null;\n    private _tempRectTimer: number | null = null;\n    private _onDestroys: Array<() => void> = [];\n    private _asLeft = 0;\n    private _asTop = 0;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private containerElement: HTMLElement,\n        private viewportElement: HTMLElement,\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...options,\n        };\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this.containerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this.viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Get Scroll Area Element\n     */\n    public geScrollArea(): HTMLElement {\n        return this.scrollAreaElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this.containerElement;\n\n        this._onDestroys.forEach(callback => {\n            callback();\n        });\n        removeEvent(this.wrapperElement, \"scroll\", this._onScroll);\n        removeEvent(containerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"gesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n        removeEvent(containerElement, \"gesturesend\", this.onGestureEnd);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this.containerElement = null;\n        this.viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollTop(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomY;\n        const pos = this.scrollTop / zoom + this.offsetY\n            + (range ? abs(this.getRangeY()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollLeft(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomX;\n        const pos = this.scrollLeft / zoom + this.offsetX\n            + (range ? abs(this.getRangeX()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this.getRangeX(isZoom);\n\n        return this.containerWidth + abs(range[0]) + abs(range[1]);\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this.getRangeY(isZoom);\n\n        return this.containerHeight + abs(range[0]) + abs(range[1]);\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter(options?: ScrollOptions) {\n        this.resize();\n\n        const zoomX = this.zoomX;\n        const zoomY = this.zoomY;\n\n        let left = -(this.containerWidth / zoomX - this.viewportWidth) / 2;\n        let top = -(this.containerHeight / zoomY - this.viewportHeight) / 2;\n\n        if (options?.absolute) {\n            left *= zoomX;\n            top *= zoomY;\n        }\n\n\n        return this.scrollTo(left, top, options);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this.containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n        } = this.viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n\n        this.render();\n        this._scrollBy(0, 0);\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n        } else {\n            this._startScrollAnimation([deltaX, deltaY], options);\n            return true;\n        }\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            return this._scrollTo(x, y, options);\n        } else {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this.scrollBy(x - scrollLeft, y - scrollTop, options);\n        }\n    }\n    /**\n     * Set viewer zoom by the given amount\n     */\n    public zoomBy(deltaZoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n        const [deltaX, deltaY] = isArray(deltaZoom)\n        ? deltaZoom\n        : [deltaZoom, deltaZoom];\n\n        if (!options || !options.duration) {\n\n            this._setZoom([\n                this.zoomX + deltaX,\n                this.zoomY + deltaY,\n            ]);\n        } else {\n            this._startZoomAnimation([deltaX, deltaY], options);\n        }\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number | number[], options?: AnimationOptions) {\n        this._pauseZoomAnimation();\n\n        if (!options || !options.duration) {\n            this._setZoom(zoom);\n        } else {\n            const [zoomX, zoomY] = isArray(zoom)\n            ? zoom\n            : [zoom, zoom];\n            this._startZoomAnimation([\n                zoomX - this.zoomX,\n                zoomY - this.zoomY,\n            ], options);\n        }\n    }\n    /**\n     * Get viewer zoom\n     */\n    public getZoom() {\n        return (this.zoomX + this.zoomY) / 2;\n    }\n    /**\n     * Get viewer zoomX\n     * @since 0.20.0\n     */\n    public getZoomX() {\n        return this.zoomX;\n    }\n    /**\n     * Get viewer zoom\n     * @since 0.20.0\n     */\n    public getZoomY() {\n        return this.zoomY;\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"horizontal\", isZoom, isReal);\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"vertical\", isZoom, isReal);\n    }\n\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const containerElement = this.containerElement;\n        const options = this.options;\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (wrapperElement) {\n            this.wrapperElement = wrapperElement;\n        } else {\n            wrapperElement = document.createElement(\"div\");\n            wrapperElement.insertBefore(this.viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n\n            this.wrapperElement = wrapperElement;\n        }\n\n        if (scrollAreaElement) {\n            this.scrollAreaElement = scrollAreaElement;\n        } else {\n            scrollAreaElement = document.createElement(\"div\");\n\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n\n            this.scrollAreaElement = scrollAreaElement;\n        }\n        addClass(containerElement, CLASS_NAME);\n        addClass(wrapperElement, WRAPPER_CLASS_NAME);\n        addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n\n        this.horizontalScrollbar = new ScrollBar(\"horizontal\", horizontalScrollElement);\n        this.verticalScrollbar = new ScrollBar(\"vertical\", verticalScrollElement);\n\n        this.horizontalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoomX, 0);\n        });\n\n        this.verticalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoomY);\n        });\n\n        if (this.horizontalScrollbar.isAppend) {\n            containerElement.insertBefore(this.horizontalScrollbar.barElement, null);\n        }\n        if (this.verticalScrollbar.isAppend) {\n            containerElement.insertBefore(this.verticalScrollbar.barElement, null);\n        }\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * The pinchStart and abortPinch events do not occur when pinching through the wheel.\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: document.body,\n            events: [\"touch\", \"mouse\"],\n        }).on(\"dragStart\", ({ inputEvent, datas, stop, isMouseEvent }) => {\n            if (!this.useMouseDrag && isMouseEvent) {\n                stop();\n                return;\n            }\n            this._pauseScrollAnimation();\n            this.dragFlag = false;\n            const result = this.trigger(\"dragStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n                return;\n            }\n\n            inputEvent.preventDefault();\n\n            datas.startEvent = inputEvent;\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch || (this.useMouseDrag && e.isMouseEvent)) {\n                this.trigger(\"drag\", {\n                    ...e,\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                this.scrollBy(-e.deltaX / this.zoomX, -e.deltaY / this.zoomY);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this._startScrollAnimationBySpeed(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this._pauseScrollAnimation();\n            datas.startZoom = [this.zoomX, this.zoomY];\n\n            const result = this.trigger(\"pinchStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n            this._setClientRect();\n        }).on(\"pinch\", e => {\n            const scale = e.scale;\n            const pinchDirection = this.options.pinchDirection;\n\n            this._triggerPinch({\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                inputEvent: e.inputEvent,\n                isWheel: false,\n                zoom: e.datas.startZoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        }).on(\"pinchEnd\", () => {\n            this._tempRect = null;\n        });\n\n        addEvent(wrapperElement, \"scroll\", this._onScroll);\n\n        if (options.useResizeObserver) {\n            const observer = new ResizeObserver(() => {\n                this.resize();\n            });\n\n            observer.observe(this.viewportElement);\n            observer.observe(this.containerElement);\n\n\n            this._onDestroys.push(() => {\n                observer.disconnect();\n            });\n        } else {\n            addEvent(window, \"resize\", this.resize);\n\n            this._onDestroys.push(() => {\n                removeEvent(window, \"resize\", this.resize);\n            })\n        }\n\n        if (options.useWheelPinch || options.useWheelScroll) {\n            addEvent(containerElement, \"wheel\", this.onWheel, {\n                passive: false,\n            });\n        }\n        if (options.useGesture) {\n            addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n                passive: false,\n            });\n            addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n                passive: false,\n            });\n        }\n        this.resize();\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoomX = DEFAULT_OPTIONS.zoomX,\n            zoomY = DEFAULT_OPTIONS.zoomY,\n            translateZ = 0,\n        } = this;\n        const {\n            useTransform = DEFAULT_OPTIONS.useTransform,\n        } = this.options;\n        const nextOffsetX = -offsetX * zoomX;\n        const nextOffsetY = -offsetY * zoomY;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n\n        const viewportStyle = this.viewportElement.style;\n\n        if (useTransform === false) {\n            viewportStyle.cssText += `position: relative; top: ${nextOffsetY}px; left: ${nextOffsetX}px;`;\n        } else {\n            viewportStyle.cssText += `transform-origin: 0 0;transform:translate3d(${nextOffsetX}px, ${nextOffsetY}px, ${translateZ}px) scale(${zoomX}, ${zoomY});`;\n        }\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX,\n            zoomY,\n        } = this;\n        const scrollLeft = this.getScrollLeft({ range: true }) * zoomX;\n        const scrollTop = this.getScrollTop({ range: true }) * zoomY;\n        const scrollWidth = this.getScrollWidth(true);\n        const scrollHeight = this.getScrollHeight(true);\n\n        this.horizontalScrollbar.render(\n            this.displayHorizontalScroll,\n            scrollLeft,\n            containerWidth,\n            scrollWidth,\n        );\n        this.verticalScrollbar.render(\n            this.displayVerticalScroll,\n            scrollTop,\n            containerHeight,\n            scrollHeight,\n        );\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private _onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const options = this.options;\n        const pinchDirection = options.pinchDirection;\n        const maxPinchWheel = options.maxPinchWheel || Infinity;\n\n        const isKeydown = e[`${this.wheelPinchKey}Key`] || e.ctrlKey;\n\n        if (options.useWheelPinch && isKeydown) {\n            let deltaY = e.deltaY;\n            const sign = deltaY >= 0 ? 1 : -1;\n            const distance = Math.min(maxPinchWheel, Math.abs(deltaY));\n\n\n            deltaY = sign * distance;\n            const delta = -deltaY;\n            const scale = Math.max(1 + delta * (options.wheelScale || 0.01), TINY_NUM);\n\n            clearTimeout(this._tempRectTimer);\n            this._tempRectTimer = window.setTimeout(() => {\n                this._tempRect = null;\n            }, 100);\n            this._triggerPinch({\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                inputEvent: e,\n                isWheel: true,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        } else if (options.useWheelScroll) {\n            let deltaX = e.deltaX;\n            let deltaY = e.deltaY;\n\n            if (e.shiftKey && !deltaX) {\n                deltaX = deltaY;\n                deltaY = 0;\n            }\n            this.scrollBy(deltaX / this.zoomX, deltaY / this.zoomY);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this._tempScale = [this.zoomX, this.zoomY];\n        this._setClientRect();\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this._tempScale) {\n            this._tempScale =  [1, 1];\n            return;\n        }\n        const scale = e.scale;\n        const zoomX = this._tempScale[0];\n        const zoomY = this._tempScale[1];\n        const pinchDirection = this.options.pinchDirection;\n\n        this._triggerPinch({\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            inputEvent: e,\n            isWheel: true,\n            zoom: (zoomX + zoomY) * scale / 2,\n            zoomX: zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n            zoomY: zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ratioX: 0,\n            ratioY: 0,\n        });\n    }\n    private onGestureEnd = () => {\n\n    }\n    private _startZoomAnimation(dest: number[], options: ZoomOptions) {\n        if (!dest) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._setZoom(\n                [\n                    this.zoomX + dest[0] * distRatio,\n                    this.zoomY + dest[1] * distRatio,\n                ],\n                options.zoomBase,\n            ),\n            next => {\n                this._zoomTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimation(dest: number[], options: AnimationOptions) {\n        if (!dest[0] && !dest[1]) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._scrollBy(\n                dest[0] * distRatio,\n                dest[1] * distRatio,\n                options,\n            ),\n            next => {\n                this._scrollTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimationBySpeed(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n\n        return this._startScrollAnimation(destPos, {\n            duration,\n        })\n\n    }\n    private _pauseScrollAnimation() {\n        cancelAnimationFrame(this._scrollTimer);\n        this._scrollTimer = 0;\n    }\n    private _pauseZoomAnimation() {\n        cancelAnimationFrame(this._zoomTimer);\n        this._zoomTimer = 0;\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private _triggerPinch(event: OnPinch) {\n        const {\n            clientX,\n            clientY,\n            zoomX,\n            zoomY,\n        } = event;\n        if (this.useAutoZoom) {\n            this._zoomByClient([zoomX, zoomY], clientX, clientY);\n        }\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const zoomRange = this.zoomRange;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const ratioX = (clientX - left) / width * 100;\n        const ratioY = (clientY - top) / height * 100;\n\n        this.trigger(\"pinch\", {\n            ...event,\n            zoom: between((zoomX + zoomY) / 2, zoomRange[0], zoomRange[1]),\n            zoomX: between(zoomX, zoomRange[0], zoomRange[1]),\n            zoomY: between(zoomY, zoomRange[0], zoomRange[1]),\n            ratioX,\n            ratioY,\n        });\n    }\n    private _setClientRect() {\n        const rect = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: rect.left,\n            top: rect.top,\n            width: rect.width,\n            height: rect.height,\n        };\n    }\n    private _zoomByClient(zoom: number[], clientX: number, clientY: number) {\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const options = this.options;;\n\n        const originalZoomOffsetX = options.zoomOffsetX;\n        const originalZoomOffsetY = options.zoomOffsetY;\n\n        options.zoomOffsetX = `${(clientX - left) / width * 100}%`;\n        options.zoomOffsetY = `${(clientY - top) / height * 100}%`;\n\n        this._setZoom(zoom, \"screen\");\n\n        options.zoomOffsetX = originalZoomOffsetX;\n        options.zoomOffsetY = originalZoomOffsetY;\n    }\n    private _setZoom(\n        zoom: number | number[],\n        zoomBase?: \"screen\" | \"viewport\",\n    ) {\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX: prevZoomX,\n            zoomY: prevZoomY,\n            zoomRange\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n        const nextZoomX = between(zoomX, zoomRange[0], zoomRange[1]);\n        const nextZoomY = between(zoomY, zoomRange[0], zoomRange[1]);\n        const options = this.options;\n\n        options.zoomX = nextZoomX;\n        options.zoomY = nextZoomY;\n        options.zoom = (nextZoomX + nextZoomY) / 2;\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n\n        let zoomXPos = 0;\n        let zoomYPos = 0;\n\n        if (zoomBase === \"viewport\") {\n            zoomXPos = (-scrollLeft + convertUnitSize(`${zoomOffsetX}`, this.viewportWidth)) * prevZoomX;\n            zoomYPos = (-scrollTop + convertUnitSize(`${zoomOffsetY}`, this.viewportHeight)) * prevZoomY;\n        } else {\n            zoomXPos = convertUnitSize(`${zoomOffsetX}`, containerWidth);\n            zoomYPos = convertUnitSize(`${zoomOffsetY}`, containerHeight);\n        }\n\n        const centerX = scrollLeft + zoomXPos / prevZoomX;\n        const centerY = scrollTop + zoomYPos / prevZoomY;\n\n        const nextCenterX = nextScrollLeft + zoomXPos / nextZoomX;\n        const nextCenterY = nextScrollTop + zoomYPos / nextZoomY;\n\n        this._scrollBy(centerX - nextCenterX, centerY - nextCenterY);\n        this.render();\n    }\n    private _scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        let scrollLeft = this.getScrollLeft();\n        let scrollTop = this.getScrollTop();\n\n        if (options?.absolute) {\n            scrollLeft *= this.zoomX;\n            scrollTop *= this.zoomY;\n        }\n        return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n    }\n    private _scrollTo(x: number, y: number, options?: ScrollOptions) {\n        const {\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n\n        const isAbsolute = options?.absolute;\n        this._scrollToType(\"horizontal\", x, isAbsolute);\n        this._scrollToType(\"vertical\", y, isAbsolute);\n\n        const scrollLeft = this.scrollLeft;\n        const scrollTop = this.scrollTop;\n        this.render();\n        const nextScrollAbsoluteLeft = this.getScrollLeft();\n        const nextScrollAbsoluteTop = this.getScrollTop();\n\n        this._emitScrollEvent(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n\n        if (Math.round(prevScrollLeft) !== scrollLeft || Math.round(prevScrollTop) !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (\n                    scrollLeft !== Math.round(requestScrollLeft)\n                    || scrollTop !== Math.round(requestScrollTop)\n                ) {\n                    this._scrollTo(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    private _scrollToType(type: \"horizontal\" | \"vertical\", coord: number, isAbsolute?: boolean) {\n        const names = NAMES[type];\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n        } = this;\n        const prevScrollPos = this[`scroll${names.pos}`];\n        const [minCoord, maxCoord] = this[`getRange${names.coord}`](true, true);\n\n        let scrollPos = Math.round(prevScrollPos);\n\n        const scrollAreaSize = this[`getScrollArea${names.size}`]();\n        const zoom = this[`zoom${names.coord}`];\n\n        if (isAbsolute) {\n            coord = coord / zoom;\n        }\n        const zoomCoord = coord * zoom;\n\n        if (minCoord === maxCoord) {\n            scrollPos = minCoord;\n            coord = minCoord / zoom;\n        } else if (zoomCoord - threshold <= minCoord) {\n            const minThreshold = Math.max(0, zoomCoord - minCoord);\n\n            scrollPos = minThreshold;\n            coord = (minCoord + minThreshold) / zoom;\n        } else if (zoomCoord + threshold >= maxCoord) {\n            const maxThreshold = Math.max(0, maxCoord - zoomCoord);\n\n            scrollPos = scrollAreaSize - maxThreshold;\n            coord = (maxCoord - maxThreshold) / zoom;\n        } else if (scrollPos < threshold) {\n            scrollPos += margin;\n        } else if (scrollPos > scrollAreaSize - threshold) {\n            scrollPos -= margin;\n        }\n\n        scrollPos = Math.round(scrollPos);\n\n        this[`scroll${names.pos}`] = scrollPos;\n        this[`offset${names.coord}`] = coord - scrollPos / zoom;\n    }\n    private _getRangeCoord(type: \"vertical\" | \"horizontal\", isZoom?: boolean, isReal?: boolean) {\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold,\n        } = this;\n\n        const names = NAMES[type];\n        const rangeCoord = checkDefault(this[`range${names.coord}`], DEFAULT_OPTIONS[`range${names.coord}`]);\n        const rangeOffsetCoord = checkDefault(this[`rangeOffset${names.coord}`], DEFAULT_OPTIONS[`rangeOffset${names.coord}`]);\n        const zoom = this[`zoom${names.coord}`];\n        const range = getRange(\n            this[`getScroll${names.pos}`](),\n            margin,\n            rangeCoord,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return [range[0] + rangeOffsetCoord[0], range[1] + rangeOffsetCoord[1]];\n        }\n        return [\n            range[0] * zoom + rangeOffsetCoord[0],\n            Math.max(this[`viewport${names.size}`] * zoom - this[`container${names.size}`], range[1] * zoom + rangeOffsetCoord[1]),\n        ];\n    }\n    private _emitScrollEvent(scrollLeft: number, scrollTop: number) {\n        const prevScrollLeft = this._asLeft;\n        const prevScrollTop = this._asTop;\n\n        if (prevScrollLeft === scrollLeft && prevScrollTop === scrollTop) {\n            return;\n        }\n        this._asLeft = scrollLeft;\n        this._asTop = scrollTop;\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft,\n            scrollTop,\n        });\n    }\n}\n\ninterface InfiniteViewer extends InfiniteViewerProperties { }\n\nexport default InfiniteViewer;\n"],"names":["DEFAULT_EASING","x","Math","pow","IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","SCROLL_BAR_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","zoomX","zoomY","rangeX","Infinity","rangeY","rangeOffsetX","rangeOffsetY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","useAutoZoom","useMouseDrag","pinchThreshold","cspNonce","maxPinchWheel","wheelScale","displayHorizontalScroll","displayVerticalScroll","useTransform","useWheelPinch","zoomRange","wheelPinchKey","useWheelScroll","zoomOffsetX","zoomOffsetY","translateZ","useGesture","useResizeObserver","pinchDirection","NAMES","horizontal","pos","coord","size","vertical","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArray","getDuration","speed","a","normalSpeed","sqrt","abs","v","checkDefault","value","defaultValue","startAnimation","callback","timerCallback","options","next","now","Date","t","startTime","ratio","easing","duration","prevRatio","prevTime","type","container","thumbElement","_super","isHorizontal","_this","e","delta","deltaX","deltaY","preventDefault","trigger","barElement","querySelector","document","createElement","insertBefore","isAppend","addClass","gesto","Gesto","window","on","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","thumbRect","getBoundingClientRect","pos1","pos2","clientPos","scrollSize","scrollBy","stopPropagation","addEvent","onWheel","passive","__extends","__proto","this","isDisplay","_a","dirName1","sizeName","style","cssText","removeEvent","off","EventEmitter","containerElement","viewportElement","containerWidth","containerHeight","_b","viewportWidth","viewportHeight","render","_scrollBy","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","isKeydown","ctrlKey","sign","distance","min","scale","max","clearTimeout","_tempRectTimer","_tempRect","_triggerPinch","rotation","isWheel","clientX","clientY","ratioX","ratioY","shiftKey","_tempScale","_setClientRect","isFlag","init","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","_onDestroys","forEach","_onScroll","onGestureStart","onGestureChange","onGestureEnd","range","absolute","isObject","offsetY","getRangeY","offsetX","getRangeX","isZoom","resize","left","top","_pauseScrollAnimation","_startScrollAnimation","_scrollTo","y","deltaZoom","_pauseZoomAnimation","isArray","_startZoomAnimation","_setZoom","isReal","_getRangeCoord","observer_1","firstChild","ScrollBar","inject","nonce","body","events","stop","isMouseEvent","dragFlag","startEvent","dt","time","prevSpeed","isPinch","movement","isDrag","isDouble","_startScrollAnimationBySpeed","startZoom","ResizeObserver","observe","push","disconnect","_c","_d","_e","nextOffsetX","nextOffsetY","viewportStyle","getScrollAreaWidth","getScrollAreaHeight","renderScroll","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","dest","distRatio","zoomBase","_zoomTimer","_scrollTimer","destPos","cancelAnimationFrame","event","_zoomByClient","between","rect","getContainer","width","height","originalZoomOffsetX","originalZoomOffsetY","prevZoomX","prevZoomY","nextZoomX","nextZoomY","nextScrollLeft","nextScrollTop","zoomXPos","zoomYPos","convertUnitSize","prevScrollLeft","prevScrollTop","isAbsolute","_scrollToType","nextScrollAbsoluteLeft","nextScrollAbsoluteTop","_emitScrollEvent","round","move","requestScrollLeft","requestScrollTop","names","prevScrollPos","minCoord","maxCoord","scrollPos","scrollAreaSize","zoomCoord","maxThreshold","rangeCoord","rangeOffsetCoord","isFinite","floor","ceil","_asLeft","_asTop","prototype","property","attributes","enumerable","configurable","get","setter","set","Object","defineProperty","InfiniteViewer","modules"],"mappings":"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"}