{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/InfiniteViewer.tsx","../src/InfiniteViewerManager.tsx","../src/index.umd.ts"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: 100%;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: 100%;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n    border-radius: 5px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n    border-radius: 5px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    rangeOffsetX: [0, 0],\n    rangeOffsetY: [0, 0],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    useAutoZoom: false,\n    useMouseDrag: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: Infinity,\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useTransform: true,\n    useWheelPinch: true,\n    zoomRange: [0.001, Infinity],\n    wheelPinchKey: \"ctrl\" as const,\n    useWheelScroll: IS_SAFARI,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: true,\n    useResizeObserver: false,\n};\nexport const NAMES = {\n    horizontal: {\n        pos: \"Left\",\n        coord: \"X\",\n        size: \"Width\",\n    },\n    vertical: {\n        pos: \"Top\",\n        coord: \"Y\",\n        size: \"Height\",\n    },\n} as const;\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"useWheelScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"useWheel\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        speed[0] / 2 * duration,\n        speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n\n\nexport function checkDefault<T>(value: T | undefined | null, defaultValue: T): T {\n    return value != null ? value : defaultValue;\n}\n","import Gesto from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\n\nexport default class ScrollBar extends EventEmitter {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    public barElement!: HTMLElement;\n    private gesto!: Gesto;\n    private pos: number = 0;\n    private size: number = 0;\n    private scrollSize: number = 0;\n    private isHorizontal = false;\n\n    constructor(\n        private type: \"horizontal\" | \"vertical\",\n        container?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n        let thumbElement: HTMLElement;\n        let barElement: HTMLElement = container;\n\n        if (!container) {\n            barElement = document.createElement(\"div\");\n            thumbElement = document.createElement(\"div\");\n\n            barElement.insertBefore(thumbElement, null);\n            this.isAppend = true;\n        } else {\n            thumbElement = container.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        addClass(\n            barElement,\n            isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                : VERTICAL_SCROLL_BAR_CLASS_NAME,\n        );\n        addClass(barElement, SCROLL_BAR_CLASS_NAME);\n        addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n        this.thumbElement = thumbElement;\n        this.barElement = barElement;\n        this.isHorizontal = isHorizontal;\n        this.gesto = new Gesto(barElement, {\n            container: window,\n        }).on(\"dragStart\", e => {\n            const target = e.inputEvent.target;\n            const datas = e.datas;\n            const isThumb = this.thumbElement === target;\n\n            if (!isThumb) {\n                setTimeout(() => {\n                    requestAnimationFrame(() => {\n                        const thumbRect = this.thumbElement.getBoundingClientRect();\n                        const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                        const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                        const pos2 = pos1 + thumbSize;\n                        const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                        if (pos1 <= clientPos && clientPos <= pos2) {\n                            return;\n                        }\n                        const size = this.size;\n                        const delta = size * size / this.scrollSize;\n\n                        this.scrollBy(pos1 < clientPos ? delta : -delta);\n                    });\n                }, 100);\n\n            }\n            datas.isThumb = isThumb;\n            e.inputEvent.stopPropagation();\n            e.inputEvent.preventDefault();\n        }).on(\"drag\", e => {\n            if (!e.datas.isThumb) {\n                return;\n            }\n            this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY);\n        });\n        addEvent(this.barElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: this.scrollSize * ratio,\n        });\n    }\n    public render(isDisplay: boolean, pos: number, size: number, scrollSize: number) {\n        this.pos = pos;\n        this.size = size;\n        this.scrollSize = scrollSize;\n\n        const display = isDisplay && (scrollSize > size) ? \"block\" : \"none\";\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n\n        this.barElement.style.cssText = `display: ${display};`;\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${size * size / scrollSize}px;`\n            + `transform: translate${dirName1}(${pos / scrollSize * size}px)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this.onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    private onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import InfiniteViewerManager from \"./InfiniteViewerManager\";\n\nexport default class InfiniteViewer extends InfiniteViewerManager {}\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass, convertUnitSize, between } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, OnPinch } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME, NAMES\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange, checkDefault } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value, true);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private containerWidth: number = 0;\n    private containerHeight: number = 0;\n    private viewportWidth: number = 0;\n    private viewportHeight: number = 0;\n    private scrollLeft: number = 0;\n    private scrollTop: number = 0;\n    private timer: number = 0;\n    private dragFlag: boolean = false;\n    private isLoop: boolean = false;\n    private _tempScale: number = 1;\n    private _tempRect: { top: number, left: number, width: number, height: number } | null = null;\n    private _tempRectTimer: number | null = null;\n    private _onDestroys: Array<() => void> = [];\n    private _asLeft = 0;\n    private _asTop = 0;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private containerElement: HTMLElement,\n        private viewportElement: HTMLElement,\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...options,\n        };\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this.containerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this.viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Get Scroll Area Element\n     */\n    public geScrollArea(): HTMLElement {\n        return this.scrollAreaElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this.containerElement;\n\n        this._onDestroys.forEach(callback => {\n            callback();\n        });\n        removeEvent(this.wrapperElement, \"scroll\", this.onScroll);\n        removeEvent(containerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"gesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n        removeEvent(containerElement, \"gesturesend\", this.onGestureEnd);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this.containerElement = null;\n        this.viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute top position\n     */\n    public getScrollTop(isAbsolute?: boolean) {\n        return this.scrollTop / this.zoom + this.offsetY\n            + (isAbsolute ? abs(this.getRangeY()[0]) : 0);\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute left position\n     */\n    public getScrollLeft(isAbsolute?: boolean) {\n        return this.scrollLeft / this.zoom + this.offsetX\n            + (isAbsolute ? abs(this.getRangeX()[0]) : 0);\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this.getRangeX(isZoom);\n\n        return this.containerWidth + abs(range[0]) + abs(range[1]);\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this.getRangeY(isZoom);\n\n        return this.containerHeight + abs(range[0]) + abs(range[1]);\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter() {\n        this.resize();\n\n        const zoom = this.zoom;\n        const left = -(this.containerWidth / zoom - this.viewportWidth) / 2;\n        const top = -(this.containerHeight / zoom - this.viewportHeight) / 2;\n\n        return this.scrollTo(left, top);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this.containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n        } = this.viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n\n        this.render();\n        this.scrollBy(0, 0);\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number) {\n        return this.scrollTo(this.getScrollLeft() + deltaX, this.getScrollTop() + deltaY);\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number) {\n        const {\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n        this._scrollTo(\"horizontal\", x);\n        this._scrollTo(\"vertical\", y);\n\n        const scrollLeft = this.scrollLeft;\n        const scrollTop = this.scrollTop;\n        this.render();\n        const nextScrollAbsoluteLeft = this.getScrollLeft();\n        const nextScrollAbsoluteTop = this.getScrollTop();\n\n        this._emitScrollEvent(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n\n        if (Math.round(prevScrollLeft) !== scrollLeft || Math.round(prevScrollTop) !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (\n                    scrollLeft !== Math.round(requestScrollLeft)\n                    || scrollTop !== Math.round(requestScrollTop)\n                ) {\n                    this.scrollTo(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number, isSetter?: boolean) {\n        if (isSetter && this.useAutoZoom) {\n            return;\n        }\n        const {\n            containerWidth,\n            containerHeight,\n            zoom: prevZoom,\n            zoomRange\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n        const nextZoom = between(zoom, zoomRange[0], zoomRange[1]);\n\n        this.options.zoom = nextZoom;\n\n\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n        const zoomX = convertUnitSize(`${zoomOffsetX}`, containerWidth);\n        const zoomY = convertUnitSize(`${zoomOffsetY}`, containerHeight);\n\n        const centerX = scrollLeft + zoomX / prevZoom;\n        const centerY = scrollTop + zoomY / prevZoom;\n\n        const nextCenterX = nextScrollLeft + zoomX / nextZoom;\n        const nextCenterY = nextScrollTop + zoomY / nextZoom;\n\n        this.scrollBy(centerX - nextCenterX, centerY - nextCenterY);\n        this.render();\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"horizontal\", isZoom, isReal);\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"vertical\", isZoom, isReal);\n    }\n\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const containerElement = this.containerElement;\n        const options = this.options;\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (wrapperElement) {\n            this.wrapperElement = wrapperElement;\n        } else {\n            wrapperElement = document.createElement(\"div\");\n            wrapperElement.insertBefore(this.viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n\n            this.wrapperElement = wrapperElement;\n        }\n\n        if (scrollAreaElement) {\n            this.scrollAreaElement = scrollAreaElement;\n        } else {\n            scrollAreaElement = document.createElement(\"div\");\n\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n\n            this.scrollAreaElement = scrollAreaElement;\n        }\n        addClass(containerElement, CLASS_NAME);\n        addClass(wrapperElement, WRAPPER_CLASS_NAME);\n        addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n\n        this.horizontalScrollbar = new ScrollBar(\"horizontal\", horizontalScrollElement);\n        this.verticalScrollbar = new ScrollBar(\"vertical\", verticalScrollElement);\n\n        this.horizontalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoom, 0);\n        });\n\n        this.verticalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoom);\n        });\n\n        if (this.horizontalScrollbar.isAppend) {\n            containerElement.insertBefore(this.horizontalScrollbar.barElement, null);\n        }\n        if (this.verticalScrollbar.isAppend) {\n            containerElement.insertBefore(this.verticalScrollbar.barElement, null);\n        }\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * The pinchStart and abortPinch events do not occur when pinching through the wheel.\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: document.body,\n            events: [\"touch\", \"mouse\"],\n        }).on(\"dragStart\", ({ inputEvent, datas, stop, isMouseEvent }) => {\n            if (!this.useMouseDrag && isMouseEvent) {\n                stop();\n                return;\n            }\n            this.pauseAnimation();\n            this.dragFlag = false;\n            const result = this.trigger(\"dragStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n                return;\n            }\n\n            inputEvent.preventDefault();\n\n            datas.startEvent = inputEvent;\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch) {\n                this.trigger(\"drag\", {\n                    ...e,\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                const zoom = this.zoom;\n                this.scrollBy(-e.deltaX / zoom, -e.deltaY / zoom);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this.startAnimation(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this.pauseAnimation();\n            datas.startZoom = this.zoom;\n\n            const result = this.trigger(\"pinchStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n            this._setClientRect();\n        }).on(\"pinch\", e => {\n            this._triggerPinch({\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                inputEvent: e.inputEvent,\n                isWheel: false,\n                zoom: e.datas.startZoom * e.scale,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        }).on(\"pinchEnd\", () => {\n            this._tempRect = null;\n        });\n\n        addEvent(wrapperElement, \"scroll\", this.onScroll);\n\n        if (options.useResizeObserver) {\n            const observer = new ResizeObserver(() => {\n                this.resize();\n            });\n\n            observer.observe(this.viewportElement);\n            observer.observe(this.containerElement);\n\n\n            this._onDestroys.push(() => {\n                observer.disconnect();\n            });\n        } else {\n            addEvent(window, \"resize\", this.resize);\n\n            this._onDestroys.push(() => {\n                removeEvent(window, \"resize\", this.resize);\n            })\n        }\n\n        if (options.useWheelPinch || options.useWheelScroll) {\n            addEvent(containerElement, \"wheel\", this.onWheel, {\n                passive: false,\n            });\n        }\n        if (options.useGesture) {\n            addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n                passive: false,\n            });\n            addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n                passive: false,\n            });\n        }\n        this.resize();\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoom = DEFAULT_OPTIONS.zoom,\n            translateZ = 0,\n        } = this;\n        const {\n            useTransform = DEFAULT_OPTIONS.useTransform,\n        } = this.options;\n        const nextOffsetX = -offsetX * zoom;\n        const nextOffsetY = -offsetY * zoom;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n\n        const viewportStyle = this.viewportElement.style;\n\n        if (useTransform === false) {\n            viewportStyle.cssText += `position: relative; top: ${nextOffsetY}px; left: ${nextOffsetX}px;`;\n        } else {\n            viewportStyle.cssText += `transform-origin: 0 0;transform:translate3d(${nextOffsetX}px, ${nextOffsetY}px, ${translateZ}px) scale(${zoom});`;\n        }\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            containerWidth,\n            containerHeight,\n            zoom,\n        } = this;\n        const scrollLeft = this.getScrollLeft(true) * zoom;\n        const scrollTop = this.getScrollTop(true) * zoom;\n        const scrollWidth = this.getScrollWidth(true);\n        const scrollHeight = this.getScrollHeight(true);\n\n        this.horizontalScrollbar.render(\n            this.displayHorizontalScroll,\n            scrollLeft,\n            containerWidth,\n            scrollWidth,\n        );\n        this.verticalScrollbar.render(\n            this.displayVerticalScroll,\n            scrollTop,\n            containerHeight,\n            scrollHeight,\n        );\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const options = this.options;\n        const maxPinchWheel = options.maxPinchWheel || Infinity;\n\n        const isKeydown = e[`${this.wheelPinchKey}Key`];\n\n        if (options.useWheelPinch && isKeydown) {\n            let deltaY = e.deltaY;\n            const sign = deltaY >= 0 ? 1 : -1;\n            const distance = Math.min(maxPinchWheel, Math.abs(deltaY));\n\n\n            deltaY = sign * distance;\n            const delta = -deltaY;\n            const scale = Math.max(1 + delta * (options.wheelScale || 0.01), TINY_NUM);\n\n            clearTimeout(this._tempRectTimer);\n            this._tempRectTimer = window.setTimeout(() => {\n                this._tempRect = null;\n            }, 100);\n            this._triggerPinch({\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                inputEvent: e,\n                isWheel: true,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        } else if (options.useWheelScroll) {\n            const zoom = this.zoom;\n\n            let deltaX = e.deltaX;\n            let deltaY = e.deltaY;\n\n            if (e.shiftKey && !deltaX) {\n                deltaX = deltaY;\n                deltaY = 0;\n            }\n            this.scrollBy(deltaX / zoom, deltaY / zoom);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this._tempScale = this.zoom;\n        this._setClientRect();\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this._tempScale) {\n            this._tempScale = 0;\n            return;\n        }\n        const scale = e.scale;\n\n        this._triggerPinch({\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            inputEvent: e,\n            isWheel: true,\n            zoom: this._tempScale * scale,\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ratioX: 0,\n            ratioY: 0,\n        });\n    }\n    private onGestureEnd = () => {\n\n    }\n    private startAnimation(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const easing = x => 1 - Math.pow(1 - x, 3);\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n        const startTime = Date.now();\n        let prevTime = startTime;\n\n        const next = () => {\n            const now = Date.now();\n            let t = now - startTime;\n\n            if (duration < t) {\n                t = duration;\n            }\n            const ratio = easing(t / duration);\n            const prevRatio = easing((prevTime - startTime) / duration);\n\n            prevTime = now;\n\n            this.scrollBy(\n                -destPos[0] * (ratio - prevRatio),\n                -destPos[1] * (ratio - prevRatio),\n            );\n\n            if (t >= duration) {\n                return;\n            }\n            this.timer = requestAnimationFrame(next);\n        };\n        this.timer = requestAnimationFrame(next);\n    }\n    private pauseAnimation() {\n        cancelAnimationFrame(this.timer);\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private _triggerPinch(event: OnPinch) {\n        const {\n            clientX,\n            clientY,\n            zoom,\n        } = event;\n        if (this.useAutoZoom) {\n            this._zoomByClient(event.zoom, clientX, clientY);\n        }\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const zoomRange = this.zoomRange;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const ratioX = (clientX - left) / width * 100;\n        const ratioY = (clientY - top) / height * 100;\n\n        this.trigger(\"pinch\", {\n            ...event,\n            zoom: between(zoom, zoomRange[0], zoomRange[1]),\n            ratioX,\n            ratioY,\n        });\n    }\n    private _setClientRect() {\n        const rect = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: rect.left,\n            top: rect.top,\n            width: rect.width,\n            height: rect.height,\n        };\n    }\n    private _zoomByClient(zoom: number, clientX: number, clientY: number) {\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const options = this.options;;\n\n        const originalZoomOffsetX = options.zoomOffsetX;\n        const originalZoomOffsetY = options.zoomOffsetY;\n\n        options.zoomOffsetX = `${(clientX - left) / width * 100}%`;\n        options.zoomOffsetY = `${(clientY - top) / height * 100}%`;\n\n        this.setZoom(zoom);\n\n        options.zoomOffsetX = originalZoomOffsetX;\n        options.zoomOffsetY = originalZoomOffsetY;\n    }\n    private _scrollTo(type: \"horizontal\" | \"vertical\", coord: number) {\n        const names = NAMES[type];\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n        } = this;\n        const prevScrollPos = this[`scroll${names.pos}`];\n        const [minCoord, maxCoord] = this[`getRange${names.coord}`](true, true);\n\n        let scrollPos = Math.round(prevScrollPos);\n\n        const scrollAreaSize = this[`getScrollArea${names.size}`]();\n        const zoomCoord = coord * zoom;\n\n        if (minCoord === maxCoord) {\n            scrollPos = minCoord;\n            coord = minCoord / zoom;\n        } else if (zoomCoord - threshold <= minCoord) {\n            const minThreshold = Math.max(0, zoomCoord - minCoord);\n\n            scrollPos = minThreshold;\n            coord = (minCoord + minThreshold) / zoom;\n        } else if (zoomCoord + threshold >= maxCoord) {\n            const maxThreshold = Math.max(0, maxCoord - zoomCoord);\n\n            scrollPos = scrollAreaSize - maxThreshold;\n            coord = (maxCoord - maxThreshold) / zoom;\n        } else if (scrollPos < threshold) {\n            scrollPos += margin;\n        } else if (scrollPos > scrollAreaSize - threshold) {\n            scrollPos -= margin;\n        }\n\n        scrollPos = Math.round(scrollPos);\n\n        this[`scroll${names.pos}`] = scrollPos;\n        this[`offset${names.coord}`] = Math.round(coord - scrollPos / zoom);\n    }\n    private _getRangeCoord(type: \"vertical\" | \"horizontal\", isZoom?: boolean, isReal?: boolean) {\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            zoom = DEFAULT_OPTIONS.zoom,\n            threshold,\n        } = this;\n        const names = NAMES[type];\n        const rangeCoord = checkDefault(this[`range${names.coord}`], DEFAULT_OPTIONS[`range${names.coord}`]);\n        const rangeOffsetCoord = checkDefault(this[`rangeOffset${names.coord}`], DEFAULT_OPTIONS[`rangeOffset${names.coord}`]);\n        const range = getRange(\n            this[`getScroll${names.pos}`](),\n            margin,\n            rangeCoord,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return [range[0] + rangeOffsetCoord[0], range[1] + rangeOffsetCoord[1]];\n        }\n        return [\n            range[0] * zoom + rangeOffsetCoord[0],\n            Math.max(this[`viewport${names.size}`] * zoom - this[`container${names.size}`], range[1] * zoom + rangeOffsetCoord[1]),\n        ];\n    }\n    private _emitScrollEvent(scrollLeft: number, scrollTop: number) {\n        const prevScrollLeft = this._asLeft;\n        const prevScrollTop = this._asTop;\n\n        if (prevScrollLeft === scrollLeft && prevScrollTop === scrollTop) {\n            return;\n        }\n        this._asLeft = scrollLeft;\n        this._asTop = scrollTop;\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n         this.trigger(\"scroll\", {\n            scrollLeft,\n            scrollTop,\n        });\n    }\n}\n\ninterface InfiniteViewer extends InfiniteViewerProperties { }\n\nexport default InfiniteViewer;\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n"],"names":["IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","SCROLL_BAR_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","rangeX","Infinity","rangeY","rangeOffsetX","rangeOffsetY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","useAutoZoom","useMouseDrag","pinchThreshold","cspNonce","maxPinchWheel","wheelScale","displayHorizontalScroll","displayVerticalScroll","useTransform","useWheelPinch","zoomRange","wheelPinchKey","useWheelScroll","zoomOffsetX","zoomOffsetY","translateZ","useGesture","useResizeObserver","NAMES","horizontal","pos","coord","size","vertical","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArray","getDuration","speed","a","normalSpeed","Math","sqrt","abs","v","checkDefault","value","defaultValue","type","container","_super","_this","e","delta","isHorizontal","deltaX","deltaY","preventDefault","trigger","thumbElement","barElement","querySelector","document","createElement","insertBefore","isAppend","addClass","gesto","Gesto","window","on","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","thumbRect","getBoundingClientRect","pos1","pos2","clientPos","scrollSize","scrollBy","stopPropagation","addEvent","onWheel","passive","__extends","ratio","this","isDisplay","display","_a","dirName1","sizeName","style","cssText","removeEvent","off","EventEmitter","containerElement","viewportElement","options","containerWidth","containerHeight","_b","viewportWidth","viewportHeight","render","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","isKeydown","sign","distance","min","scale","max","clearTimeout","_tempRectTimer","_tempRect","_triggerPinch","rotation","isWheel","clientX","clientY","ratioX","ratioY","shiftKey","_tempScale","_setClientRect","isFlag","init","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","_onDestroys","forEach","callback","onScroll","onGestureStart","onGestureChange","onGestureEnd","isAbsolute","offsetY","getRangeY","offsetX","getRangeX","isZoom","range","resize","left","top","x","y","prevScrollLeft","prevScrollTop","_scrollTo","nextScrollAbsoluteLeft","nextScrollAbsoluteTop","_emitScrollEvent","round","move","requestScrollLeft","requestScrollTop","isSetter","prevZoom","_c","_d","nextZoom","nextScrollLeft","nextScrollTop","zoomX","zoomY","centerX","centerY","nextCenterX","nextCenterY","between","convertUnitSize","isReal","_getRangeCoord","observer_1","firstChild","ScrollBar","inject","nonce","body","events","stop","isMouseEvent","pauseAnimation","dragFlag","startEvent","isPinch","time","Date","now","prevSpeed","dt","measureSpeed","movement","isDrag","isDouble","startAnimation","startZoom","ResizeObserver","observe","push","disconnect","nextOffsetX","nextOffsetY","getScrollAreaWidth","getScrollAreaHeight","viewportStyle","renderScroll","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","easing","duration","destPos","startTime","prevTime","next","pow","t","prevRatio","timer","cancelAnimationFrame","event","_zoomByClient","rect","getContainer","width","height","originalZoomOffsetX","originalZoomOffsetY","setZoom","maxThreshold","names","prevScrollPos","_e","minCoord","maxCoord","scrollPos","scrollAreaSize","zoomCoord","rangeCoord","rangeOffsetCoord","isFinite","floor","ceil","_asLeft","_asTop","prototype","property","attributes","enumerable","configurable","get","setter","set","Object","defineProperty","InfiniteViewer","modules"],"mappings":"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"}