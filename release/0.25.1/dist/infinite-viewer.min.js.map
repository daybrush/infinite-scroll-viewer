{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/index.umd.ts","../src/InfiniteViewer.tsx","../src/InfiniteViewerManager.tsx"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    scrollbar-width: none;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.restrict-wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: calc(100% - 20px);\n    right: 10px;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: calc(100% - 20px);\n    bottom: 10px;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n    opacity: 0;\n}\n.scroll-bar:hover .scroll-thumb {\n    border-radius: 5px;\n    opacity: 1;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: opacity, margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: opacity, margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    zoomX: 1,\n    zoomY: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    rangeOffsetX: [0, 0],\n    rangeOffsetY: [0, 0],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    useAutoZoom: false,\n    useMouseDrag: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: Infinity,\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useTransform: true,\n    useWheelPinch: true,\n    zoomRange: [0.001, Infinity],\n    wheelPinchKey: \"ctrl\" as const,\n    useWheelScroll: IS_SAFARI,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: true,\n    useResizeObserver: false,\n    pinchDirection: \"all\" as const,\n    preventWheelClick: true,\n};\n\nexport const DEFAULT_EASING = (x: number) => 1 - Math.pow(1 - x, 3);\nexport const NAMES = {\n    horizontal: {\n        pos: \"Left\",\n        coord: \"X\",\n        size: \"Width\",\n    },\n    vertical: {\n        pos: \"Top\",\n        coord: \"Y\",\n        size: \"Height\",\n    },\n} as const;\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"zoomX\",\n    \"zoomY\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n    \"pinchDirection\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"preventWheelClick\",\n    \"useWheelPinch\",\n    \"useWheelScroll\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n    \"wheelContainer\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"getContainerWidth\",\n    \"getContainerHeight\",\n    \"getViewportWidth\",\n    \"getViewportHeight\",\n    \"getViewportScrollWidth\",\n    \"getViewportScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"zoomBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n    \"getZoom\",\n    \"getZoomX\",\n    \"getZoomY\",\n    \"getWheelContainer\",\n    \"setTo\",\n    \"setBy\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\nimport { AnimationOptions } from \"./types\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        -speed[0] / 2 * duration,\n        -speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n\n\nexport function checkDefault<T>(value: T | undefined | null, defaultValue: T): T {\n    return value != null ? value : defaultValue;\n}\n\n\n\nexport function startAnimation(\n    callback: (ratioDist: number) => void,\n    timerCallback: (next: () => void) => void,\n    options: AnimationOptions,\n) {\n    const duration = options.duration;\n    const easing = options.easing || ((x: number) => 1 - Math.pow(1 - x, 3));\n    const startTime = Date.now();\n    let prevTime = startTime;\n\n    const next = () => {\n        const now = Date.now();\n        let t = now - startTime;\n\n        if (duration < t) {\n            t = duration;\n        }\n        const ratio = easing(t / duration);\n        const prevRatio = easing((prevTime - startTime) / duration);\n\n        prevTime = now;\n\n        callback(ratio - prevRatio);\n\n        if (t >= duration) {\n            return;\n        }\n        timerCallback(next);\n    };\n    timerCallback(next);\n}\n","import Gesto from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent, throttle } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\nimport { abs } from \"./utils\";\n\nexport default class ScrollBar extends EventEmitter {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    public barElement!: HTMLElement;\n    private gesto!: Gesto;\n    private size: number = 0;\n    private scrollSize: number = 0;\n    private isHorizontal = false;\n\n    constructor(\n        private type: \"horizontal\" | \"vertical\",\n        container?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n        let thumbElement: HTMLElement;\n        let barElement: HTMLElement = container;\n\n        if (!container) {\n            barElement = document.createElement(\"div\");\n            thumbElement = document.createElement(\"div\");\n\n            barElement.insertBefore(thumbElement, null);\n            this.isAppend = true;\n        } else {\n            thumbElement = container.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        addClass(\n            barElement,\n            isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                : VERTICAL_SCROLL_BAR_CLASS_NAME,\n        );\n        addClass(barElement, SCROLL_BAR_CLASS_NAME);\n        addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n        this.thumbElement = thumbElement;\n        this.barElement = barElement;\n        this.isHorizontal = isHorizontal;\n        this.gesto = new Gesto(barElement, {\n            container: window,\n        }).on(\"dragStart\", e => {\n            const target = e.inputEvent.target;\n            const datas = e.datas;\n            const isThumb = this.thumbElement === target;\n\n            if (!isThumb) {\n                setTimeout(() => {\n                    requestAnimationFrame(() => {\n                        const thumbRect = this.thumbElement.getBoundingClientRect();\n                        const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                        const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                        const pos2 = pos1 + thumbSize;\n                        const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                        const endPos = clientPos - pos2;\n                        const startPos = clientPos - pos1;\n\n                        if (0 <= startPos && endPos <= 0) {\n                            return;\n                        }\n                        const clientScrollWidth = thumbSize / this.size * this.scrollSize;\n                        const pos = (0 < endPos ? endPos : startPos) / clientScrollWidth;\n                        const delta = pos * this.size;\n\n                        this.scrollBy(delta);\n                    });\n                }, 100);\n\n            }\n            datas.isThumb = isThumb;\n            e.inputEvent.stopPropagation();\n            e.inputEvent.preventDefault();\n        }).on(\"drag\", e => {\n            if (!e.datas.isThumb) {\n                return;\n            }\n            this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY, true);\n        });\n        addEvent(this.barElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number, isAbsolute?: boolean) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: isAbsolute ? delta : this.scrollSize * ratio,\n        });\n    }\n    public render(\n        isDisplay: boolean,\n        containerSize: number,\n        scrollRange: number[],\n    ) {\n        const [startMargin, endMargin] = scrollRange;\n        const scrollSizeOffset = throttle(abs(startMargin) + endMargin, 0.001);\n        const scrollSize = containerSize + scrollSizeOffset;\n        const opacity = isDisplay && scrollSizeOffset ? \"1\" : \"\";\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n        const thumbSize = containerSize / scrollSize;\n        const thumbPos = endMargin / scrollSize / thumbSize;\n\n        this.size = containerSize;\n        this.scrollSize = scrollSize;\n        this.thumbElement.style.opacity = opacity;\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${thumbSize * 100}%;`\n            + `transform: translate${dirName1}(${thumbPos * 100}%)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this.onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    private onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewerManager from \"./InfiniteViewerManager\";\n\nexport default class InfiniteViewer extends InfiniteViewerManager {}\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass, convertUnitSize, between, isObject, isArray, isString } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, OnPinch, AnimationOptions, ScrollOptions, ZoomOptions, GetScollPosOptions, InnerScrollOptions, ScrollCenterOptions, SetOptions } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME, NAMES, DEFAULT_EASING,\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange, checkDefault, startAnimation } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private containerWidth: number = 0;\n    private containerHeight: number = 0;\n    private viewportWidth: number = 0;\n    private viewportHeight: number = 0;\n    private viewportScrollWidth: number = 0;\n    private viewportScrollHeight: number = 0;\n    private scrollLeft: number = 0;\n    private scrollTop: number = 0;\n    private _scrollTimer = 0;\n    private _zoomTimer = 0;\n\n    private _viewportElement: HTMLElement | null = null;\n    private _wheelContainerElement: HTMLElement | null = null;\n    private dragFlag: boolean = false;\n    private isLoop: boolean = false;\n    private _tempScale: number[] = [1, 1];\n    private _tempRect: { top: number, left: number, width: number, height: number } | null = null;\n    private _tempRectTimer: number | null = null;\n    private _onDestroys: Array<() => void> = [];\n    private _asLeft = 0;\n    private _asTop = 0;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private _containerElement: HTMLElement,\n        viewportElement: HTMLElement | Partial<InfiniteViewerOptions> = {},\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n\n\n        if (viewportElement instanceof Element) {\n            this._viewportElement = viewportElement;\n            this.options = {\n                ...DEFAULT_OPTIONS,\n                ...options,\n            };\n        } else {\n            this._viewportElement = _containerElement.children[0] as HTMLElement;\n            this.options = {\n                ...DEFAULT_OPTIONS,\n                ...viewportElement,\n            };\n        }\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this._containerElement;\n    }\n    /**\n     * Get Wheel Container Element\n     */\n    public getWheelContainer(): HTMLElement {\n        return this._wheelContainerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this._viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Get Scroll Area Element\n     */\n    public geScrollArea(): HTMLElement {\n        return this.scrollAreaElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this._containerElement;\n\n        this._onDestroys.forEach(callback => {\n            callback();\n        });\n        removeEvent(this.wrapperElement, \"scroll\", this._onScroll);\n        removeEvent(this._wheelContainerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"gesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n        removeEvent(containerElement, \"gesturesend\", this.onGestureEnd);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this._containerElement = null;\n        this._viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollTop(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomY;\n        const pos = this.scrollTop / zoom + this.offsetY\n            + (range ? abs(this.getRangeY()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollLeft(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomX;\n        const pos = this.scrollLeft / zoom + this.offsetX\n            + (range ? abs(this.getRangeX()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this._getScrollRangeX();\n        const zoom = this.zoomX;\n        const size = this.containerWidth / zoom + abs(range[0]) + range[1];\n\n        return isZoom ? size : size * zoom;\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this._getScrollRangeY();\n        const zoom = this.zoomY;\n        const size = this.containerHeight / zoom + abs(range[0]) + range[1];\n\n        return isZoom ? size : size * zoom;\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter(options: ScrollCenterOptions = {}) {\n        this.resize();\n\n        const zoomX = this.zoomX;\n        const zoomY = this.zoomY;\n\n        let left = -(this.containerWidth / zoomX - this.viewportWidth) / 2;\n        let top = -(this.containerHeight / zoomY - this.viewportHeight) / 2;\n\n        if (options.absolute) {\n            left *= zoomX;\n            top *= zoomY;\n        }\n        if (options.horizontal === false) {\n            left = this.getScrollLeft();\n        }\n        if (options.vertical === false) {\n            top = this.getScrollTop();\n        }\n\n        return this.scrollTo(left, top, options);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this._containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n            scrollWidth: viewportScrollWidth,\n            scrollHeight: viewportScrollHeight,\n        } = this._viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n        this.viewportScrollWidth = Math.max(viewportWidth, viewportScrollWidth);\n        this.viewportScrollHeight = Math.max(viewportWidth, viewportScrollHeight);\n\n        this.render();\n        this._scrollBy(0, 0);\n    }\n    /**\n     * Move to that position or zoom.\n     * @since 0.25.0\n     */\n    public setTo(options: SetOptions) {\n        const {\n            x = this.getScrollLeft(),\n            y = this.getScrollTop(),\n            zoom = [this.getZoomX(), this.getZoomY()],\n            duration,\n        } = options;\n        const {\n            zoomX: prevZoomX,\n            zoomY: prevZoomY,\n            zoomRange,\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n        if (\"zoomOffsetX\" in options) {\n            zoomOffsetX = options.zoomOffsetX;\n        }\n        if (\"zoomOffsetY\" in options) {\n            zoomOffsetY = options.zoomOffsetY;\n        }\n\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n        const nextZoomX = between(zoomX, zoomRange[0], zoomRange[1]);\n        const nextZoomY = between(zoomY, zoomRange[0], zoomRange[1]);\n        const zoomXPos = convertUnitSize(`${zoomOffsetX}`, this.viewportWidth) * (1 / prevZoomX - 1 / nextZoomX);\n        const zoomYPos = convertUnitSize(`${zoomOffsetY}`, this.viewportHeight) * (1 / prevZoomY - 1 / nextZoomY);\n\n        this.scrollTo(x - zoomXPos, y - zoomYPos, {\n            duration,\n        });\n        this.setZoom(zoom, {\n            zoomOffsetX,\n            zoomOffsetY,\n            duration,\n            zoomBase: \"fixed\",\n        });\n    }\n    /**\n     * Move by the position or zoom delta value.\n     * @since 0.25.0\n     */\n    public setBy(options: SetOptions) {\n        const {\n            x = 0,\n            y = 0,\n            zoom = [0, 0],\n        } = options;\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n\n        this.setTo({\n            ...options,\n            x: this.getScrollLeft() + x,\n            y: this.getScrollTop() + y,\n            zoom: [this.zoomX + zoomX, this.zoomY + zoomY],\n        });\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n        } else {\n            this._startScrollAnimation([deltaX, deltaY], options);\n            return true;\n        }\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            return this._scrollTo(x, y, options);\n        } else {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this.scrollBy(x - scrollLeft, y - scrollTop, options);\n        }\n    }\n    /**\n     * Set viewer zoom by the given amount\n     */\n    public zoomBy(deltaZoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n        const [deltaX, deltaY] = isArray(deltaZoom)\n        ? deltaZoom\n        : [deltaZoom, deltaZoom];\n\n        if (!options || !options.duration) {\n            this._setZoom([\n                this.zoomX + deltaX,\n                this.zoomY + deltaY,\n            ], options);\n        } else {\n            this._startZoomAnimation([deltaX, deltaY], options);\n        }\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n\n        if (!options || !options.duration) {\n            this._setZoom(zoom, options);\n        } else {\n            const [zoomX, zoomY] = isArray(zoom)\n            ? zoom\n            : [zoom, zoom];\n            this._startZoomAnimation([\n                zoomX - this.zoomX,\n                zoomY - this.zoomY,\n            ], options);\n        }\n    }\n    public getViewportWidth() {\n        return this.viewportWidth;\n    }\n    public getViewportHeight() {\n        return this.viewportWidth;\n    }\n    public getViewportScrollWidth() {\n        return this.viewportScrollWidth;\n    }\n    public getViewportScrollHeight() {\n        return this.viewportScrollHeight;\n    }\n    public getContainerWidth() {\n        return this.containerWidth;\n    }\n    public getContainerHeight() {\n        return this.containerHeight;\n    }\n    /**\n     * Get viewer zoom\n     */\n    public getZoom() {\n        return (this.zoomX + this.zoomY) / 2;\n    }\n    /**\n     * Get viewer zoomX\n     * @since 0.20.0\n     */\n    public getZoomX() {\n        return this.zoomX;\n    }\n    /**\n     * Get viewer zoom\n     * @since 0.20.0\n     */\n    public getZoomY() {\n        return this.zoomY;\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"horizontal\", isZoom, isReal);\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"vertical\", isZoom, isReal);\n    }\n\n    private init() {\n        // infinite-viewer(container)\n        // viewportㅌ\n        // children\n        const containerElement = this._containerElement;\n        const options = this.options;\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (!wrapperElement) {\n            wrapperElement = document.createElement(\"div\");\n            wrapperElement.insertBefore(this._viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n        }\n        this.wrapperElement = wrapperElement;\n\n        if (!scrollAreaElement) {\n            scrollAreaElement = document.createElement(\"div\");\n\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n        }\n        this.scrollAreaElement = scrollAreaElement;\n\n        addClass(containerElement, CLASS_NAME);\n        addClass(wrapperElement, WRAPPER_CLASS_NAME);\n        // addClass(restrictElement, RESTRICT_WRAPPER_CLASS_NAME);\n        addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n\n        this.horizontalScrollbar = new ScrollBar(\"horizontal\", horizontalScrollElement);\n        this.verticalScrollbar = new ScrollBar(\"vertical\", verticalScrollElement);\n\n        this.horizontalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoomX, 0);\n        });\n\n        this.verticalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoomY);\n        });\n\n        if (this.horizontalScrollbar.isAppend) {\n            containerElement.insertBefore(this.horizontalScrollbar.barElement, null);\n        }\n        if (this.verticalScrollbar.isAppend) {\n            containerElement.insertBefore(this.verticalScrollbar.barElement, null);\n        }\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n\n        const wheelContainerOption = options.wheelContainer;\n        let wheelContainerElement: HTMLElement | null = null;\n\n        if (wheelContainerOption) {\n            if (isString(wheelContainerOption)) {\n                wheelContainerElement = document.querySelector(wheelContainerOption);\n            } else if (wheelContainerOption instanceof Node) {\n                wheelContainerElement = wheelContainerOption;\n            } else if (\"value\" in wheelContainerOption || \"current\" in wheelContainerOption) {\n                wheelContainerElement = wheelContainerOption.current || wheelContainerOption.value;\n            }\n        }\n        wheelContainerElement ||= containerElement;\n        this._wheelContainerElement = wheelContainerElement;\n\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * The pinchStart and abortPinch events do not occur when pinching through the wheel.\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: window,\n            events: [\"touch\", \"mouse\"],\n            preventWheelClick: this.options.preventWheelClick ?? true,\n        }).on(\"dragStart\", e => {\n            const {\n                inputEvent,\n                stop,\n                datas,\n            } = e;\n            if (!this.useMouseDrag && e.isMouseEvent) {\n                stop();\n                return;\n            }\n            this._pauseScrollAnimation();\n            this.dragFlag = false;\n            const result = this.trigger(\"dragStart\", e);\n\n            if (result === false) {\n                stop();\n                return;\n            }\n            inputEvent.preventDefault();\n            datas.startEvent = inputEvent;\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch || (this.useMouseDrag && e.isMouseEvent)) {\n                this.trigger(\"drag\", {\n                    ...e,\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                this.scrollBy(-e.deltaX / this.zoomX, -e.deltaY / this.zoomY);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this._startScrollAnimationBySpeed(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this._pauseScrollAnimation();\n            datas.startZoom = [this.zoomX, this.zoomY];\n\n            const result = this.trigger(\"pinchStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n            this._setClientRect();\n        }).on(\"pinch\", e => {\n            const scale = e.scale;\n            const pinchDirection = this.options.pinchDirection;\n\n            this._triggerPinch({\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                inputEvent: e.inputEvent,\n                isWheel: false,\n                zoom: e.datas.startZoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        }).on(\"pinchEnd\", () => {\n            this._tempRect = null;\n        });\n\n        addEvent(wrapperElement, \"scroll\", this._onScroll);\n\n        if (options.useResizeObserver) {\n            const observer = new ResizeObserver(() => {\n                this.resize();\n            });\n\n            observer.observe(this._viewportElement);\n            observer.observe(this._containerElement);\n\n\n            this._onDestroys.push(() => {\n                observer.disconnect();\n            });\n        } else {\n            addEvent(window, \"resize\", this.resize);\n\n            this._onDestroys.push(() => {\n                removeEvent(window, \"resize\", this.resize);\n            })\n        }\n\n        if (options.useWheelPinch || options.useWheelScroll) {\n            addEvent(wheelContainerElement, \"wheel\", this.onWheel, {\n                passive: false,\n            });\n        }\n        if (options.useGesture) {\n            addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n                passive: false,\n            });\n            addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n                passive: false,\n            });\n        }\n        this.resize();\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoomX = DEFAULT_OPTIONS.zoomX,\n            zoomY = DEFAULT_OPTIONS.zoomY,\n            translateZ = 0,\n            rangeX,\n            rangeY,\n            containerWidth,\n            containerHeight,\n        } = this;\n        const {\n            useTransform = DEFAULT_OPTIONS.useTransform,\n        } = this.options;\n        let nextOffsetX = -offsetX * zoomX;\n        let nextOffsetY = -offsetY * zoomY;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n\n        const viewportStyle = this._viewportElement.style;\n\n        if (useTransform === false) {\n            viewportStyle.cssText += `position: relative; left: ${nextOffsetX}px; top: ${nextOffsetY}px; `;\n\n            // if (restrictOffsetX || restrictOffsetY) {\n            //     viewportStyle.cssText += `position: relative; left: ${restrictOffsetX}px; top: ${restrictOffsetY}px`;\n            // }\n        } else {\n            viewportStyle.cssText += `transform-origin: 0 0;`\n                + `transform:translate3d(${nextOffsetX}px, ${nextOffsetY}px, ${translateZ}px) scale(${zoomX}, ${zoomY});`;\n\n            // if (restrictOffsetX || restrictOffsetY) {\n            //     viewportStyle.cssText += `transform:translate3d(${restrictOffsetX}px, ${restrictOffsetY}px, 0px)`;\n            // }\n        }\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX,\n            zoomY,\n        } = this;\n\n        this.horizontalScrollbar.render(\n            this.displayHorizontalScroll,\n            containerWidth / zoomX,\n            this._getScrollRangeX(),\n        );\n        this.verticalScrollbar.render(\n            this.displayVerticalScroll,\n            containerHeight / zoomY,\n            this._getScrollRangeY(),\n        );\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private _onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const options = this.options;\n        const pinchDirection = options.pinchDirection;\n        const maxPinchWheel = options.maxPinchWheel || Infinity;\n\n        const isKeydown = e[`${this.wheelPinchKey}Key`] || e.ctrlKey;\n\n        if (options.useWheelPinch && isKeydown) {\n            let deltaY = e.deltaY;\n            const sign = deltaY >= 0 ? 1 : -1;\n            const distance = Math.min(maxPinchWheel, Math.abs(deltaY));\n\n\n            deltaY = sign * distance;\n            const delta = -deltaY;\n            const scale = Math.max(1 + delta * (options.wheelScale || 0.01), TINY_NUM);\n\n            clearTimeout(this._tempRectTimer);\n            this._tempRectTimer = window.setTimeout(() => {\n                this._tempRect = null;\n            }, 100);\n            this._triggerPinch({\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                inputEvent: e,\n                isWheel: true,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        } else if (options.useWheelScroll) {\n            let deltaX = e.deltaX;\n            let deltaY = e.deltaY;\n\n            if (e.shiftKey && !deltaX) {\n                deltaX = deltaY;\n                deltaY = 0;\n            }\n            this.scrollBy(deltaX / this.zoomX, deltaY / this.zoomY);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this._tempScale = [this.zoomX, this.zoomY];\n        this._setClientRect();\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this._tempScale) {\n            this._tempScale =  [1, 1];\n            return;\n        }\n        const scale = e.scale;\n        const zoomX = this._tempScale[0];\n        const zoomY = this._tempScale[1];\n        const pinchDirection = this.options.pinchDirection;\n\n        this._triggerPinch({\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            inputEvent: e,\n            isWheel: true,\n            zoom: (zoomX + zoomY) * scale / 2,\n            zoomX: zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n            zoomY: zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ratioX: 0,\n            ratioY: 0,\n        });\n    }\n    private onGestureEnd = () => {\n\n    }\n    private _startZoomAnimation(dest: number[], options: ZoomOptions) {\n        if (!dest) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._setZoom(\n                [\n                    this.zoomX + dest[0] * distRatio,\n                    this.zoomY + dest[1] * distRatio,\n                ],\n                options,\n            ),\n            next => {\n                this._zoomTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimation(dest: number[], options: AnimationOptions) {\n        if (!dest[0] && !dest[1]) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._scrollBy(\n                dest[0] * distRatio,\n                dest[1] * distRatio,\n                options,\n            ),\n            next => {\n                this._scrollTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimationBySpeed(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n\n        return this._startScrollAnimation(destPos, {\n            duration,\n        })\n\n    }\n    private _pauseScrollAnimation() {\n        cancelAnimationFrame(this._scrollTimer);\n        this._scrollTimer = 0;\n    }\n    private _pauseZoomAnimation() {\n        cancelAnimationFrame(this._zoomTimer);\n        this._zoomTimer = 0;\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private _triggerPinch(event: OnPinch) {\n        const {\n            clientX,\n            clientY,\n            zoomX,\n            zoomY,\n        } = event;\n        if (this.useAutoZoom) {\n            this._zoomByClient([zoomX, zoomY], clientX, clientY);\n        }\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const zoomRange = this.zoomRange;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const ratioX = (clientX - left) / width * 100;\n        const ratioY = (clientY - top) / height * 100;\n\n        this.trigger(\"pinch\", {\n            ...event,\n            zoom: between((zoomX + zoomY) / 2, zoomRange[0], zoomRange[1]),\n            zoomX: between(zoomX, zoomRange[0], zoomRange[1]),\n            zoomY: between(zoomY, zoomRange[0], zoomRange[1]),\n            ratioX,\n            ratioY,\n        });\n    }\n    private _setClientRect() {\n        const rect = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: rect.left,\n            top: rect.top,\n            width: rect.width,\n            height: rect.height,\n        };\n    }\n    private _zoomByClient(zoom: number[], clientX: number, clientY: number) {\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const options = this.options;;\n\n        const originalZoomOffsetX = options.zoomOffsetX;\n        const originalZoomOffsetY = options.zoomOffsetY;\n\n        options.zoomOffsetX = `${(clientX - left) / width * 100}%`;\n        options.zoomOffsetY = `${(clientY - top) / height * 100}%`;\n\n        this._setZoom(zoom, {\n            zoomBase: \"screen\",\n        });\n\n        options.zoomOffsetX = originalZoomOffsetX;\n        options.zoomOffsetY = originalZoomOffsetY;\n    }\n    private _setZoom(\n        zoom: number | number[],\n        zoomOptions: ZoomOptions = {},\n    ) {\n        const zoomBase = zoomOptions.zoomBase;\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX: prevZoomX,\n            zoomY: prevZoomY,\n            zoomRange\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n        if (\"zoomOffsetX\" in zoomOptions) {\n            zoomOffsetX = zoomOptions.zoomOffsetX;\n        }\n        if (\"zoomOffsetY\" in zoomOptions) {\n            zoomOffsetY = zoomOptions.zoomOffsetY;\n        }\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n        const nextZoomX = between(zoomX, zoomRange[0], zoomRange[1]);\n        const nextZoomY = between(zoomY, zoomRange[0], zoomRange[1]);\n        const options = this.options;\n\n        options.zoomX = nextZoomX;\n        options.zoomY = nextZoomY;\n        options.zoom = (nextZoomX + nextZoomY) / 2;\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n\n        let zoomXPos = 0;\n        let zoomYPos = 0;\n\n        if (zoomBase === \"fixed\") {\n            zoomXPos = convertUnitSize(`${zoomOffsetX}`, this.viewportWidth);\n            zoomYPos = convertUnitSize(`${zoomOffsetY}`, this.viewportHeight);\n        } else if (zoomBase === \"viewport\") {\n            zoomXPos = (-scrollLeft + convertUnitSize(`${zoomOffsetX}`, this.viewportWidth)) * prevZoomX;\n            zoomYPos = (-scrollTop + convertUnitSize(`${zoomOffsetY}`, this.viewportHeight)) * prevZoomY;\n        } else {\n            zoomXPos = convertUnitSize(`${zoomOffsetX}`, containerWidth);\n            zoomYPos = convertUnitSize(`${zoomOffsetY}`, containerHeight);\n        }\n\n        const centerX = scrollLeft + zoomXPos / prevZoomX;\n        const centerY = scrollTop + zoomYPos / prevZoomY;\n\n        const nextCenterX = nextScrollLeft + zoomXPos / nextZoomX;\n        const nextCenterY = nextScrollTop + zoomYPos / nextZoomY;\n\n        this._scrollBy(\n            centerX - nextCenterX,\n            centerY - nextCenterY,\n            {\n                zoom: !!(nextZoomX - prevZoomX || nextZoomY - prevZoomY),\n            },\n        );\n        this.render();\n    }\n    private _scrollBy(deltaX: number, deltaY: number, options?: InnerScrollOptions) {\n        let scrollLeft = this.getScrollLeft();\n        let scrollTop = this.getScrollTop();\n\n        if (options?.absolute) {\n            scrollLeft *= this.zoomX;\n            scrollTop *= this.zoomY;\n        }\n        return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n    }\n    private _scrollTo(x: number, y: number, options?: InnerScrollOptions) {\n        const {\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n\n        const isAbsolute = options?.absolute;\n        this._scrollToType(\"horizontal\", x, isAbsolute);\n        this._scrollToType(\"vertical\", y, isAbsolute);\n\n        const scrollLeft = this.scrollLeft;\n        const scrollTop = this.scrollTop;\n        this.render();\n        const nextScrollAbsoluteLeft = this.getScrollLeft();\n        const nextScrollAbsoluteTop = this.getScrollTop();\n\n        this._emitScrollEvent(nextScrollAbsoluteLeft, nextScrollAbsoluteTop, options?.zoom);\n\n        if (Math.round(prevScrollLeft) !== scrollLeft || Math.round(prevScrollTop) !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (\n                    scrollLeft !== Math.round(requestScrollLeft)\n                    || scrollTop !== Math.round(requestScrollTop)\n                ) {\n                    this._scrollTo(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    private _scrollToType(type: \"horizontal\" | \"vertical\", coord: number, isAbsolute?: boolean) {\n        const names = NAMES[type];\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n        } = this;\n        const prevScrollPos = this[`scroll${names.pos}`];\n        const [minCoord, maxCoord] = this[`getRange${names.coord}`](true, true);\n\n        let scrollPos = Math.round(prevScrollPos);\n\n        const scrollAreaSize = this[`getScrollArea${names.size}`]();\n        const zoom = this[`zoom${names.coord}`];\n\n        if (isAbsolute) {\n            coord = coord / zoom;\n        }\n        const zoomCoord = coord * zoom;\n\n        if (minCoord === maxCoord) {\n            scrollPos = minCoord;\n            coord = minCoord / zoom;\n        } else if (zoomCoord - threshold <= minCoord) {\n            const minThreshold = Math.max(0, zoomCoord - minCoord);\n\n            scrollPos = minThreshold;\n            coord = (minCoord + minThreshold) / zoom;\n        } else if (zoomCoord + threshold >= maxCoord) {\n            const maxThreshold = Math.max(0, maxCoord - zoomCoord);\n\n            scrollPos = scrollAreaSize - maxThreshold;\n            coord = (maxCoord - maxThreshold) / zoom;\n        } else if (scrollPos < threshold) {\n            scrollPos += margin;\n        } else if (scrollPos > scrollAreaSize - threshold) {\n            scrollPos -= margin;\n        }\n\n        scrollPos = Math.round(scrollPos);\n\n        this[`scroll${names.pos}`] = scrollPos;\n        this[`offset${names.coord}`] = coord - scrollPos / zoom;\n    }\n    private _getRangeCoord(type: \"vertical\" | \"horizontal\", isZoom?: boolean, isReal?: boolean) {\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold,\n        } = this;\n\n        const names = NAMES[type];\n        const rangeCoord = checkDefault(\n            this[`range${names.coord}`],\n            DEFAULT_OPTIONS[`range${names.coord}`],\n        );\n        const rangeOffsetCoord = checkDefault(\n            this[`rangeOffset${names.coord}`],\n            DEFAULT_OPTIONS[`rangeOffset${names.coord}`],\n        );\n        const zoom = this[`zoom${names.coord}`];\n        const range = getRange(\n            this[`getScroll${names.pos}`](),\n            margin,\n            rangeCoord,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return [\n                range[0] + rangeOffsetCoord[0],\n                range[1] + rangeOffsetCoord[1],\n            ];\n        }\n        return [\n            range[0] * zoom + rangeOffsetCoord[0],\n            range[1] * zoom + rangeOffsetCoord[1],\n            // Math.max(this[`viewport${names.size}`] * zoom - this[`container${names.size}`], range[1] * zoom + rangeOffsetCoord[1]),\n        ];\n    }\n    private _emitScrollEvent(scrollLeft: number, scrollTop: number, zoom?: boolean) {\n        const prevScrollLeft = this._asLeft;\n        const prevScrollTop = this._asTop;\n\n        if (!zoom && prevScrollLeft === scrollLeft && prevScrollTop === scrollTop) {\n            return;\n        }\n        this._asLeft = scrollLeft;\n        this._asTop = scrollTop;\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft,\n            scrollTop,\n            zoomX: this.zoomX,\n            zoomY: this.zoomY,\n        });\n    }\n    private _getScrollRangeX() {\n        const pos = this.getScrollLeft();\n        const startMargin =  Math.min(0, pos);\n        const endMargin = Math.max(0, pos);\n        const viewportSize = this.viewportScrollWidth;\n        const margin = Math.max(this.containerWidth / this.zoomX, viewportSize) - viewportSize;\n        const startSizeOffset = Math.min(0, margin + startMargin);\n\n        return [\n            startSizeOffset,\n            endMargin,\n        ];\n    }\n    private _getScrollRangeY() {\n        const pos = this.getScrollTop();\n        const startMargin =  Math.min(0, pos);\n        const endMargin = Math.max(0, pos);\n        const viewportSize = this.viewportScrollHeight;\n        const margin = Math.max(this.containerHeight / this.zoomY, viewportSize) - viewportSize;\n        const startSizeOffset = Math.min(0, margin + startMargin);\n\n        return [\n            startSizeOffset,\n            endMargin,\n        ];\n    }\n}\n\ninterface InfiniteViewer extends InfiniteViewerProperties { }\n\nexport default InfiniteViewer;\n"],"names":["DEFAULT_EASING","x","Math","pow","IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","SCROLL_BAR_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","zoomX","zoomY","rangeX","Infinity","rangeY","rangeOffsetX","rangeOffsetY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","useAutoZoom","useMouseDrag","pinchThreshold","cspNonce","maxPinchWheel","wheelScale","displayHorizontalScroll","displayVerticalScroll","useTransform","useWheelPinch","zoomRange","wheelPinchKey","useWheelScroll","zoomOffsetX","zoomOffsetY","translateZ","useGesture","useResizeObserver","pinchDirection","preventWheelClick","NAMES","horizontal","pos","coord","size","vertical","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArray","getDuration","speed","a","normalSpeed","sqrt","abs","v","checkDefault","value","defaultValue","startAnimation","callback","timerCallback","options","next","now","Date","t","startTime","ratio","easing","duration","prevRatio","prevTime","type","container","thumbElement","_super","isHorizontal","_this","e","delta","deltaX","deltaY","preventDefault","trigger","barElement","querySelector","document","createElement","insertBefore","isAppend","addClass","gesto","Gesto","window","on","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","thumbRect","getBoundingClientRect","pos1","thumbSize","clientPos","endPos","startPos","scrollSize","scrollBy","stopPropagation","addEvent","onWheel","passive","__extends","__proto","isAbsolute","this","isDisplay","containerSize","scrollRange","startMargin","endMargin","scrollSizeOffset","opacity","_a","dirName1","sizeName","thumbPos","style","cssText","removeEvent","off","EventEmitter","_containerElement","viewportElement","containerWidth","containerHeight","_b","_viewportElement","viewportWidth","viewportHeight","viewportScrollWidth","viewportScrollHeight","max","render","_scrollBy","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","isKeydown","ctrlKey","sign","distance","min","scale","clearTimeout","_tempRectTimer","_tempRect","_triggerPinch","rotation","isWheel","clientX","clientY","ratioX","ratioY","shiftKey","_tempScale","_setClientRect","isFlag","Element","children","init","_wheelContainerElement","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","containerElement","_onDestroys","forEach","_onScroll","onGestureStart","onGestureChange","onGestureEnd","range","absolute","isObject","offsetY","getRangeY","offsetX","getRangeX","isZoom","_getScrollRangeX","_getScrollRangeY","resize","left","top","y","_c","getZoomX","getZoomY","prevZoomX","prevZoomY","_f","_g","_h","isArray","nextZoomX","between","nextZoomY","zoomXPos","convertUnitSize","zoomYPos","setZoom","zoomBase","_d","setTo","_pauseScrollAnimation","_startScrollAnimation","_scrollTo","deltaZoom","_pauseZoomAnimation","_startZoomAnimation","_setZoom","isReal","_getRangeCoord","observer_1","wheelContainerOption","firstChild","ScrollBar","inject","nonce","wheelContainer","wheelContainerElement","isString","Node","current","events","stop","isMouseEvent","dragFlag","startEvent","dt","time","prevSpeed","isPinch","movement","isDrag","isDouble","_startScrollAnimationBySpeed","startZoom","ResizeObserver","observe","push","disconnect","_e","nextOffsetX","nextOffsetY","viewportStyle","getScrollAreaWidth","getScrollAreaHeight","renderScroll","dest","distRatio","_zoomTimer","_scrollTimer","destPos","cancelAnimationFrame","event","_zoomByClient","rect","getContainer","width","height","originalZoomOffsetX","originalZoomOffsetY","zoomOptions","nextScrollLeft","nextScrollTop","prevScrollLeft","prevScrollTop","_scrollToType","nextScrollAbsoluteLeft","nextScrollAbsoluteTop","_emitScrollEvent","round","move","requestScrollLeft","requestScrollTop","names","prevScrollPos","minCoord","maxCoord","scrollPos","scrollAreaSize","zoomCoord","maxThreshold","rangeCoord","rangeOffsetCoord","isFinite","floor","ceil","_asLeft","_asTop","viewportSize","prototype","property","attributes","enumerable","configurable","get","setter","set","Object","defineProperty","InfiniteViewer","modules"],"mappings":"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"}