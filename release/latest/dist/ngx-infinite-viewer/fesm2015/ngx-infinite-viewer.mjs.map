{"version":3,"file":"ngx-infinite-viewer.mjs","sources":["../../../projects/ngx-infinite-viewer/src/lib/ngx-infinite-viewer.service.ts","../../../projects/ngx-infinite-viewer/src/lib/ngx-infinite-viewer.interface.ts","../../../projects/ngx-infinite-viewer/src/lib/ngx-infinite-viewer.component.ts","../../../projects/ngx-infinite-viewer/src/lib/ngx-infinite-viewer.module.ts","../../../projects/ngx-infinite-viewer/src/public-api.ts","../../../projects/ngx-infinite-viewer/src/ngx-infinite-viewer.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxInfiniteViewerService {\n\n  constructor() { }\n}\n","import VanillaInfiniteViewer, { METHODS, InfiniteViewerMethods, InfiniteViewerOptions } from 'infinite-viewer';\nimport { withMethods, MethodInterface } from 'framework-utils';\nimport { NgxInfiniteViewerComponent } from './ngx-infinite-viewer.component';\nimport { NgxInfiniteViewerEvents } from './types';\n\nexport class NgxInfiniteViewerInterface {\n  @withMethods(METHODS as any)\n  protected infiniteViewer!: VanillaInfiniteViewer;\n}\nexport interface NgxInfiniteViewerInterface\n  extends MethodInterface<InfiniteViewerMethods, VanillaInfiniteViewer, NgxInfiniteViewerComponent>,\n  InfiniteViewerOptions, NgxInfiniteViewerEvents { }\n","import {\n  Component, ElementRef,\n  AfterViewInit, OnDestroy, OnChanges, SimpleChanges, ViewChild, Input, Output, OnInit, EventEmitter,\n} from '@angular/core';\nimport VanillaInfiniteViewer, {\n  PROPERTIES, EVENTS, InfiniteViewerProperties, InfiniteViewerOptions, OPTIONS,\n} from 'infinite-viewer';\nimport { NgxInfiniteViewerInterface } from './ngx-infinite-viewer.interface';\nimport { NgxInfiniteViewerEvents } from './types';\n\n\n@Component({\n  selector: 'ngx-infinite-viewer, [NgxInfiniteViewer]',\n  template: `\n  <div class=\"infinite-viewer-wrapper\" #wrapperElement>\n    <div class=\"infinite-viewer-scroll-area\" #scrollAreaElement></div>\n    <ng-content></ng-content>\n  </div>\n  <div class=\"infinite-viewer-scroll-bar infinite-viewer-horizontal-scroll-bar\" #horizontalScrollElement>\n    <div class=\"infinite-viewer-scroll-thumb\"></div>\n  </div>\n  <div class=\"infinite-viewer-scroll-bar infinite-viewer-vertical-scroll-bar\" #verticalScrollElement>\n    <div class=\"infinite-viewer-scroll-thumb\"></div>\n  </div>\n\n  `,\n  styles: []\n})\nexport class NgxInfiniteViewerComponent\n  extends NgxInfiniteViewerInterface\n  implements OnDestroy, AfterViewInit, OnChanges {\n  @ViewChild('scrollAreaElement', { static: false }) scrollAreaElementRef!: ElementRef;\n  @ViewChild('wrapperElement', { static: false }) wrapperElementRef!: ElementRef;\n  @ViewChild('horizontalScrollElement', { static: false }) horizontalScrollElementRef!: ElementRef;\n  @ViewChild('verticalScrollElement', { static: false }) verticalScrollElementRef!: ElementRef;\n  // @Input() margin!: InfiniteViewerProperties['margin'];\n  // @Input() threshold: InfiniteViewerProperties['threshold'];\n  // @Input() zoom: InfiniteViewerProperties['zoom'];\n  // @Input() rangeX: InfiniteViewerProperties['rangeX'];\n  // @Input() rangeY: InfiniteViewerProperties['rangeY'];\n  // @Input() pinchThreshold: InfiniteViewerProperties['pinchThreshold'];\n  // @Input() usePinch: InfiniteViewerProperties['usePinch'];\n  // @Input() cspNonce: InfiniteViewerOptions['cspNonce'];\n  // @Input() wheelScale: InfiniteViewerOptions['wheelScale'];\n  // @Input() displayVerticalScroll: InfiniteViewerOptions['displayVerticalScroll'];\n  // @Input() displayHorizontalScroll: InfiniteViewerOptions['displayHorizontalScroll'];\n\n  // @Input() useWheelScroll: InfiniteViewerOptions['useWheelScroll'];\n  // @Input() useWheelPinch: InfiniteViewerOptions['useWheelPinch'];\n\n  // @Input() zoomOffsetX: InfiniteViewerOptions['zoomOffsetX'];\n  // @Input() zoomOffsetY: InfiniteViewerOptions['zoomOffsetY'];\n  // @Input() translateZ: InfiniteViewerOptions['translateZ'];\n  // @Input() rangeOffsetX: InfiniteViewerOptions['rangeOffsetX'];\n  // @Input() rangeOffsetY: InfiniteViewerOptions['rangeOffsetY'];\n  // @Input() maxPinchWheel: InfiniteViewerOptions['maxPinchWheel'];\n  // @Input() useGesture: InfiniteViewerOptions['useGesture'];\n  // @Input() useTransform: InfiniteViewerOptions['useTransform'];\n  // @Input() wrapperElement: InfiniteViewerOptions['wrapperElement'];\n  // @Input() scrollAreaElement: InfiniteViewerOptions['scrollAreaElement'];\n  // @Input() verticalScrollElement: InfiniteViewerOptions['verticalScrollElement'];\n  // @Input() useResizeObserver: InfiniteViewerOptions['useResizeObserver'];\n\n  // @Input() horizontalScrollElement: InfiniteViewerOptions['horizontalScrollElement'];\n\n  // @Output() useMouseDrag: InfiniteViewerOptions['useMouseDrag'];\n  // @Output() useAutoZoom: InfiniteViewerOptions['useAutoZoom'];\n  // @Output() zoomRange: InfiniteViewerOptions['zoomRange'];\n  // @Output() wheelPinchKey: InfiniteViewerOptions['wheelPinchKey'];\n\n  // @Output() scroll: NgxInfiniteViewerEvents['scroll'];\n  // @Output() dragStart: NgxInfiniteViewerEvents['dragStart'];\n  // @Output() drag: NgxInfiniteViewerEvents['drag'];\n  // @Output() dragEnd: NgxInfiniteViewerEvents['dragEnd'];\n  // @Output() pinchStart: NgxInfiniteViewerEvents['pinchStart'];\n  // @Output() pinch: NgxInfiniteViewerEvents['pinch'];\n  // @Output() abortPinch: NgxInfiniteViewerEvents['abortPinch'];\n\n  constructor(public containerElementRef: ElementRef) {\n    super();\n    EVENTS.forEach(name => {\n      (this as any)[name] = new EventEmitter();\n    });\n  }\n\n  ngAfterViewInit(): void {\n    const options: Partial<InfiniteViewerProperties> = {};\n    PROPERTIES.forEach((name) => {\n      if (name in this && typeof this[name] !== 'undefined') {\n        (options as any)[name] = this[name];\n      }\n    });\n    this.infiniteViewer = new VanillaInfiniteViewer(\n      this.containerElementRef.nativeElement,\n      this.scrollAreaElementRef.nativeElement.nextElementSibling as HTMLElement,\n      {\n        ...options,\n        wrapperElement: this.wrapperElementRef.nativeElement,\n        scrollAreaElement: this.scrollAreaElementRef.nativeElement,\n        horizontalScrollElement: this.horizontalScrollElementRef.nativeElement,\n        verticalScrollElement: this.verticalScrollElementRef.nativeElement,\n      },\n    );\n\n\n    const infiniteViewer = this.infiniteViewer;\n\n    EVENTS.forEach(name => {\n      infiniteViewer.on(name, e => {\n        this[name].emit(e as any);\n      });\n    });\n  }\n  ngOnChanges(changes: SimpleChanges): void {\n    const infiniteViewer = this.infiniteViewer;\n\n    if (!infiniteViewer) {\n      return;\n    }\n    for (const name in changes) {\n      if (PROPERTIES.indexOf(name as any) < -1) {\n        continue;\n      }\n      const { previousValue, currentValue } = changes[name];\n\n      if (previousValue === currentValue) {\n        continue;\n      }\n      (infiniteViewer as any)[name] = currentValue;\n    }\n  }\n  ngOnDestroy() {\n    this.infiniteViewer.destroy();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxInfiniteViewerComponent } from './ngx-infinite-viewer.component';\n\n\n\n@NgModule({\n  declarations: [NgxInfiniteViewerComponent],\n  imports: [\n  ],\n  exports: [NgxInfiniteViewerComponent]\n})\nexport class NgxInfiniteViewerModule { }\n","/*\n * Public API Surface of ngx-infinite-viewer\n */\n\nexport * from './lib/ngx-infinite-viewer.service';\nexport * from './lib/ngx-infinite-viewer.component';\nexport * from './lib/ngx-infinite-viewer.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}