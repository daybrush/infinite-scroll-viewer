{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/index.umd.ts","../src/InfiniteViewer.tsx","../src/InfiniteViewerManager.tsx"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: 100%;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: 100%;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n    border-radius: 5px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n    border-radius: 5px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    zoomX: 1,\n    zoomY: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    rangeOffsetX: [0, 0],\n    rangeOffsetY: [0, 0],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    useAutoZoom: false,\n    useMouseDrag: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: Infinity,\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useTransform: true,\n    useWheelPinch: true,\n    zoomRange: [0.001, Infinity],\n    wheelPinchKey: \"ctrl\" as const,\n    useWheelScroll: IS_SAFARI,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: true,\n    useResizeObserver: false,\n    pinchDirection: \"all\" as const,\n    preventWheelClick: true,\n};\n\nexport const DEFAULT_EASING = (x: number) => 1 - Math.pow(1 - x, 3);\nexport const NAMES = {\n    horizontal: {\n        pos: \"Left\",\n        coord: \"X\",\n        size: \"Width\",\n    },\n    vertical: {\n        pos: \"Top\",\n        coord: \"Y\",\n        size: \"Height\",\n    },\n} as const;\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"zoomX\",\n    \"zoomY\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"useWheelScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n    \"pinchDirection\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"preventWheelClick\",\n    \"useWheel\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"zoomBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n    \"getZoom\",\n    \"getZoomX\",\n    \"getZoomY\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\nimport { AnimationOptions } from \"./types\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        -speed[0] / 2 * duration,\n        -speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n\n\nexport function checkDefault<T>(value: T | undefined | null, defaultValue: T): T {\n    return value != null ? value : defaultValue;\n}\n\n\n\nexport function startAnimation(\n    callback: (ratioDist: number) => void,\n    timerCallback: (next: () => void) => void,\n    options: AnimationOptions,\n) {\n    const duration = options.duration;\n    const easing = options.easing || ((x: number) => 1 - Math.pow(1 - x, 3));\n    const startTime = Date.now();\n    let prevTime = startTime;\n\n    const next = () => {\n        const now = Date.now();\n        let t = now - startTime;\n\n        if (duration < t) {\n            t = duration;\n        }\n        const ratio = easing(t / duration);\n        const prevRatio = easing((prevTime - startTime) / duration);\n\n        prevTime = now;\n\n        callback(ratio - prevRatio);\n\n        if (t >= duration) {\n            return;\n        }\n        timerCallback(next);\n    };\n    timerCallback(next);\n}\n","import Gesto from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\n\nexport default class ScrollBar extends EventEmitter {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    public barElement!: HTMLElement;\n    private gesto!: Gesto;\n    private pos: number = 0;\n    private size: number = 0;\n    private scrollSize: number = 0;\n    private isHorizontal = false;\n\n    constructor(\n        private type: \"horizontal\" | \"vertical\",\n        container?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n        let thumbElement: HTMLElement;\n        let barElement: HTMLElement = container;\n\n        if (!container) {\n            barElement = document.createElement(\"div\");\n            thumbElement = document.createElement(\"div\");\n\n            barElement.insertBefore(thumbElement, null);\n            this.isAppend = true;\n        } else {\n            thumbElement = container.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        addClass(\n            barElement,\n            isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                : VERTICAL_SCROLL_BAR_CLASS_NAME,\n        );\n        addClass(barElement, SCROLL_BAR_CLASS_NAME);\n        addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n        this.thumbElement = thumbElement;\n        this.barElement = barElement;\n        this.isHorizontal = isHorizontal;\n        this.gesto = new Gesto(barElement, {\n            container: window,\n        }).on(\"dragStart\", e => {\n            const target = e.inputEvent.target;\n            const datas = e.datas;\n            const isThumb = this.thumbElement === target;\n\n            if (!isThumb) {\n                setTimeout(() => {\n                    requestAnimationFrame(() => {\n                        const thumbRect = this.thumbElement.getBoundingClientRect();\n                        const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                        const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                        const pos2 = pos1 + thumbSize;\n                        const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                        if (pos1 <= clientPos && clientPos <= pos2) {\n                            return;\n                        }\n                        const size = this.size;\n                        const delta = size * size / this.scrollSize;\n\n                        this.scrollBy(pos1 < clientPos ? delta : -delta);\n                    });\n                }, 100);\n\n            }\n            datas.isThumb = isThumb;\n            e.inputEvent.stopPropagation();\n            e.inputEvent.preventDefault();\n        }).on(\"drag\", e => {\n            if (!e.datas.isThumb) {\n                return;\n            }\n            this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY);\n        });\n        addEvent(this.barElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: this.scrollSize * ratio,\n        });\n    }\n    public render(isDisplay: boolean, pos: number, size: number, scrollSize: number) {\n        this.pos = pos;\n        this.size = size;\n        this.scrollSize = scrollSize;\n\n        const display = isDisplay && (scrollSize > size) ? \"block\" : \"none\";\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n\n        this.barElement.style.cssText = `display: ${display};`;\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${size * size / scrollSize}px;`\n            + `transform: translate${dirName1}(${pos / scrollSize * size}px)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this.onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    private onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewerManager from \"./InfiniteViewerManager\";\n\nexport default class InfiniteViewer extends InfiniteViewerManager {}\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass, convertUnitSize, between, isObject, isArray } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents, OnPinch, AnimationOptions, ScrollOptions, ZoomOptions, GetScollPosOptions } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME, NAMES, DEFAULT_EASING\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange, checkDefault, startAnimation } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends EventEmitter<InfiniteViewerEvents> {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private containerWidth: number = 0;\n    private containerHeight: number = 0;\n    private viewportWidth: number = 0;\n    private viewportHeight: number = 0;\n    private scrollLeft: number = 0;\n    private scrollTop: number = 0;\n    private _scrollTimer = 0;\n    private _zoomTimer = 0;\n\n    private _viewportElement: HTMLElement | null = null;\n    private dragFlag: boolean = false;\n    private isLoop: boolean = false;\n    private _tempScale: number[] = [1, 1];\n    private _tempRect: { top: number, left: number, width: number, height: number } | null = null;\n    private _tempRectTimer: number | null = null;\n    private _onDestroys: Array<() => void> = [];\n    private _asLeft = 0;\n    private _asTop = 0;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private _containerElement: HTMLElement,\n        viewportElement: HTMLElement | Partial<InfiniteViewerOptions> = {},\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n\n\n        if (viewportElement instanceof Element) {\n            this._viewportElement = viewportElement;\n            this.options = {\n                ...DEFAULT_OPTIONS,\n                ...options,\n            };\n        } else {\n            this._viewportElement = _containerElement.nextElementSibling as HTMLElement;\n            this.options = {\n                ...DEFAULT_OPTIONS,\n                ...viewportElement,\n            };\n        }\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this._containerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this._viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Get Scroll Area Element\n     */\n    public geScrollArea(): HTMLElement {\n        return this.scrollAreaElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this._containerElement;\n\n        this._onDestroys.forEach(callback => {\n            callback();\n        });\n        removeEvent(this.wrapperElement, \"scroll\", this._onScroll);\n        removeEvent(containerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"gesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n        removeEvent(containerElement, \"gesturesend\", this.onGestureEnd);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this._containerElement = null;\n        this._viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollTop(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomY;\n        const pos = this.scrollTop / zoom + this.offsetY\n            + (range ? abs(this.getRangeY()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     */\n    public getScrollLeft(options: GetScollPosOptions | boolean = {}) {\n        let range = false;\n        let absolute = false;\n\n        if (isObject(options)) {\n            range = options.range;\n            absolute = options.absolute;\n        } else {\n            range = options;\n        }\n        const zoom = this.zoomX;\n        const pos = this.scrollLeft / zoom + this.offsetX\n            + (range ? abs(this.getRangeX()[0]) : 0);\n\n        return absolute ? pos * zoom : pos;\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this.getRangeX(isZoom);\n\n        return this.containerWidth + abs(range[0]) + abs(range[1]);\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this.getRangeY(isZoom);\n\n        return this.containerHeight + abs(range[0]) + abs(range[1]);\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter(options?: ScrollOptions) {\n        this.resize();\n\n        const zoomX = this.zoomX;\n        const zoomY = this.zoomY;\n\n        let left = -(this.containerWidth / zoomX - this.viewportWidth) / 2;\n        let top = -(this.containerHeight / zoomY - this.viewportHeight) / 2;\n\n        if (options?.absolute) {\n            left *= zoomX;\n            top *= zoomY;\n        }\n\n\n        return this.scrollTo(left, top, options);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this._containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n        } = this._viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n\n        this.render();\n        this._scrollBy(0, 0);\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n        } else {\n            this._startScrollAnimation([deltaX, deltaY], options);\n            return true;\n        }\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number, options?: ScrollOptions) {\n        this._pauseScrollAnimation();\n        if (!options || !options.duration) {\n            return this._scrollTo(x, y, options);\n        } else {\n            let scrollLeft = this.getScrollLeft();\n            let scrollTop = this.getScrollTop();\n\n            if (options?.absolute) {\n                scrollLeft *= this.zoomX;\n                scrollTop *= this.zoomY;\n            }\n            return this.scrollBy(x - scrollLeft, y - scrollTop, options);\n        }\n    }\n    /**\n     * Set viewer zoom by the given amount\n     */\n    public zoomBy(deltaZoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n        const [deltaX, deltaY] = isArray(deltaZoom)\n        ? deltaZoom\n        : [deltaZoom, deltaZoom];\n\n        if (!options || !options.duration) {\n            this._setZoom([\n                this.zoomX + deltaX,\n                this.zoomY + deltaY,\n            ], options);\n        } else {\n            this._startZoomAnimation([deltaX, deltaY], options);\n        }\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number | number[], options?: ZoomOptions) {\n        this._pauseZoomAnimation();\n\n        if (!options || !options.duration) {\n            this._setZoom(zoom, options);\n        } else {\n            const [zoomX, zoomY] = isArray(zoom)\n            ? zoom\n            : [zoom, zoom];\n            this._startZoomAnimation([\n                zoomX - this.zoomX,\n                zoomY - this.zoomY,\n            ], options);\n        }\n    }\n    /**\n     * Get viewer zoom\n     */\n    public getZoom() {\n        return (this.zoomX + this.zoomY) / 2;\n    }\n    /**\n     * Get viewer zoomX\n     * @since 0.20.0\n     */\n    public getZoomX() {\n        return this.zoomX;\n    }\n    /**\n     * Get viewer zoom\n     * @since 0.20.0\n     */\n    public getZoomY() {\n        return this.zoomY;\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"horizontal\", isZoom, isReal);\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        return this._getRangeCoord(\"vertical\", isZoom, isReal);\n    }\n\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const containerElement = this._containerElement;\n        const options = this.options;\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (wrapperElement) {\n            this.wrapperElement = wrapperElement;\n        } else {\n            wrapperElement = document.createElement(\"div\");\n            wrapperElement.insertBefore(this._viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n\n            this.wrapperElement = wrapperElement;\n        }\n\n        if (scrollAreaElement) {\n            this.scrollAreaElement = scrollAreaElement;\n        } else {\n            scrollAreaElement = document.createElement(\"div\");\n\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n\n            this.scrollAreaElement = scrollAreaElement;\n        }\n        addClass(containerElement, CLASS_NAME);\n        addClass(wrapperElement, WRAPPER_CLASS_NAME);\n        addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n\n        this.horizontalScrollbar = new ScrollBar(\"horizontal\", horizontalScrollElement);\n        this.verticalScrollbar = new ScrollBar(\"vertical\", verticalScrollElement);\n\n        this.horizontalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoomX, 0);\n        });\n\n        this.verticalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoomY);\n        });\n\n        if (this.horizontalScrollbar.isAppend) {\n            containerElement.insertBefore(this.horizontalScrollbar.barElement, null);\n        }\n        if (this.verticalScrollbar.isAppend) {\n            containerElement.insertBefore(this.verticalScrollbar.barElement, null);\n        }\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * The pinchStart and abortPinch events do not occur when pinching through the wheel.\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: window,\n            events: [\"touch\", \"mouse\"],\n            preventWheelClick: this.options.preventWheelClick ?? true,\n        }).on(\"dragStart\", e => {\n            const {\n                inputEvent,\n                stop,\n                datas,\n            } = e;\n            if (!this.useMouseDrag && e.isMouseEvent) {\n                stop();\n                return;\n            }\n            this._pauseScrollAnimation();\n            this.dragFlag = false;\n            const result = this.trigger(\"dragStart\", e);\n\n            if (result === false) {\n                stop();\n                return;\n            }\n            inputEvent.preventDefault();\n            datas.startEvent = inputEvent;\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch || (this.useMouseDrag && e.isMouseEvent)) {\n                this.trigger(\"drag\", {\n                    ...e,\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                this.scrollBy(-e.deltaX / this.zoomX, -e.deltaY / this.zoomY);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this._startScrollAnimationBySpeed(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this._pauseScrollAnimation();\n            datas.startZoom = [this.zoomX, this.zoomY];\n\n            const result = this.trigger(\"pinchStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n            this._setClientRect();\n        }).on(\"pinch\", e => {\n            const scale = e.scale;\n            const pinchDirection = this.options.pinchDirection;\n\n            this._triggerPinch({\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                inputEvent: e.inputEvent,\n                isWheel: false,\n                zoom: e.datas.startZoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        }).on(\"pinchEnd\", () => {\n            this._tempRect = null;\n        });\n\n        addEvent(wrapperElement, \"scroll\", this._onScroll);\n\n        if (options.useResizeObserver) {\n            const observer = new ResizeObserver(() => {\n                this.resize();\n            });\n\n            observer.observe(this._viewportElement);\n            observer.observe(this._containerElement);\n\n\n            this._onDestroys.push(() => {\n                observer.disconnect();\n            });\n        } else {\n            addEvent(window, \"resize\", this.resize);\n\n            this._onDestroys.push(() => {\n                removeEvent(window, \"resize\", this.resize);\n            })\n        }\n\n        if (options.useWheelPinch || options.useWheelScroll) {\n            addEvent(containerElement, \"wheel\", this.onWheel, {\n                passive: false,\n            });\n        }\n        if (options.useGesture) {\n            addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n                passive: false,\n            });\n            addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n                passive: false,\n            });\n        }\n        this.resize();\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoomX = DEFAULT_OPTIONS.zoomX,\n            zoomY = DEFAULT_OPTIONS.zoomY,\n            translateZ = 0,\n        } = this;\n        const {\n            useTransform = DEFAULT_OPTIONS.useTransform,\n        } = this.options;\n        const nextOffsetX = -offsetX * zoomX;\n        const nextOffsetY = -offsetY * zoomY;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n\n        const viewportStyle = this._viewportElement.style;\n\n        if (useTransform === false) {\n            viewportStyle.cssText += `position: relative; top: ${nextOffsetY}px; left: ${nextOffsetX}px;`;\n        } else {\n            viewportStyle.cssText += `transform-origin: 0 0;transform:translate3d(${nextOffsetX}px, ${nextOffsetY}px, ${translateZ}px) scale(${zoomX}, ${zoomY});`;\n        }\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX,\n            zoomY,\n        } = this;\n        const scrollLeft = this.getScrollLeft({ range: true }) * zoomX;\n        const scrollTop = this.getScrollTop({ range: true }) * zoomY;\n        const scrollWidth = this.getScrollWidth(true);\n        const scrollHeight = this.getScrollHeight(true);\n\n        this.horizontalScrollbar.render(\n            this.displayHorizontalScroll,\n            scrollLeft,\n            containerWidth,\n            scrollWidth,\n        );\n        this.verticalScrollbar.render(\n            this.displayVerticalScroll,\n            scrollTop,\n            containerHeight,\n            scrollHeight,\n        );\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private _onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const options = this.options;\n        const pinchDirection = options.pinchDirection;\n        const maxPinchWheel = options.maxPinchWheel || Infinity;\n\n        const isKeydown = e[`${this.wheelPinchKey}Key`] || e.ctrlKey;\n\n        if (options.useWheelPinch && isKeydown) {\n            let deltaY = e.deltaY;\n            const sign = deltaY >= 0 ? 1 : -1;\n            const distance = Math.min(maxPinchWheel, Math.abs(deltaY));\n\n\n            deltaY = sign * distance;\n            const delta = -deltaY;\n            const scale = Math.max(1 + delta * (options.wheelScale || 0.01), TINY_NUM);\n\n            clearTimeout(this._tempRectTimer);\n            this._tempRectTimer = window.setTimeout(() => {\n                this._tempRect = null;\n            }, 100);\n            this._triggerPinch({\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                zoomX: this.zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n                zoomY: this.zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n                inputEvent: e,\n                isWheel: true,\n                clientX: e.clientX,\n                clientY: e.clientY,\n                ratioX: 0,\n                ratioY: 0,\n            });\n        } else if (options.useWheelScroll) {\n            let deltaX = e.deltaX;\n            let deltaY = e.deltaY;\n\n            if (e.shiftKey && !deltaX) {\n                deltaX = deltaY;\n                deltaY = 0;\n            }\n            this.scrollBy(deltaX / this.zoomX, deltaY / this.zoomY);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this._tempScale = [this.zoomX, this.zoomY];\n        this._setClientRect();\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this._tempScale) {\n            this._tempScale =  [1, 1];\n            return;\n        }\n        const scale = e.scale;\n        const zoomX = this._tempScale[0];\n        const zoomY = this._tempScale[1];\n        const pinchDirection = this.options.pinchDirection;\n\n        this._triggerPinch({\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            inputEvent: e,\n            isWheel: true,\n            zoom: (zoomX + zoomY) * scale / 2,\n            zoomX: zoomX * (pinchDirection === \"vertical\" ? 1 : scale),\n            zoomY: zoomY * (pinchDirection === \"horizontal\" ? 1 : scale),\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ratioX: 0,\n            ratioY: 0,\n        });\n    }\n    private onGestureEnd = () => {\n\n    }\n    private _startZoomAnimation(dest: number[], options: ZoomOptions) {\n        if (!dest) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._setZoom(\n                [\n                    this.zoomX + dest[0] * distRatio,\n                    this.zoomY + dest[1] * distRatio,\n                ],\n                options,\n            ),\n            next => {\n                this._zoomTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimation(dest: number[], options: AnimationOptions) {\n        if (!dest[0] && !dest[1]) {\n            return;\n        }\n        const duration = options.duration;\n        const easing = options.easing || DEFAULT_EASING;\n\n        startAnimation(\n            distRatio => this._scrollBy(\n                dest[0] * distRatio,\n                dest[1] * distRatio,\n                options,\n            ),\n            next => {\n                this._scrollTimer = requestAnimationFrame(next);\n            },\n            {\n                easing,\n                duration,\n            },\n        );\n    }\n    private _startScrollAnimationBySpeed(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n\n        return this._startScrollAnimation(destPos, {\n            duration,\n        })\n\n    }\n    private _pauseScrollAnimation() {\n        cancelAnimationFrame(this._scrollTimer);\n        this._scrollTimer = 0;\n    }\n    private _pauseZoomAnimation() {\n        cancelAnimationFrame(this._zoomTimer);\n        this._zoomTimer = 0;\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private _triggerPinch(event: OnPinch) {\n        const {\n            clientX,\n            clientY,\n            zoomX,\n            zoomY,\n        } = event;\n        if (this.useAutoZoom) {\n            this._zoomByClient([zoomX, zoomY], clientX, clientY);\n        }\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const zoomRange = this.zoomRange;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const ratioX = (clientX - left) / width * 100;\n        const ratioY = (clientY - top) / height * 100;\n\n        this.trigger(\"pinch\", {\n            ...event,\n            zoom: between((zoomX + zoomY) / 2, zoomRange[0], zoomRange[1]),\n            zoomX: between(zoomX, zoomRange[0], zoomRange[1]),\n            zoomY: between(zoomY, zoomRange[0], zoomRange[1]),\n            ratioX,\n            ratioY,\n        });\n    }\n    private _setClientRect() {\n        const rect = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: rect.left,\n            top: rect.top,\n            width: rect.width,\n            height: rect.height,\n        };\n    }\n    private _zoomByClient(zoom: number[], clientX: number, clientY: number) {\n        if (!this._tempRect) {\n            this._setClientRect();\n        }\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = this._tempRect;\n        const options = this.options;;\n\n        const originalZoomOffsetX = options.zoomOffsetX;\n        const originalZoomOffsetY = options.zoomOffsetY;\n\n        options.zoomOffsetX = `${(clientX - left) / width * 100}%`;\n        options.zoomOffsetY = `${(clientY - top) / height * 100}%`;\n\n        this._setZoom(zoom, {\n            zoomBase: \"screen\",\n        });\n\n        options.zoomOffsetX = originalZoomOffsetX;\n        options.zoomOffsetY = originalZoomOffsetY;\n    }\n    private _setZoom(\n        zoom: number | number[],\n        zoomOptions: ZoomOptions = {},\n    ) {\n        const zoomBase = zoomOptions.zoomBase;\n        const {\n            containerWidth,\n            containerHeight,\n            zoomX: prevZoomX,\n            zoomY: prevZoomY,\n            zoomRange\n        } = this;\n        let {\n            zoomOffsetX = DEFAULT_OPTIONS.zoomOffsetX,\n            zoomOffsetY = DEFAULT_OPTIONS.zoomOffsetY,\n        } = this;\n        if (\"zoomOffsetX\" in zoomOptions) {\n            zoomOffsetX = zoomOptions.zoomOffsetX;\n        }\n        if (\"zoomOffsetY\" in zoomOptions) {\n            zoomOffsetY = zoomOptions.zoomOffsetY;\n        }\n\n\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n\n        const [zoomX, zoomY] = isArray(zoom) ? zoom : [zoom, zoom];\n        const nextZoomX = between(zoomX, zoomRange[0], zoomRange[1]);\n        const nextZoomY = between(zoomY, zoomRange[0], zoomRange[1]);\n        const options = this.options;\n\n        options.zoomX = nextZoomX;\n        options.zoomY = nextZoomY;\n        options.zoom = (nextZoomX + nextZoomY) / 2;\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n\n        let zoomXPos = 0;\n        let zoomYPos = 0;\n\n        if (zoomBase === \"viewport\") {\n            zoomXPos = (-scrollLeft + convertUnitSize(`${zoomOffsetX}`, this.viewportWidth)) * prevZoomX;\n            zoomYPos = (-scrollTop + convertUnitSize(`${zoomOffsetY}`, this.viewportHeight)) * prevZoomY;\n        } else {\n            zoomXPos = convertUnitSize(`${zoomOffsetX}`, containerWidth);\n            zoomYPos = convertUnitSize(`${zoomOffsetY}`, containerHeight);\n        }\n\n        const centerX = scrollLeft + zoomXPos / prevZoomX;\n        const centerY = scrollTop + zoomYPos / prevZoomY;\n\n        const nextCenterX = nextScrollLeft + zoomXPos / nextZoomX;\n        const nextCenterY = nextScrollTop + zoomYPos / nextZoomY;\n\n        this._scrollBy(centerX - nextCenterX, centerY - nextCenterY);\n        this.render();\n    }\n    private _scrollBy(deltaX: number, deltaY: number, options?: ScrollOptions) {\n        let scrollLeft = this.getScrollLeft();\n        let scrollTop = this.getScrollTop();\n\n        if (options?.absolute) {\n            scrollLeft *= this.zoomX;\n            scrollTop *= this.zoomY;\n        }\n        return this._scrollTo(scrollLeft + deltaX, scrollTop + deltaY, options);\n    }\n    private _scrollTo(x: number, y: number, options?: ScrollOptions) {\n        const {\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n\n        const isAbsolute = options?.absolute;\n        this._scrollToType(\"horizontal\", x, isAbsolute);\n        this._scrollToType(\"vertical\", y, isAbsolute);\n\n        const scrollLeft = this.scrollLeft;\n        const scrollTop = this.scrollTop;\n        this.render();\n        const nextScrollAbsoluteLeft = this.getScrollLeft();\n        const nextScrollAbsoluteTop = this.getScrollTop();\n\n        this._emitScrollEvent(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n\n        if (Math.round(prevScrollLeft) !== scrollLeft || Math.round(prevScrollTop) !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (\n                    scrollLeft !== Math.round(requestScrollLeft)\n                    || scrollTop !== Math.round(requestScrollTop)\n                ) {\n                    this._scrollTo(nextScrollAbsoluteLeft, nextScrollAbsoluteTop);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    private _scrollToType(type: \"horizontal\" | \"vertical\", coord: number, isAbsolute?: boolean) {\n        const names = NAMES[type];\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n        } = this;\n        const prevScrollPos = this[`scroll${names.pos}`];\n        const [minCoord, maxCoord] = this[`getRange${names.coord}`](true, true);\n\n        let scrollPos = Math.round(prevScrollPos);\n\n        const scrollAreaSize = this[`getScrollArea${names.size}`]();\n        const zoom = this[`zoom${names.coord}`];\n\n        if (isAbsolute) {\n            coord = coord / zoom;\n        }\n        const zoomCoord = coord * zoom;\n\n        if (minCoord === maxCoord) {\n            scrollPos = minCoord;\n            coord = minCoord / zoom;\n        } else if (zoomCoord - threshold <= minCoord) {\n            const minThreshold = Math.max(0, zoomCoord - minCoord);\n\n            scrollPos = minThreshold;\n            coord = (minCoord + minThreshold) / zoom;\n        } else if (zoomCoord + threshold >= maxCoord) {\n            const maxThreshold = Math.max(0, maxCoord - zoomCoord);\n\n            scrollPos = scrollAreaSize - maxThreshold;\n            coord = (maxCoord - maxThreshold) / zoom;\n        } else if (scrollPos < threshold) {\n            scrollPos += margin;\n        } else if (scrollPos > scrollAreaSize - threshold) {\n            scrollPos -= margin;\n        }\n\n        scrollPos = Math.round(scrollPos);\n\n        this[`scroll${names.pos}`] = scrollPos;\n        this[`offset${names.coord}`] = coord - scrollPos / zoom;\n    }\n    private _getRangeCoord(type: \"vertical\" | \"horizontal\", isZoom?: boolean, isReal?: boolean) {\n        const {\n            margin = DEFAULT_OPTIONS.margin,\n            threshold,\n        } = this;\n\n        const names = NAMES[type];\n        const rangeCoord = checkDefault(this[`range${names.coord}`], DEFAULT_OPTIONS[`range${names.coord}`]);\n        const rangeOffsetCoord = checkDefault(this[`rangeOffset${names.coord}`], DEFAULT_OPTIONS[`rangeOffset${names.coord}`]);\n        const zoom = this[`zoom${names.coord}`];\n        const range = getRange(\n            this[`getScroll${names.pos}`](),\n            margin,\n            rangeCoord,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return [range[0] + rangeOffsetCoord[0], range[1] + rangeOffsetCoord[1]];\n        }\n        return [\n            range[0] * zoom + rangeOffsetCoord[0],\n            Math.max(this[`viewport${names.size}`] * zoom - this[`container${names.size}`], range[1] * zoom + rangeOffsetCoord[1]),\n        ];\n    }\n    private _emitScrollEvent(scrollLeft: number, scrollTop: number) {\n        const prevScrollLeft = this._asLeft;\n        const prevScrollTop = this._asTop;\n\n        if (prevScrollLeft === scrollLeft && prevScrollTop === scrollTop) {\n            return;\n        }\n        this._asLeft = scrollLeft;\n        this._asTop = scrollTop;\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft,\n            scrollTop,\n        });\n    }\n}\n\ninterface InfiniteViewer extends InfiniteViewerProperties { }\n\nexport default InfiniteViewer;\n"],"names":["DEFAULT_EASING","x","Math","pow","IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","SCROLL_BAR_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","zoomX","zoomY","rangeX","Infinity","rangeY","rangeOffsetX","rangeOffsetY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","useAutoZoom","useMouseDrag","pinchThreshold","cspNonce","maxPinchWheel","wheelScale","displayHorizontalScroll","displayVerticalScroll","useTransform","useWheelPinch","zoomRange","wheelPinchKey","useWheelScroll","zoomOffsetX","zoomOffsetY","translateZ","useGesture","useResizeObserver","pinchDirection","preventWheelClick","NAMES","horizontal","pos","coord","size","vertical","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArray","getDuration","speed","a","normalSpeed","sqrt","abs","v","checkDefault","value","defaultValue","startAnimation","callback","timerCallback","options","next","now","Date","t","startTime","ratio","easing","duration","prevRatio","prevTime","type","container","thumbElement","_super","isHorizontal","_this","e","delta","deltaX","deltaY","preventDefault","trigger","barElement","querySelector","document","createElement","insertBefore","isAppend","addClass","gesto","Gesto","window","on","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","thumbRect","getBoundingClientRect","pos1","pos2","clientPos","scrollSize","scrollBy","stopPropagation","addEvent","onWheel","passive","__extends","__proto","this","isDisplay","_a","dirName1","sizeName","style","cssText","removeEvent","off","EventEmitter","_containerElement","viewportElement","containerWidth","containerHeight","_b","_viewportElement","viewportWidth","viewportHeight","render","_scrollBy","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","isKeydown","ctrlKey","sign","distance","min","scale","max","clearTimeout","_tempRectTimer","_tempRect","_triggerPinch","rotation","isWheel","clientX","clientY","ratioX","ratioY","shiftKey","_tempScale","_setClientRect","isFlag","Element","nextElementSibling","init","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","containerElement","_onDestroys","forEach","_onScroll","onGestureStart","onGestureChange","onGestureEnd","range","absolute","isObject","offsetY","getRangeY","offsetX","getRangeX","isZoom","resize","left","top","_pauseScrollAnimation","_startScrollAnimation","_scrollTo","y","deltaZoom","_pauseZoomAnimation","isArray","_startZoomAnimation","_setZoom","isReal","_getRangeCoord","observer_1","firstChild","ScrollBar","inject","nonce","events","stop","isMouseEvent","dragFlag","startEvent","dt","time","prevSpeed","isPinch","movement","isDrag","isDouble","_startScrollAnimationBySpeed","startZoom","ResizeObserver","observe","push","disconnect","_c","_d","_e","nextOffsetX","nextOffsetY","viewportStyle","getScrollAreaWidth","getScrollAreaHeight","renderScroll","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","dest","distRatio","_zoomTimer","_scrollTimer","destPos","cancelAnimationFrame","event","_zoomByClient","between","rect","getContainer","width","height","originalZoomOffsetX","originalZoomOffsetY","zoomBase","zoomOptions","prevZoomX","prevZoomY","nextZoomX","nextZoomY","nextScrollLeft","nextScrollTop","zoomXPos","zoomYPos","convertUnitSize","prevScrollLeft","prevScrollTop","isAbsolute","_scrollToType","nextScrollAbsoluteLeft","nextScrollAbsoluteTop","_emitScrollEvent","round","move","requestScrollLeft","requestScrollTop","names","prevScrollPos","minCoord","maxCoord","scrollPos","scrollAreaSize","zoomCoord","maxThreshold","rangeCoord","rangeOffsetCoord","isFinite","floor","ceil","_asLeft","_asTop","prototype","property","attributes","enumerable","configurable","get","setter","set","Object","defineProperty","InfiniteViewer","modules"],"mappings":";;;;;;;;2wnBA+H8B,SAAjBA,GAAkBC,GAAc,OAAA,EAAIC,KAAKC,IAAI,EAAIF,EAAG,CAAhB,CAAkB,CA1H5D,oCACMG,GAAmC,k0DAAjBC,QAAQC,KAE1BC,EAAS,mBAETC,GAAqB,UAAGD,WAAH,EACrBE,GAAyB,UAAGF,eAAH,EAEzBG,GAAwB,UAAGH,cAAH,EACxBI,GAAmC,UAAGJ,yBAAH,EACnCK,GAAiC,UAAGL,uBAAH,EACjCM,GAA0B,UAAGN,gBAAH,EAE1BO,OAA4BP,KAAQ,s+DAwEpCQ,EAAkB,CAC3BC,OAAQ,IACRC,UAAW,IACXC,KAAM,EACNC,MAAO,EACPC,MAAO,EACPC,OAAQ,CAAEC,CAAAA,QAAUA,EAAAA,GACpBC,OAAQ,CAAED,CAAAA,EAAAA,EAAUA,EAAAA,GACpBE,aAAc,CAAC,EAAG,GAClBC,aAAc,CAAC,EAAG,GAClBC,eAAgB,KAChBC,kBAAmB,KACnBC,wBAAyB,KACzBC,sBAAuB,KACvBC,SAAU,CAAA,EACVC,YAAa,CAAA,EACbC,aAAc,CAAA,EACdC,eAAgB,GAChBC,SAAU,GACVC,cAAeb,EAAAA,EACfc,WAAY,IACZC,wBAAyB,CAAA,EACzBC,sBAAuB,CAAA,EACvBC,aAAc,CAAA,EACdC,cAAe,CAAA,EACfC,UAAW,CAAC,KAAOnB,EAAAA,GACnBoB,cAAe,OACfC,eAAgBvC,GAChBwC,YAAa,MACbC,YAAa,MACbC,WAAY,EACZC,WAAY,CAAA,EACZC,kBAAmB,CAAA,EACnBC,eAAgB,MAChBC,kBAAmB,CAAA,CAlCQ,EAsClBC,GAAQ,CACjBC,WAAY,CACRC,IAAK,OACLC,MAAO,IACPC,KAAM,SAEVC,SAAU,CACNH,IAAK,MACLC,MAAO,IACPC,KAAM,SATO,EAeRE,GAAa3C,GAAS4C,UAKtBC,GAAa,CACtB,SACA,YACA,cACA,cACA,OACA,QACA,QACA,SACA,SACA,eACA,eACA,WACA,eACA,iBACA,gBACA,aACA,wBACA,0BACA,iBACA,aACA,cACA,gBACA,YACA,kBAMSC,EAAUC,OAEhBF,QACH,oBACA,WACA,aACA,WACA,iBACA,oBACA,wBACA,0BACA,kCC3KYG,GAAYC,EAAiBC,GACnCC,EAAc/D,KAAKgE,KAAKH,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,EAAjD,EAEpB,OAAO7D,KAAKiE,IAAIF,EAAcD,CAAvB,CACV,UAaeG,EAAIC,GAChB,OAAOlE,KAAKiE,IAAIC,CAAT,CACV,UAwBeC,GAAgBC,EAA6BC,GACzD,OAAgB,MAATD,EAAgBA,EAAQC,CAClC,UAIeC,GACZC,EACAC,EACAC,GAOa,SAAPC,IACF,IAAMC,EAAMC,KAAKD,MACbE,EAAIF,EAAMG,EAKRC,EAAQC,GAFVH,EADAI,EAAWJ,EACPI,EAEaJ,GAAII,CAAL,EACdC,EAAYF,GAAQG,EAAWL,GAAaG,CAA1B,EAExBE,EAAWR,EAEXJ,EAASQ,EAAQG,CAAT,EAECD,GAALJ,GAGJL,EAAcE,CAAD,EAtBjB,IAAMO,EAAWR,EAAQQ,SACnBD,EAASP,EAAQO,QAAW,SAACjF,GAAc,OAAA,EAAIC,KAAKC,IAAI,EAAIF,EAAG,CAAhB,GAC/C+E,EAAYF,KAAKD,MACnBQ,EAAWL,EAqBfN,EAAcE,CAAD,CAChB,CCzFD,ICNWtE,kBDgBP,WACYgF,EACRC,GAFJ,IAMQC,IAFJC,WAAA,QACMC,GAJEC,OAAAL,EAVLK,WAAoB,CAAA,EAInBA,MAAc,EACdA,OAAe,EACfA,aAAqB,EACrBA,eAAe,CAAA,EAgGfA,UAAU,SAACC,GACf,IAAMC,EAAQF,EAAKD,aAAeE,EAAEE,OAASF,EAAEG,OAE3CF,GACAD,EAAEI,iBAENL,EAAKM,QAAQ,SAAU,CACnBJ,QADJ,GA/F8B,eAATP,GAEjBY,EAA0BX,SAEzBA,EAODC,EAAeD,EAAUY,cAAc,WAAItF,EAAJ,CAAxB,GANfqF,EAAaE,SAASC,cAAc,KAAvB,EACbb,EAAeY,SAASC,cAAc,KAAvB,EAEfH,EAAWI,aAAad,EAAc,IAAtC,EACAG,EAAKY,SAAW,CAAA,GAIpBC,EACIN,EACAR,EAAe/E,GACTC,EAHF,EAKR4F,EAASN,EAAYxF,EAAb,EACR8F,EAAShB,EAAc3E,EAAf,EAER8E,EAAKH,aAAeA,EACpBG,EAAKO,WAAaA,EAClBP,EAAKD,aAAeA,EACpBC,EAAKc,MAAQ,IAAIC,EAAMR,EAAY,CAC/BX,UAAWoB,OADF,EAEVC,GAAG,YAAa,SAAAhB,GACf,IAAMiB,EAASjB,EAAEkB,WAAWD,OACtBE,EAAQnB,EAAEmB,MACVC,EAAUrB,EAAKH,eAAiBqB,EAEjCG,GACDC,WAAW,WACPC,sBAAsB,WAClB,IAAMC,EAAYxB,EAAKH,aAAa4B,wBAC9BC,EAAOF,EAAUzB,EAAe,OAAS,OAEzC4B,EAAOD,EADKF,EAAUzB,EAAe,QAAU,UAE/C6B,EAAY3B,EAAEF,EAAe,UAAY,WAE3C2B,GAAQE,GAAaA,GAAaD,IAIhCzB,GADAtC,EAAOoC,EAAKpC,MACGA,EAAOoC,EAAK6B,WAEjC7B,EAAK8B,SAASJ,EAAOE,EAAY1B,EAAQ,CAACA,CAA1C,GAbiB,GAetB,GAhBO,EAmBdkB,EAAMC,QAAUA,EAChBpB,EAAEkB,WAAWY,kBACb9B,EAAEkB,WAAWd,iBA7BJ,EA8BVY,GAAG,OAAQ,SAAAhB,GACLA,EAAEmB,MAAMC,SAGbrB,EAAK8B,SAAS9B,EAAKD,aAAeE,EAAEE,OAASF,EAAEG,MAA/C,EAlCS,EAoCb4B,EAAShC,EAAKO,WAAY,QAASP,EAAKiC,QAAS,CAC7CC,QAAS,CAAA,EADL,IA3EuBC,yBAkHvC,OAnCWC,WAAP,SAAgBlC,GACNZ,GAAgB+C,KAAKzE,KAE3ByE,KAAK/B,QAAQ,SAAU,CACnBJ,MAAOmC,KAAKR,WAAavC,EAD7B,GAIG8C,SAAP,SAAcE,EAAoB5E,EAAaE,EAAciE,GACzDQ,KAAK3E,IAAMA,EACX2E,KAAKzE,KAAOA,EACZyE,KAAKR,WAAaA,EAElB,IACMU,EAAuBF,KAAKtC,aAAe,CAAC,IAAK,SAAW,CAAC,IAAK,UAAjEyC,OAAUC,OAEjBJ,KAAK9B,WAAWmC,MAAMC,QAAU,mBAHhBL,GAA2B1E,EAAbiE,EAAqB,QAAU,UAG7B,EAChCQ,KAAKxC,aAAa6C,MAAMC,SACjB,UAAGF,MAAH,SAAgB7E,EAAOA,EAAOiE,OAA9B,EACD,8BAAuBW,KAAvB,SAAmC9E,EAAMmE,EAAajE,OAAtD,GAEHwE,UAAP,WACIQ,EAAYP,KAAK9B,WAAY,QAAS8B,KAAKJ,OAAhC,EACXI,KAAKvB,MAAM+B,MACXR,KAAKQ,QAtGb,EAAuCC,kBENvC,4DAAmE,OAAvBX,QAA5C,cCmEI,WACYY,EACRC,EACAhE,gBADAgE,mBACAhE,MAHJ,MAKIc,WAAA,eAJQE,oBAAA+C,EAxBJ/C,UAAkB,EAClBA,UAAkB,EAClBA,iBAAyB,EACzBA,kBAA0B,EAC1BA,gBAAwB,EACxBA,iBAAyB,EACzBA,aAAqB,EACrBA,YAAoB,EACpBA,eAAe,EACfA,aAAa,EAEbA,mBAAuC,KACvCA,WAAoB,CAAA,EACpBA,SAAkB,CAAA,EAClBA,aAAuB,CAAC,EAAG,GAC3BA,YAAiF,KACjFA,iBAAgC,KAChCA,cAAiC,GACjCA,UAAU,EACVA,SAAS,EA4JVA,SAAS,WACN,IAAAuC,EAGFvC,EAAK+C,kBAFQE,gBACCC,iBAEZC,EAGFnD,EAAKoD,iBAFQC,gBACCC,iBAGlBtD,EAAKiD,eAAiBA,EACtBjD,EAAKkD,gBAAkBA,EACvBlD,EAAKqD,cAAgBA,EACrBrD,EAAKsD,eAAiBA,EAEtBtD,EAAKuD,SACLvD,EAAKwD,UAAU,EAAG,CAAlB,GA2aIxD,YAAY,WACV,IAAAuC,EAA4BvC,EAAKjE,eAA/B0H,eAAYC,cAEhBP,EACAnD,OADAzE,aAAOH,EAAgBG,OAErB4E,EAASsD,EAAazD,EAAKyD,WAC3BrD,EAASsD,EAAY1D,EAAK0D,UAC1BC,EAAmB3D,EAAK4D,gBACxBC,EAAkB7D,EAAK8D,eAEzB9D,EAAK+D,SACL/D,EAAK+D,OAAS,CAAA,GAElB/D,EAAKyD,WAAaA,EAClBzD,EAAK0D,UAAYA,EACjB1D,EAAKgE,SACDL,EAAmBxD,EAAS5E,EAC5BsI,EAAkBzD,EAAS7E,CAF/B,GAKIyE,UAAU,SAACC,GACf,IAAMjB,EAAUgB,EAAKhB,QACf1B,EAAiB0B,EAAQ1B,eACzBd,EAAgBwC,EAAQxC,eAAiBb,EAAAA,EAEzCsI,EAAYhE,EAAE,UAAGD,EAAKjD,mBAAR,IAA+BkD,EAAEiE,QAErD,GAAIlF,EAAQnC,eAAiBoH,EAAW,CAE9BE,EAAiB,IAAV/D,EADAH,EAAEG,QACY,EAAI,CAAC,EAC1BgE,EAAW7J,KAAK8J,IAAI7H,EAAejC,KAAKiE,IAAI4B,CAAT,CAAxB,EAIXF,EAAQ,EADdE,EAAS+D,EAAOC,GAEVE,EAAQ/J,KAAKgK,IAAI,EAAIrE,GAASlB,EAAQvC,YAAc,KLvd9C,IKudE,EAEd+H,aAAaxE,EAAKyE,cAAN,EACZzE,EAAKyE,eAAiBzD,OAAOM,WAAW,WACpCtB,EAAK0E,UAAY,MAClB,GAFmB,EAGtB1E,EAAK2E,cAAc,CACfP,WACAE,QACAM,SAAU,EACVrJ,KAAMyE,EAAKzE,KAAO+I,EAClB9I,MAAOwE,EAAKxE,OAA4B,aAAnB8B,EAAgC,EAAIgH,GACzD7I,MAAOuE,EAAKvE,OAA4B,eAAnB6B,EAAkC,EAAIgH,GAC3DnD,WAAYlB,EACZ4E,QAAS,CAAA,EACTC,QAAS7E,EAAE6E,QACXC,QAAS9E,EAAE8E,QACXC,OAAQ,EACRC,OAAQ,EAZZ,MAcG,CAAA,GAAIjG,CAAAA,EAAQhC,eAUf,OATA,IAAImD,EAASF,EAAEE,OACXC,EAASH,EAAEG,OAEXH,EAAEiF,UAAY,CAAC/E,IACfA,EAASC,EACTA,EAAS,GAEbJ,EAAK8B,SAAS3B,EAASH,EAAKxE,MAAO4E,EAASJ,EAAKvE,KAAjD,EAIJwE,EAAEI,kBAEEL,iBAAiB,SAACC,GACtBD,EAAKmF,WAAa,CAACnF,EAAKxE,MAAOwE,EAAKvE,OACpCuE,EAAKoF,iBACLnF,EAAEI,kBAEEL,kBAAkB,SAACC,GAEvB,IAIMqE,EACA9I,EACAC,EACA6B,EARN2C,EAAEI,iBACEL,EAAKc,MAAMuE,UAAY,CAACrF,EAAKmF,WAC7BnF,EAAKmF,WAAc,CAAC,EAAG,IAGrBb,EAAQrE,EAAEqE,MACV9I,EAAQwE,EAAKmF,WAAW,GACxB1J,EAAQuE,EAAKmF,WAAW,GACxB7H,EAAiB0C,EAAKhB,QAAQ1B,eAEpC0C,EAAK2E,cAAc,CACfP,SAAU,EACVE,QACAM,SAAU3E,EAAE2E,SACZzD,WAAYlB,EACZ4E,QAAS,CAAA,EACTtJ,MAAOC,EAAQC,GAAS6I,EAAQ,EAChC9I,MAAOA,GAA4B,aAAnB8B,EAAgC,EAAIgH,GACpD7I,MAAOA,GAA4B,eAAnB6B,EAAkC,EAAIgH,GACtDQ,QAAS7E,EAAE6E,QACXC,QAAS9E,EAAE8E,QACXC,OAAQ,EACRC,OAAQ,EAZZ,IAeIjF,eAAe,aA/qBfgD,aAA2BsC,SAC3BtF,EAAKoD,iBAAmBJ,EACxBhD,EAAKhB,eACE5D,GACA4D,KAGPgB,EAAKoD,iBAAmBL,EAAkBwC,mBAC1CvF,EAAKhB,eACE5D,GACA4H,IAGXhD,EAAKwF,SApDgBrD,6BA6jC7B,OApgCWC,eAAP,WACI,OAAOC,KAAKU,mBAKTX,cAAP,WACI,OAAOC,KAAKe,kBAKThB,aAAP,WACI,OAAOC,KAAKtG,gBAKTqG,eAAP,WACI,OAAOC,KAAKrG,mBAKToG,UAAP,WACIC,KAAKQ,MACLR,KAAKvB,MAAM2E,QACXpD,KAAKqD,kBAAkBC,UACvBtD,KAAKuD,oBAAoBD,UACzBtD,KAAKwD,aAAaF,UAClB,IAAMG,EAAmBzD,KAAKU,kBAE9BV,KAAK0D,YAAYC,QAAQ,SAAAlH,GACrBA,IADJ,EAGA8D,EAAYP,KAAKtG,eAAgB,SAAUsG,KAAK4D,SAArC,EACXrD,EAAYkD,EAAkB,QAASzD,KAAKJ,OAAjC,EACXW,EAAYkD,EAAkB,eAAgBzD,KAAK6D,cAAxC,EACXtD,EAAYkD,EAAkB,gBAAiBzD,KAAK8D,eAAzC,EACXvD,EAAYkD,EAAkB,cAAezD,KAAK+D,YAAvC,EAEX/D,KAAKvB,MAAQ,KACbuB,KAAKwD,aAAe,KACpBxD,KAAKU,kBAAoB,KACzBV,KAAKe,iBAAmB,KACxBf,KAAKrD,QAAU,MAKZoD,eAAP,SAAoBpD,GAChB,IAAIqH,EAAQ,CAAA,EACRC,EAAW,CAAA,EAQT/K,GANFgL,EAJYvH,gBAIHA,CAAD,GACRqH,EAAQrH,EAAQqH,MAChBC,EAAWtH,EAAQsH,UAEnBD,EAAQrH,EAECqD,KAAK5G,OACZiC,EAAM2E,KAAKqB,UAAYnI,EAAO8G,KAAKmE,SAClCH,EAAQ7H,EAAI6D,KAAKoE,YAAY,EAAlB,EAAwB,GAE1C,OAAOH,EAAW5I,EAAMnC,EAAOmC,GAK5B0E,gBAAP,SAAqBpD,GACjB,IAAIqH,EAAQ,CAAA,EACRC,EAAW,CAAA,EAQT/K,GANFgL,EAJavH,gBAIJA,CAAD,GACRqH,EAAQrH,EAAQqH,MAChBC,EAAWtH,EAAQsH,UAEnBD,EAAQrH,EAECqD,KAAK7G,OACZkC,EAAM2E,KAAKoB,WAAalI,EAAO8G,KAAKqE,SACnCL,EAAQ7H,EAAI6D,KAAKsE,YAAY,EAAlB,EAAwB,GAE1C,OAAOL,EAAW5I,EAAMnC,EAAOmC,GAK5B0E,iBAAP,SAAsBwE,GACZP,EAAQhE,KAAKsE,UAAUC,CAAf,EAEd,OAAOvE,KAAKY,eAAiBzE,EAAI6H,EAAM,EAAP,EAAa7H,EAAI6H,EAAM,EAAP,GAK7CjE,kBAAP,SAAuBwE,GACbP,EAAQhE,KAAKoE,UAAUG,CAAf,EAEd,OAAOvE,KAAKa,gBAAkB1E,EAAI6H,EAAM,EAAP,EAAa7H,EAAI6H,EAAM,EAAP,GAM9CjE,eAAP,SAAoBpD,GAChBqD,KAAKwE,SAEL,IAAMrL,EAAQ6G,KAAK7G,MACbC,EAAQ4G,KAAK5G,MAEfqL,EAAO,EAAEzE,KAAKY,eAAiBzH,EAAQ6G,KAAKgB,eAAiB,EAC7D0D,EAAM,EAAE1E,KAAKa,gBAAkBzH,EAAQ4G,KAAKiB,gBAAkB,EAQlE,OANItE,MAAAA,GAAAA,EAASsH,WACTQ,GAAQtL,EACRuL,GAAOtL,GAIJ4G,KAAK2B,SAAS8C,EAAMC,EAAK/H,CAAzB,GA2BJoD,WAAP,SAAgBjC,EAAgBC,EAAgBpB,GAE5C,IACQyE,EACAC,EAFR,OADArB,KAAK2E,wBACAhI,GAAYA,EAAQQ,UAUrB6C,KAAK4E,sBAAsB,CAAC9G,EAAQC,GAASpB,CAA7C,EACO,CAAA,IAVHyE,EAAapB,KAAKuB,gBAClBF,EAAYrB,KAAKyB,eAEjB9E,MAAAA,GAAAA,EAASsH,WACT7C,GAAcpB,KAAK7G,MACnBkI,GAAarB,KAAK5G,OAEf4G,KAAK6E,UAAUzD,EAAatD,EAAQuD,EAAYtD,EAAQpB,CAAxD,IAWRoD,WAAP,SAAgB9H,EAAW6M,EAAWnI,GAElC,IAGQyE,EACAC,EAJR,OADArB,KAAK2E,wBACAhI,GAAYA,EAAQQ,UAGjBiE,EAAapB,KAAKuB,gBAClBF,EAAYrB,KAAKyB,eAEjB9E,MAAAA,GAAAA,EAASsH,WACT7C,GAAcpB,KAAK7G,MACnBkI,GAAarB,KAAK5G,OAEf4G,KAAKP,SAASxH,EAAImJ,EAAY0D,EAAIzD,EAAW1E,CAA7C,GATAqD,KAAK6E,UAAU5M,EAAG6M,EAAGnI,CAArB,GAeRoD,SAAP,SAAcgF,EAA8BpI,GACxCqD,KAAKgF,sBACC,IAAA9E,EAAmB+E,EAAQF,CAAD,EAC9BA,EACA,CAACA,EAAWA,GAFPjH,OAAQC,OAIVpB,GAAYA,EAAQQ,SAMrB6C,KAAKkF,oBAAoB,CAACpH,EAAQC,GAASpB,CAA3C,EALAqD,KAAKmF,SAAS,CACVnF,KAAK7G,MAAQ2E,EACbkC,KAAK5G,MAAQ2E,GACdpB,CAHH,GAWDoD,UAAP,SAAe7G,EAAyByD,GAGpC,IAGWxD,EAAOC,EALlB4G,KAAKgF,sBAEArI,GAAYA,EAAQQ,UAGdhE,GAAD+G,EAAiB+E,EAAQ/L,CAAD,EAC5BA,EACA,CAACA,EAAMA,OAFKE,OAGd4G,KAAKkF,oBAAoB,CACrB/L,EAAQ6G,KAAK7G,MACbC,EAAQ4G,KAAK5G,OACduD,CAHH,GALAqD,KAAKmF,SAASjM,EAAMyD,CAApB,GAcDoD,UAAP,WACI,OAAQC,KAAK7G,MAAQ6G,KAAK5G,OAAS,GAMhC2G,WAAP,WACI,OAAOC,KAAK7G,OAMT4G,WAAP,WACI,OAAOC,KAAK5G,OAKT2G,YAAP,SAAiBwE,EAAkBa,GAC/B,OAAOpF,KAAKqF,eAAe,aAAcd,EAAQa,CAA1C,GAKJrF,YAAP,SAAiBwE,EAAkBa,GAC/B,OAAOpF,KAAKqF,eAAe,WAAYd,EAAQa,CAAxC,GAGHrF,OAAR,WAAA,IAiOcuF,SA7NJ7B,EAAmBzD,KAAKU,kBACxB/D,EAAUqD,KAAKrD,QAGjBjD,EAAiBiD,EAAQjD,gBACtB+J,EAAiBtF,cAAc,WAAI3F,EAAJ,CAA/B,EACHmB,EAAoBgD,EAAQhD,mBACzB8J,EAAiBtF,cAAc,WAAI1F,EAAJ,CAA/B,EACDmB,EAA0B+C,EAAQ/C,yBACjC6J,EAAiBtF,cAAc,WAAIxF,EAAJ,CAA/B,EACDkB,EAAwB8C,EAAQ9C,uBAC/B4J,EAAiBtF,cAAc,WAAIvF,EAAJ,CAA/B,EAEHc,KAGAA,EAAiB0E,SAASC,cAAc,KAAvB,GACFC,aAAa0B,KAAKe,iBAAkB,IAAnD,EACA0C,EAAiBnF,aAAa5E,EAAgB,IAA9C,GAEAsG,KAAKtG,eAAiBA,EAGtBC,IAGAA,EAAoByE,SAASC,cAAc,KAAvB,EAEpB3E,EAAe4E,aAAa3E,EAAmBD,EAAe6L,UAA9D,GAEAvF,KAAKrG,kBAAoBA,EAE7B6E,EAASiF,EAAkBhI,EAAnB,EACR+C,EAAS9E,EAAgBlB,EAAjB,EACRgG,EAAS7E,EAAmBlB,EAApB,EAERuH,KAAKuD,oBAAsB,IAAIiC,GAAU,aAAc5L,CAA5B,EAC3BoG,KAAKqD,kBAAoB,IAAImC,GAAU,WAAY3L,CAA1B,EAEzBmG,KAAKuD,oBAAoB3E,GAAG,SAAU,SAAAhB,GAClCD,EAAK8B,SAAS7B,EAAEC,MAAQF,EAAKxE,MAAO,CAApC,EADJ,EAIA6G,KAAKqD,kBAAkBzE,GAAG,SAAU,SAAAhB,GAChCD,EAAK8B,SAAS,EAAG7B,EAAEC,MAAQF,EAAKvE,KAAhC,EADJ,EAII4G,KAAKuD,oBAAoBhF,UACzBkF,EAAiBnF,aAAa0B,KAAKuD,oBAAoBrF,WAAY,IAAnE,EAEA8B,KAAKqD,kBAAkB9E,UACvBkF,EAAiBnF,aAAa0B,KAAKqD,kBAAkBnF,WAAY,IAAjE,EAEJ8B,KAAKwD,aAAe1K,GAAS2M,OAAOhC,EAAkB,CAClDiC,MAAO1F,KAAKrD,QAAQzC,SADJ,EAqFpB8F,KAAKvB,MAAQ,IAAIC,EAAM+E,EAAkB,CACrClG,UAAWoB,OACXgH,OAAQ,CAAC,QAAS,SAClBzK,kBAAmB,SAAA8E,KAAKrD,QAAQzB,sBAHvB,EAIV0D,GAAG,YAAa,SAAAhB,GAEX,IAAAkB,EAGAlB,aAFAgI,EAEAhI,OADAmB,EACAnB,QACA,CAACD,EAAK3D,cAAgB4D,EAAEiI,eAI5BlI,EAAKgH,yBACLhH,EAAKmI,SAAW,CAAA,KACDnI,EAAKM,QAAQ,YAAaL,CAA1B,GAGXgI,KAGJ9G,EAAWd,iBACXe,EAAMgH,WAAajH,GAvBV,EAwBVF,GAAG,OAAQ,SAAAhB,OJ7fOA,EAUnBoI,EATElI,EAAQC,EACVkI,EACAC,EI2fM,CAACvI,EAAKhB,QAAQ7C,UAAY8D,EAAEuI,SAAYxI,EAAK3D,cAAgB4D,EAAEiI,cAC/DlI,EAAKM,QAAQ,cACNL,IACHkB,WAAYlB,EAAEkB,YAFlB,EJ9fJhB,GADiBF,EImgBAA,UJlgBTG,EAAkBH,SAAVmB,EAAUnB,QAC5BqI,EAAOnJ,KAAKD,OACZqJ,EAAYnH,EAAMhD,QAOlBiK,EAAKC,EAAOlH,EAAMkH,KACxBlH,EAAMhD,MAAQ,CAACmK,EAAU,GAAK,EAAIpI,EAASkI,EAAIE,EAAU,GAAK,EAAInI,EAASiI,KALvEjH,EAAMhD,MAAQ,CAAC,EAAG,GAClBgD,EAAMkH,KAAOA,GI6fLtI,EAAK8B,SAAS,CAAC7B,EAAEE,OAASH,EAAKxE,MAAO,CAACyE,EAAEG,OAASJ,EAAKvE,KAAvD,GACO,CAACuE,EAAKmI,UAAYlI,EAAEwI,SAAWzJ,EAAQ1C,iBAC9C0D,EAAKmI,SAAW,CAAA,EAEhBnI,EAAKM,QAAQ,aAAc,CACvBa,WAAYlB,EAAEmB,MAAMgH,YAAcnI,EAAEkB,WADxC,GAnCK,EAuCVF,GAAG,UAAW,SAAAhB,GACbD,EAAKM,QAAQ,UAAW,CACpBoI,OAAQzI,EAAEyI,OACVC,SAAU1I,EAAE0I,SACZxH,WAAYlB,EAAEkB,WAHlB,EAKAnB,EAAK4I,6BAA6B3I,EAAEmB,MAAMhD,KAA1C,EA7CS,EA8CV6C,GAAG,aAAc,SAACsB,OAAEpB,eAAYC,UAAO6G,SACtC9G,EAAWd,iBACXL,EAAKgH,wBAMU,EALf5F,EAAMyH,UAAY,CAAC7I,EAAKxE,MAAOwE,EAAKvE,UAErBuE,EAAKM,QAAQ,aAAc,CACtCa,aADW,GAIX8G,IAEJjI,EAAKoF,iBAzDI,EA0DVnE,GAAG,QAAS,SAAAhB,GACX,IAAMqE,EAAQrE,EAAEqE,MACVhH,EAAiB0C,EAAKhB,QAAQ1B,eAEpC0C,EAAK2E,cAAc,CACfC,SAAU3E,EAAE2E,SACZR,SAAUnE,EAAEmE,SACZE,MAAOrE,EAAEqE,MACTnD,WAAYlB,EAAEkB,WACd0D,QAAS,CAAA,EACTtJ,KAAM0E,EAAEmB,MAAMyH,UAAYvE,EAC1B9I,MAAOwE,EAAKxE,OAA4B,aAAnB8B,EAAgC,EAAIgH,GACzD7I,MAAOuE,EAAKvE,OAA4B,eAAnB6B,EAAkC,EAAIgH,GAC3DQ,QAAS7E,EAAE6E,QACXC,QAAS9E,EAAE8E,QACXC,OAAQ,EACRC,OAAQ,EAZZ,EA9DS,EA4EVhE,GAAG,WAAY,WACdjB,EAAK0E,UAAY,KA7ER,EAgFb1C,EAASjG,EAAgB,SAAUsG,KAAK4D,SAAhC,EAEJjH,EAAQ3B,oBACFsK,EAAW,IAAImB,eAAe,WAChC9I,EAAK6G,SADQ,GAIRkC,QAAQ1G,KAAKe,gBAAtB,EACAuE,EAASoB,QAAQ1G,KAAKU,iBAAtB,EAGAV,KAAK0D,YAAYiD,KAAK,WAClBrB,EAASsB,aADb,IAIAjH,EAAShB,OAAQ,SAAUqB,KAAKwE,MAAxB,EAERxE,KAAK0D,YAAYiD,KAAK,WAClBpG,EAAY5B,OAAQ,SAAUhB,EAAK6G,MAAxB,EADf,IAKA7H,EAAQnC,eAAiBmC,EAAQhC,iBACjCgF,EAAS8D,EAAkB,QAASzD,KAAKJ,QAAS,CAC9CC,QAAS,CAAA,EADL,EAIRlD,EAAQ5B,aACR4E,EAAS8D,EAAkB,eAAgBzD,KAAK6D,eAAgB,CAC5DhE,QAAS,CAAA,EADL,EAGRF,EAAS8D,EAAkB,gBAAiBzD,KAAK8D,gBAAiB,CAC9DjE,QAAS,CAAA,EADL,GAIZG,KAAKwE,UAEDzE,SAAR,WACU,IAAAG,EAMFF,KALAqE,YACAF,YACArD,UAAA3H,aAAQJ,EAAgBI,QACxB0N,UAAAzN,aAAQL,EAAgBK,QACxB0N,eAAAhM,aAAa,IAGbiM,EACA/G,KAAKrD,qBADLpC,aAAexB,EAAgBwB,eAE7ByM,EAAc,CAAC3C,EAAUlL,EACzB8N,EAAc,CAAC9C,EAAU/K,EAMzB8N,GAJNlH,KAAKrG,kBAAkB0G,MAAMC,QACvB,4BAAqBN,KAAKmH,2BAA1B,EACA,6BAAsBnH,KAAKoH,4BAA3B,EAEgBpH,KAAKe,iBAAiBV,OAGxC6G,EAAc5G,SADG,CAAA,IAAjB/F,EACyB,mCAA4B0M,cAA5B,SAAoDD,OAApD,EAEA,sDAA+CA,QAA/C,SAAiEC,QAAjE,SAAmFnM,cAAnF,SAA0G3B,MAA1G,SAAoHC,MAApH,EAE7B4G,KAAKqH,gBAEDtH,eAAR,WACU,IACFa,EAIAZ,oBAHAa,EAGAb,qBAFA7G,EAEA6G,WADA5G,EACA4G,WACEoB,EAAapB,KAAKuB,cAAc,CAAEyC,MAAO,CAAA,EAA5B,EAAsC7K,EACnDkI,EAAYrB,KAAKyB,aAAa,CAAEuC,MAAO,CAAA,EAA3B,EAAqC5K,EACjDkO,EAActH,KAAKuH,eAAe,CAAA,CAApB,EACdC,EAAexH,KAAKyH,gBAAgB,CAAA,CAArB,EAErBzH,KAAKuD,oBAAoBrC,OACrBlB,KAAK3F,wBACL+G,EACAR,EACA0G,CAJJ,EAMAtH,KAAKqD,kBAAkBnC,OACnBlB,KAAK1F,sBACL+G,EACAR,EACA2G,CAJJ,GAOIzH,OAAR,SAAaqB,EAAoBC,GAC7B,IAAM3H,EAAiBsG,KAAKtG,eAE5BA,EAAe0H,WAAaA,EAC5B1H,EAAe2H,UAAYA,GAyGvBtB,sBAAR,SAA4B2H,EAAgB/K,GAA5C,IAIUQ,SAHDuK,IAGCvK,EAAWR,EAAQQ,SAGzBX,GACI,SAAAmL,GAAahK,EAAKwH,SACd,CACIxH,EAAKxE,MAAQuO,EAAK,GAAKC,EACvBhK,EAAKvE,MAAQsO,EAAK,GAAKC,GAE3BhL,CALS,GAOb,SAAAC,GACIe,EAAKiK,WAAa1I,sBAAsBtC,CAAD,GAE3C,CACIM,OAdOP,EAAQO,QAAUlF,GAezBmF,WAbM,IAiBV4C,wBAAR,SAA8B2H,EAAgB/K,GAA9C,IAIUQ,UAHDuK,EAAK,IAAOA,EAAK,MAGhBvK,EAAWR,EAAQQ,SAGzBX,GACI,SAAAmL,GAAahK,EAAKwD,UACduG,EAAK,GAAKC,EACVD,EAAK,GAAKC,EACVhL,CAHS,GAKb,SAAAC,GACIe,EAAKkK,aAAe3I,sBAAsBtC,CAAD,GAE7C,CACIM,OAZOP,EAAQO,QAAUlF,GAazBmF,WAXM,IAeV4C,+BAAR,SAAqChE,GACjC,IAIMoB,EJ3xB8BnB,EIuxBpC,GAAKD,IAAWA,EAAM,IAAOA,EAAM,IAOnC,OAHMoB,EAAWrB,GAAYC,EADnB,CAAC,IACiB,EJ1xB1BoB,EAAWrB,GADMC,EI4xBQA,EJ5xBSC,EI0xB1B,CAAA,IJzxBc,EI2xBlB8L,EJzxBH,CACH,CAAC/L,EAAM,GAAK,EAAIoB,EAChB,CAACpB,EAAM,GAAK,EAAIoB,GIyxBT6C,KAAK4E,sBAAsBkD,EAAS,CACvC3K,WADG,GAKH4C,wBAAR,WACIgI,qBAAqB/H,KAAK6H,YAAN,EACpB7H,KAAK6H,aAAe,GAEhB9H,sBAAR,WACIgI,qBAAqB/H,KAAK4H,UAAN,EACpB5H,KAAK4H,WAAa,GAEd7H,qBAAR,WACU,IAAAG,EAAaF,KAAKsE,UAAU,CAAA,CAAf,EAAZtC,OAAKE,OACZ,OAAOF,GAAOE,EAAoB,EAAdlC,KAAKhH,OAAa,GAElC+G,sBAAR,WACU,IAAAG,EAAaF,KAAKoE,UAAU,CAAA,CAAf,EAAZpC,OAAKE,OACZ,OAAOF,GAAOE,EAAoB,EAAdlC,KAAKhH,OAAa,GAElC+G,gBAAR,SAAsBiI,GAEd,IAAAvF,EAIAuF,UAHAtF,EAGAsF,UAFA7O,EAEA6O,QADA5O,EACA4O,QAOEvN,GANFuF,KAAKjG,aACLiG,KAAKiI,cAAc,CAAC9O,EAAOC,GAAQqJ,EAASC,CAA5C,EAEC1C,KAAKqC,WACNrC,KAAK+C,iBAES/C,KAAKvF,WACjByF,EAKFF,KAAKqC,UAJLoC,SACAC,QAIE/B,GAAUF,EAAUgC,WAAgB,IACpC7B,GAAUF,EAAUgC,YAAgB,IAE1C1E,KAAK/B,QAAQ,eACN+J,IACH9O,KAAMgP,GAAS/O,EAAQC,GAAS,EAAGqB,EAAU,GAAIA,EAAU,EAA9C,EACbtB,MAAO+O,EAAQ/O,EAAOsB,EAAU,GAAIA,EAAU,EAAhC,EACdrB,MAAO8O,EAAQ9O,EAAOqB,EAAU,GAAIA,EAAU,EAAhC,EACdkI,SACAC,UANJ,GASI7C,iBAAR,WACI,IAAMoI,EAAOnI,KAAKoI,eAAehJ,wBACjCY,KAAKqC,UAAY,CACboC,KAAM0D,EAAK1D,KACXC,IAAKyD,EAAKzD,IACV2D,MAAOF,EAAKE,MACZC,OAAQH,EAAKG,SAGbvI,gBAAR,SAAsB7G,EAAgBuJ,EAAiBC,GAC9C1C,KAAKqC,WACNrC,KAAK+C,iBAEH,IAAA7C,EAKFF,KAAKqC,UAJLoC,SACAC,QACA2D,UACAC,WAEE3L,EAAUqD,KAAKrD,QAEf4L,EAAsB5L,EAAQ/B,YAC9B4N,EAAsB7L,EAAQ9B,YAEpC8B,EAAQ/B,YAAc,WAAI6H,EAAUgC,GAAQ4D,EAAQ,OAA9B,EACtB1L,EAAQ9B,YAAc,WAAI6H,EAAUgC,GAAO4D,EAAS,OAA9B,EAEtBtI,KAAKmF,SAASjM,EAAM,CAChBuP,SAAU,SADd,EAIA9L,EAAQ/B,YAAc2N,EACtB5L,EAAQ9B,YAAc2N,GAElBzI,WAAR,SACI7G,EACAwP,GAEA,IAAMD,GAFNC,gBAEiBA,GAAYD,SACvBvI,EAMFF,KALAY,mBACAC,oBACO8H,UACAC,UACPnO,cAGAoM,EAEA7G,iBAFApF,aAAc7B,EAAgB6B,cAC9BkM,EACA9G,iBADAnF,aAAc9B,EAAgB8B,cAW5BuG,GATF,gBAAiBsH,IACjB9N,EAAc8N,EAAY9N,aAE1B,gBAAiB8N,IACjB7N,EAAc6N,EAAY7N,aAKXmF,KAAKuB,iBAClBF,EAAYrB,KAAKyB,eAEjBsF,EAAiB9B,EAAQ/L,CAAD,EAASA,EAAO,CAACA,EAAMA,GAA9CC,OAAOC,OACRyP,EAAYX,EAAQ/O,EAAOsB,EAAU,GAAIA,EAAU,EAAhC,EACnBqO,EAAYZ,EAAQ9O,EAAOqB,EAAU,GAAIA,EAAU,EAAhC,EACnBkC,EAAUqD,KAAKrD,QAMfoM,GAJNpM,EAAQxD,MAAQ0P,EAChBlM,EAAQvD,MAAQ0P,EAChBnM,EAAQzD,MAAQ2P,EAAYC,GAAa,EAElB9I,KAAKuB,iBACtByH,EAAgBhJ,KAAKyB,eAGvBwH,EAAW,EACXC,EAAW,EAIXA,EAFa,aAAbT,GACAQ,GAAY,CAAC7H,EAAa+H,EAAgB,UAAGvO,CAAH,EAAkBoF,KAAKgB,aAAxB,GAA0C2H,GACvE,CAACtH,EAAY8H,EAAgB,UAAGtO,CAAH,EAAkBmF,KAAKiB,cAAxB,GAA2C2H,IAEnFK,EAAWE,EAAgB,UAAGvO,CAAH,EAAkBgG,CAAnB,EACfuI,EAAgB,UAAGtO,CAAH,EAAkBgG,CAAnB,GAS9Bb,KAAKmB,UANWC,EAAa6H,EAAWN,GAGpBI,EAAiBE,EAAWJ,GAFhCxH,EAAY6H,EAAWN,GAGnBI,EAAgBE,EAAWJ,EAE/C,EACA9I,KAAKkB,UAEDnB,YAAR,SAAkBjC,EAAgBC,EAAgBpB,GAC9C,IAAIyE,EAAapB,KAAKuB,gBAClBF,EAAYrB,KAAKyB,eAMrB,OAJI9E,MAAAA,GAAAA,EAASsH,WACT7C,GAAcpB,KAAK7G,MACnBkI,GAAarB,KAAK5G,OAEf4G,KAAK6E,UAAUzD,EAAatD,EAAQuD,EAAYtD,EAAQpB,CAAxD,GAEHoD,YAAR,SAAkB9H,EAAW6M,EAAWnI,GAAxC,WAEoByM,EAEZpJ,gBADWqJ,EACXrJ,eAEEsJ,EAAa3M,MAAAA,SAAAA,EAASsH,SAItB7C,GAHNpB,KAAKuJ,cAAc,aAActR,EAAGqR,CAApC,EACAtJ,KAAKuJ,cAAc,WAAYzE,EAAGwE,CAAlC,EAEmBtJ,KAAKoB,YAClBC,EAAYrB,KAAKqB,UAEjBmI,GADNxJ,KAAKkB,SAC0BlB,KAAKuB,iBAC9BkI,EAAwBzJ,KAAKyB,eAInC,OAFAzB,KAAK0J,iBAAiBF,EAAwBC,CAA9C,EAEIvR,KAAKyR,MAAMP,CAAX,IAA+BhI,GAAclJ,KAAKyR,MAAMN,CAAX,IAA8BhI,IAC3ErB,KAAK0B,OAAS,CAAA,EACd1B,KAAK4J,KAAKxI,EAAYC,CAAtB,EACAnC,sBAAsB,WAClB,IAKgB2K,EACDC,EANVnM,EAAK+D,SAGV/D,EAAK+D,OAAS,CAAA,EAEEmI,GADV3J,EAGFvC,EAAKjE,2BADMoQ,cAGfnM,EAAKyD,WAAayI,EAClBlM,EAAK0D,UAAYyI,EAGb1I,IAAelJ,KAAKyR,MAAME,CAAX,GACZxI,IAAcnJ,KAAKyR,MAAMG,CAAX,GAEjBnM,EAAKkH,UAAU2E,EAAwBC,CAAvC,GAjBa,EAoBd,CAAA,IAIP1J,gBAAR,SAAsBzC,EAAiChC,EAAegO,GAClE,IAAMS,EAAQ5O,GAAMmC,GAEhBwD,EAEAd,YAFAhH,aAASD,EAAgBC,SACzB6N,EACA7G,eADA/G,aAAYF,EAAgBE,YAE1B+Q,EAAgBhK,KAAK,gBAAS+J,EAAM1O,GAAf,GACrByL,EAAuB9G,KAAK,kBAAW+J,EAAMzO,KAAjB,GAA0B,CAAA,EAAM,CAAA,CAArC,EAAtB2O,OAAUC,OAEbC,EAAYjS,KAAKyR,MAAMK,CAAX,EAEVI,EAAiBpK,KAAK,uBAAgB+J,EAAMxO,IAAtB,KACtBrC,EAAO8G,KAAK,cAAO+J,EAAMzO,KAAb,GAKZ+O,GAHFf,IACAhO,GAAgBpC,GAEFoC,EAAQpC,GAEtB+Q,IAAaC,EAEb5O,GADA6O,EAAYF,GACO/Q,EACZmR,EAAYpR,GAAagR,EAIhC3O,GAAS2O,GADTE,EAFqBjS,KAAKgK,IAAI,EAAGmI,EAAYJ,CAAxB,IAGe/Q,EACJgR,GAAzBG,EAAYpR,GAGnBkR,EAAYC,GAFNE,EAAepS,KAAKgK,IAAI,EAAGgI,EAAWG,CAAvB,GAGrB/O,GAAS4O,EAAWI,GAAgBpR,GAC7BiR,EAAYlR,EACnBkR,GAAanR,EACMoR,EAAiBnR,EAA7BkR,IACPA,GAAanR,GAGjBmR,EAAYjS,KAAKyR,MAAMQ,CAAX,EAEZnK,KAAK,gBAAS+J,EAAM1O,GAAf,GAAwB8O,EAC7BnK,KAAK,gBAAS+J,EAAMzO,KAAf,GAA0BA,EAAQ6O,EAAYjR,GAE/C6G,iBAAR,SAAuBzC,EAAiCiH,EAAkBa,GAChE,IJpgCV/J,EIqgCQyF,EAEAd,YAFAhH,aAASD,EAAgBC,SACzBC,EACA+G,eAEE+J,EAAQ5O,GAAMmC,GACdiN,EAAalO,GAAa2D,KAAK,eAAQ+J,EAAMzO,KAAd,GAAwBvC,EAAgB,eAAQgR,EAAMzO,KAAd,EAA9C,EACzBkP,EAAmBnO,GAAa2D,KAAK,qBAAc+J,EAAMzO,KAApB,GAA8BvC,EAAgB,qBAAcgR,EAAMzO,KAApB,EAApD,EAC/BpC,EAAO8G,KAAK,cAAO+J,EAAMzO,KAAb,GACZ0I,GJ7gCV3I,EI8gCQ2E,KAAK,mBAAY+J,EAAM1O,GAAlB,KJ7gCbrC,EI8gCQA,EJ7gCRgL,EI8gCQuG,EJ7gCRtR,EI8gCQA,EJpgCD,EATPmM,EI8gCQA,IJ5gCcqF,SAASzG,EAAM,EAAP,EACxBA,EAAM,GACN9L,KAAK8J,IAAI,CAAC,EAAG9J,KAAKwS,MAAMrP,EAAMrC,CAAjB,CAAb,EAAyCA,EAASC,EAC5CmM,GAAUqF,SAASzG,EAAM,EAAP,EACxBA,EAAM,GACN9L,KAAKgK,IAAI,EAAGhK,KAAKyS,KAAKtP,EAAMrC,CAAhB,CAAZ,EAAuCA,EAASC,II0gClD,OAAKsL,EAGE,CACHP,EAAM,GAAK9K,EAAOsR,EAAiB,GACnCtS,KAAKgK,IAAIlC,KAAK,kBAAW+J,EAAMxO,IAAjB,GAA2BrC,EAAO8G,KAAK,mBAAY+J,EAAMxO,IAAlB,GAA2ByI,EAAM,GAAK9K,EAAOsR,EAAiB,EAAnH,GAJO,CAACxG,EAAM,GAAKwG,EAAiB,GAAIxG,EAAM,GAAKwG,EAAiB,KAOpEzK,mBAAR,SAAyBqB,EAAoBC,GACzC,IAAM+H,EAAiBpJ,KAAK4K,QACtBvB,EAAgBrJ,KAAK6K,OAEvBzB,IAAmBhI,GAAciI,IAAkBhI,IAGvDrB,KAAK4K,QAAUxJ,EACfpB,KAAK6K,OAASxJ,EAiBdrB,KAAK/B,QAAQ,SAAU,CACnBmD,aACAC,YAFJ,4UA/kCI1F,KAAmB,SAACmP,EAAWC,GACvC,IAAMC,EAA2B,CAC7BC,WAAY,CAAA,EACZC,aAAc,CAAA,EACdC,eACI,OAAOnL,KAAKrD,QAAQoO,KAGtBK,EAAkB,cAAOL,CAAP,kEACpBD,EAAUM,GACVJ,EAAWK,IAAM,SAAU/O,GACvB0D,KAAKoL,GAAQ9O,CAAb,GAGJ0O,EAAWK,IAAM,SAAU/O,GACvB0D,KAAKrD,QAAQoO,GAAYzO,GAGjCgP,OAAOC,eAAeT,EAAWC,EAAUC,CAA3C,mEAKEQ,EA6jCL,EA7jC4B/K,iEL6JP,CAClB,SACA,aACA,YACA,UACA,aACA,iBAMmB,CACnB,gBACA,eACA,iBACA,kBACA,WACA,WACA,SACA,eACA,eACA,cACA,aACA,UACA,YACA,YACA,SACA,UACA,WACA,2BG/NJ,IAAWnI,MAAQmT,GACdD,GAAuBlT,IAAQmT,GAAQnT"}